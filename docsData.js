module.exports = {
	docs: {
		loading: false,
		error: false,
		rawData: {
			resource_docs: [{
					operation_id: 'OBPv3.1.0-getAccountApplication',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getAccountApplication'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID',
					summary: 'Get Account Application by Id',
					description: '<p>Get the Account Application.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the Account Application.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						account_application_id: 'gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763',
						product_code: 'saveing1',
						user: {
							user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							email: 'eveline@example.com',
							provider_id: 'Chris',
							provider: 'http://127.0.0.1:8080',
							username: 'felixsmith'
						},
						customer: {
							bank_id: 'GENODEM1GLS',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							customer_number: '5987953',
							legal_name: 'Eveline Tripman',
							mobile_phone_number: '+44 07972 444 876',
							email: 'eveline@example.com',
							face_image: {
								url: 'www.openbankproject',
								date: '2017-09-19T00:00:00Z'
							},
							date_of_birth: '2017-09-19T00:00:00Z',
							relationship_status: 'single',
							dependants: 10,
							dob_of_dependants: [
								'2017-09-19T00:00:00Z'
							],
							credit_rating: {
								rating: 'OBP',
								source: 'OBP'
							},
							credit_limit: {
								currency: 'EUR',
								amount: '10'
							},
							highest_education_attained: 'Master',
							employment_status: 'worker',
							kyc_status: true,
							last_ok_date: '2017-09-19T00:00:00Z',
							title: 'Dr.',
							branchId: 'DERBY6',
							nameSuffix: 'Sr'
						},
						date_of_application: '2017-09-19T00:00:00Z',
						status: 'REQUESTED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Application',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							product_code: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							user: {
								type: 'object',
								properties: {
									provider: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									provider_id: {
										type: 'string'
									},
									username: {
										type: 'string'
									},
									user_id: {
										type: 'string'
									}
								}
							},
							customer: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									nameSuffix: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									employment_status: {
										type: 'string'
									},
									last_ok_date: {
										type: 'string',
										format: 'date-time'
									},
									customer_id: {
										type: 'string'
									},
									relationship_status: {
										type: 'string'
									},
									date_of_birth: {
										type: 'string',
										format: 'date-time'
									},
									dob_of_dependants: {
										type: 'array',
										items: {
											type: 'string',
											format: 'date-time'
										}
									},
									highest_education_attained: {
										type: 'string'
									},
									customer_number: {
										type: 'string'
									},
									credit_rating: {
										type: 'object',
										properties: {
											source: {
												type: 'string'
											},
											rating: {
												type: 'string'
											}
										}
									},
									credit_limit: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									branchId: {
										type: 'string'
									},
									face_image: {
										type: 'object',
										properties: {
											date: {
												type: 'string',
												format: 'date-time'
											},
											url: {
												type: 'string'
											}
										}
									},
									dependants: {
										type: 'integer'
									},
									legal_name: {
										type: 'string'
									},
									title: {
										type: 'string'
									},
									mobile_phone_number: {
										type: 'string'
									},
									kyc_status: {
										type: 'boolean'
									}
								}
							},
							account_application_id: {
								type: 'string'
							},
							date_of_application: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyImageUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyImageUrl'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
					summary: 'Delete Counterparty Image URL',
					description: '<p>Delete image url of other bank account.</p>\n',
					description_markdown: 'Delete image url of other bank account.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url'
				},
				{
					operation_id: 'OBPv3.1.0-updateSystemView',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateSystemView'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/system-views/VIEW_ID',
					summary: 'Update System View.',
					description: '<p>Update an existing view on a bank account</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.</p>\n<p>The json sent is the same as during view creation (above), with one difference: the \'name\' field<br />\nof a view is not editable (it is only set when a view is created)</p>\n',
					description_markdown: 'Update an existing view on a bank account\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nThe json sent is the same as during view creation (above), with one difference: the \'name\' field\nof a view is not editable (it is only set when a view is created)',
					example_request_body: {
						description: 'this is for family',
						metadata_view: 'owner',
						is_public: true,
						which_alias_to_use: 'family',
						hide_metadata_if_alias_used: true,
						allowed_actions: [
							'can_see_transaction_this_bank_account',
							'can_see_transaction_other_bank_account',
							'can_see_transaction_metadata',
							'can_see_transaction_label',
							'can_see_transaction_amount',
							'can_see_transaction_type',
							'can_see_transaction_currency',
							'can_see_transaction_start_date',
							'can_see_transaction_finish_date',
							'can_see_transaction_balance',
							'can_see_comments',
							'can_see_narrative',
							'can_see_tags',
							'can_see_images',
							'can_see_bank_account_owners',
							'can_see_bank_account_type',
							'can_see_bank_account_balance',
							'can_see_bank_account_currency',
							'can_see_bank_account_label',
							'can_see_bank_account_national_identifier',
							'can_see_bank_account_swift_bic',
							'can_see_bank_account_iban',
							'can_see_bank_account_number',
							'can_see_bank_account_bank_name',
							'can_see_other_account_national_identifier',
							'can_see_other_account_swift_bic',
							'can_see_other_account_iban',
							'can_see_other_account_bank_name',
							'can_see_other_account_number',
							'can_see_other_account_metadata',
							'can_see_other_account_kind',
							'can_see_more_info',
							'can_see_url',
							'can_see_image_url',
							'can_see_open_corporates_url',
							'can_see_corporate_location',
							'can_see_physical_location',
							'can_see_public_alias',
							'can_see_private_alias',
							'can_add_more_info',
							'can_add_url',
							'can_add_image_url',
							'can_add_open_corporates_url',
							'can_add_corporate_location',
							'can_add_physical_location',
							'can_add_public_alias',
							'can_add_private_alias',
							'can_delete_corporate_location',
							'can_delete_physical_location',
							'can_edit_narrative',
							'can_add_comment',
							'can_delete_comment',
							'can_add_tag',
							'can_delete_tag',
							'can_add_image',
							'can_delete_image',
							'can_add_where_tag',
							'can_see_where_tag',
							'can_delete_where_tag',
							'can_create_counterparty',
							'can_see_bank_routing_scheme',
							'can_see_bank_routing_address',
							'can_see_bank_account_routing_scheme',
							'can_see_bank_account_routing_address',
							'can_see_other_bank_routing_scheme',
							'can_see_other_bank_routing_address',
							'can_see_other_account_routing_scheme',
							'can_see_other_account_routing_address',
							'can_query_available_funds'
						]
					},
					success_response_body: {
						id: '1234',
						short_name: 'short_name',
						description: 'description',
						metadata_view: 'owner',
						is_public: true,
						alias: 'No',
						hide_metadata_if_alias_used: true,
						can_add_comment: true,
						can_add_corporate_location: true,
						can_add_image: true,
						can_add_image_url: true,
						can_add_more_info: true,
						can_add_open_corporates_url: true,
						can_add_physical_location: true,
						can_add_private_alias: true,
						can_add_public_alias: true,
						can_add_tag: true,
						can_add_url: true,
						can_add_where_tag: true,
						can_delete_comment: true,
						can_add_counterparty: true,
						can_delete_corporate_location: true,
						can_delete_image: true,
						can_delete_physical_location: true,
						can_delete_tag: true,
						can_delete_where_tag: true,
						can_edit_owner_comment: true,
						can_see_bank_account_balance: true,
						can_query_available_funds: true,
						can_see_bank_account_bank_name: true,
						can_see_bank_account_currency: true,
						can_see_bank_account_iban: true,
						can_see_bank_account_label: true,
						can_see_bank_account_national_identifier: true,
						can_see_bank_account_number: true,
						can_see_bank_account_owners: true,
						can_see_bank_account_swift_bic: true,
						can_see_bank_account_type: true,
						can_see_comments: true,
						can_see_corporate_location: true,
						can_see_image_url: true,
						can_see_images: true,
						can_see_more_info: true,
						can_see_open_corporates_url: true,
						can_see_other_account_bank_name: true,
						can_see_other_account_iban: true,
						can_see_other_account_kind: true,
						can_see_other_account_metadata: true,
						can_see_other_account_national_identifier: true,
						can_see_other_account_number: true,
						can_see_other_account_swift_bic: true,
						can_see_owner_comment: true,
						can_see_physical_location: true,
						can_see_private_alias: true,
						can_see_public_alias: true,
						can_see_tags: true,
						can_see_transaction_amount: true,
						can_see_transaction_balance: true,
						can_see_transaction_currency: true,
						can_see_transaction_description: true,
						can_see_transaction_finish_date: true,
						can_see_transaction_metadata: true,
						can_see_transaction_other_bank_account: true,
						can_see_transaction_start_date: true,
						can_see_transaction_this_bank_account: true,
						can_see_transaction_type: true,
						can_see_url: true,
						can_see_where_tag: true,
						can_see_bank_routing_scheme: true,
						can_see_bank_routing_address: true,
						can_see_bank_account_routing_scheme: true,
						can_see_bank_account_routing_address: true,
						can_see_other_bank_routing_scheme: true,
						can_see_other_bank_routing_address: true,
						can_see_other_account_routing_scheme: true,
						can_see_other_account_routing_address: true,
						can_add_transaction_request_to_own_account: true,
						can_add_transaction_request_to_any_account: true,
						can_see_bank_account_credit_limit: true
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'System-View',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							allowed_actions: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							description: {
								type: 'string'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							is_public: {
								type: 'boolean'
							},
							which_alias_to_use: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							can_see_other_account_swift_bic: {
								type: 'boolean'
							},
							can_see_where_tag: {
								type: 'boolean'
							},
							can_see_url: {
								type: 'boolean'
							},
							can_see_bank_account_swift_bic: {
								type: 'boolean'
							},
							can_see_bank_account_routing_address: {
								type: 'boolean'
							},
							can_see_tags: {
								type: 'boolean'
							},
							can_see_transaction_balance: {
								type: 'boolean'
							},
							can_delete_corporate_location: {
								type: 'boolean'
							},
							can_add_image_url: {
								type: 'boolean'
							},
							can_see_public_alias: {
								type: 'boolean'
							},
							can_add_transaction_request_to_own_account: {
								type: 'boolean'
							},
							can_add_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_scheme: {
								type: 'boolean'
							},
							description: {
								type: 'string'
							},
							can_see_corporate_location: {
								type: 'boolean'
							},
							can_see_other_account_bank_name: {
								type: 'boolean'
							},
							can_see_more_info: {
								type: 'boolean'
							},
							can_add_counterparty: {
								type: 'boolean'
							},
							can_see_physical_location: {
								type: 'boolean'
							},
							can_query_available_funds: {
								type: 'boolean'
							},
							can_edit_owner_comment: {
								type: 'boolean'
							},
							can_see_private_alias: {
								type: 'boolean'
							},
							can_see_bank_account_credit_limit: {
								type: 'boolean'
							},
							can_see_other_account_routing_address: {
								type: 'boolean'
							},
							can_see_bank_account_balance: {
								type: 'boolean'
							},
							can_add_public_alias: {
								type: 'boolean'
							},
							can_see_bank_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_owners: {
								type: 'boolean'
							},
							can_see_other_account_metadata: {
								type: 'boolean'
							},
							can_delete_physical_location: {
								type: 'boolean'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							can_see_transaction_this_bank_account: {
								type: 'boolean'
							},
							can_see_image_url: {
								type: 'boolean'
							},
							can_see_transaction_type: {
								type: 'boolean'
							},
							can_see_images: {
								type: 'boolean'
							},
							can_see_transaction_amount: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							can_see_transaction_metadata: {
								type: 'boolean'
							},
							can_see_comments: {
								type: 'boolean'
							},
							can_see_other_account_iban: {
								type: 'boolean'
							},
							can_add_image: {
								type: 'boolean'
							},
							can_see_bank_account_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_type: {
								type: 'boolean'
							},
							can_see_other_account_kind: {
								type: 'boolean'
							},
							can_see_bank_account_currency: {
								type: 'boolean'
							},
							can_add_where_tag: {
								type: 'boolean'
							},
							can_see_transaction_start_date: {
								type: 'boolean'
							},
							can_see_bank_account_label: {
								type: 'boolean'
							},
							can_add_private_alias: {
								type: 'boolean'
							},
							can_see_transaction_currency: {
								type: 'boolean'
							},
							can_add_more_info: {
								type: 'boolean'
							},
							can_delete_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_address: {
								type: 'boolean'
							},
							can_see_transaction_other_bank_account: {
								type: 'boolean'
							},
							can_see_bank_account_number: {
								type: 'boolean'
							},
							can_add_corporate_location: {
								type: 'boolean'
							},
							alias: {
								type: 'string'
							},
							can_add_url: {
								type: 'boolean'
							},
							short_name: {
								type: 'string'
							},
							can_delete_where_tag: {
								type: 'boolean'
							},
							is_public: {
								type: 'boolean'
							},
							can_see_owner_comment: {
								type: 'boolean'
							},
							can_see_transaction_finish_date: {
								type: 'boolean'
							},
							can_see_open_corporates_url: {
								type: 'boolean'
							},
							can_add_physical_location: {
								type: 'boolean'
							},
							can_see_bank_account_iban: {
								type: 'boolean'
							},
							can_see_other_account_national_identifier: {
								type: 'boolean'
							},
							can_see_bank_routing_address: {
								type: 'boolean'
							},
							can_delete_image: {
								type: 'boolean'
							},
							can_add_transaction_request_to_any_account: {
								type: 'boolean'
							},
							can_add_tag: {
								type: 'boolean'
							},
							id: {
								type: 'string'
							},
							can_see_other_account_routing_scheme: {
								type: 'boolean'
							},
							can_add_open_corporates_url: {
								type: 'boolean'
							},
							can_delete_tag: {
								type: 'boolean'
							},
							can_see_transaction_description: {
								type: 'boolean'
							},
							can_see_bank_account_national_identifier: {
								type: 'boolean'
							},
							can_see_other_account_number: {
								type: 'boolean'
							},
							can_see_bank_account_bank_name: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateSystemView',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/system-views/VIEW_ID'
				},
				{
					operation_id: 'OBPv2.0.0-publicAccountsAllBanks',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'publicAccountsAllBanks'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/accounts/public',
					summary: 'Get Public Accounts at all Banks.',
					description: '<p>Get public accounts at all banks (Anonymous access).<br />\nReturns accounts that contain at least one public view (a view where is_public is true)<br />\nFor each account the API returns the ID and the available views.</p>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Get public accounts at all banks (Anonymous access).\nReturns accounts that contain at least one public view (a view where is_public is true)\nFor each account the API returns the ID and the available views.\n\nAuthentication is Optional\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0',
							label: 'NoneLabel',
							bank_id: 'GENODEM1GLS',
							views_available: [{
								id: '1',
								short_name: 'HHH',
								is_public: true
							}]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'Could not get accounts.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Public',
						'Account',
						'PublicData'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										views_available: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													is_public: {
														type: 'boolean'
													},
													short_name: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											}
										},
										bank_id: {
											type: 'string'
										},
										label: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/accounts/public'
				},
				{
					operation_id: 'OBPv3.1.0-getTaxResidence',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getTaxResidence'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residences',
					summary: 'Get Tax Residences of Customer',
					description: '<p>Get the Tax Residences of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the Tax Residences of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						tax_residence: [{
							domain: 'Enter some domain',
							tax_number: 'Enter some number',
							tax_residence_id: '902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'KYC',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							tax_residence: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										tax_residence_id: {
											type: 'string'
										},
										tax_number: {
											type: 'string'
										},
										domain: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residences'
				},
				{
					operation_id: 'OBPv2.0.0-getEntitlements',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getEntitlements'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/users/USER_ID/entitlements',
					summary: 'Get Entitlements for User',
					description: '<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\nAuthentication is Mandatory\n\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						list: [{
							entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
							role_name: 'CanQueryOtherUser',
							bank_id: 'GENODEM1GLS'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							list: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										role_name: {
											type: 'string'
										},
										entitlement_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanGetEntitlementsForAnyUserAtAnyBank',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/entitlements'
				},
				{
					operation_id: 'OBPv1.2.1-addPermissionForUserForBankAccountForMultipleViews',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addPermissionForUserForBankAccountForMultipleViews'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views',
					summary: 'Grant User access to a list of views.',
					description: '<p>Grants the user identified by PROVIDER_ID at their provider PROVIDER access to a list of views at BANK_ID for account ACCOUNT_ID.</p>\n<p>All url parameters must be <a href="http://en.wikipedia.org/wiki/Percent-encoding">%-encoded</a>, which is often especially relevant for PROVIDER_ID and PROVIDER.</p>\n<p>Authentication is Mandatory</p>\n<p>The User needs to have access to the owner view.</p>\n',
					description_markdown: 'Grants the user identified by PROVIDER_ID at their provider PROVIDER access to a list of views at BANK_ID for account ACCOUNT_ID.\n\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for PROVIDER_ID and PROVIDER.\n\nAuthentication is Mandatory\n\nThe User needs to have access to the owner view.',
					example_request_body: {
						views: [
							'_family',
							'_work'
						]
					},
					success_response_body: {
						views: [{
							id: '123',
							short_name: 'short_name',
							description: 'description',
							is_public: true,
							alias: 'None',
							hide_metadata_if_alias_used: true,
							can_add_comment: true,
							can_add_corporate_location: true,
							can_add_image: true,
							can_add_image_url: true,
							can_add_more_info: true,
							can_add_open_corporates_url: true,
							can_add_physical_location: true,
							can_add_private_alias: true,
							can_add_public_alias: true,
							can_add_tag: true,
							can_add_url: true,
							can_add_where_tag: true,
							can_delete_comment: true,
							can_delete_corporate_location: true,
							can_delete_image: true,
							can_delete_physical_location: true,
							can_delete_tag: true,
							can_delete_where_tag: true,
							can_edit_owner_comment: true,
							can_see_bank_account_balance: true,
							can_see_bank_account_bank_name: true,
							can_see_bank_account_currency: true,
							can_see_bank_account_iban: true,
							can_see_bank_account_label: true,
							can_see_bank_account_national_identifier: true,
							can_see_bank_account_number: true,
							can_see_bank_account_owners: true,
							can_see_bank_account_swift_bic: true,
							can_see_bank_account_type: true,
							can_see_comments: true,
							can_see_corporate_location: true,
							can_see_image_url: true,
							can_see_images: true,
							can_see_more_info: true,
							can_see_open_corporates_url: true,
							can_see_other_account_bank_name: true,
							can_see_other_account_iban: true,
							can_see_other_account_kind: true,
							can_see_other_account_metadata: true,
							can_see_other_account_national_identifier: true,
							can_see_other_account_number: true,
							can_see_other_account_swift_bic: true,
							can_see_owner_comment: true,
							can_see_physical_location: true,
							can_see_private_alias: true,
							can_see_public_alias: true,
							can_see_tags: true,
							can_see_transaction_amount: true,
							can_see_transaction_balance: true,
							can_see_transaction_currency: true,
							can_see_transaction_description: true,
							can_see_transaction_finish_date: true,
							can_see_transaction_metadata: true,
							can_see_transaction_other_bank_account: true,
							can_see_transaction_start_date: true,
							can_see_transaction_this_bank_account: true,
							can_see_transaction_type: true,
							can_see_url: true,
							can_see_where_tag: true
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.',
						'wrong format JSON',
						'could not save the privilege',
						'user does not have access to owner view on account'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'User',
						'OwnerViewRequired'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							views: {
								type: 'array',
								items: {
									type: 'string'
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							views: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										can_see_other_account_swift_bic: {
											type: 'boolean'
										},
										can_see_where_tag: {
											type: 'boolean'
										},
										can_see_url: {
											type: 'boolean'
										},
										can_see_bank_account_swift_bic: {
											type: 'boolean'
										},
										can_see_tags: {
											type: 'boolean'
										},
										can_see_transaction_balance: {
											type: 'boolean'
										},
										can_delete_corporate_location: {
											type: 'boolean'
										},
										can_add_image_url: {
											type: 'boolean'
										},
										can_see_public_alias: {
											type: 'boolean'
										},
										can_add_comment: {
											type: 'boolean'
										},
										description: {
											type: 'string'
										},
										can_see_corporate_location: {
											type: 'boolean'
										},
										can_see_other_account_bank_name: {
											type: 'boolean'
										},
										can_see_more_info: {
											type: 'boolean'
										},
										can_see_physical_location: {
											type: 'boolean'
										},
										can_edit_owner_comment: {
											type: 'boolean'
										},
										can_see_private_alias: {
											type: 'boolean'
										},
										can_see_bank_account_balance: {
											type: 'boolean'
										},
										can_add_public_alias: {
											type: 'boolean'
										},
										can_see_bank_account_owners: {
											type: 'boolean'
										},
										can_see_other_account_metadata: {
											type: 'boolean'
										},
										can_delete_physical_location: {
											type: 'boolean'
										},
										hide_metadata_if_alias_used: {
											type: 'boolean'
										},
										can_see_transaction_this_bank_account: {
											type: 'boolean'
										},
										can_see_image_url: {
											type: 'boolean'
										},
										can_see_transaction_type: {
											type: 'boolean'
										},
										can_see_images: {
											type: 'boolean'
										},
										can_see_transaction_amount: {
											type: 'boolean'
										},
										can_see_transaction_metadata: {
											type: 'boolean'
										},
										id: {
											type: 'string'
										},
										can_see_comments: {
											type: 'boolean'
										},
										can_see_other_account_iban: {
											type: 'boolean'
										},
										can_add_image: {
											type: 'boolean'
										},
										can_see_bank_account_type: {
											type: 'boolean'
										},
										can_see_other_account_kind: {
											type: 'boolean'
										},
										can_see_bank_account_currency: {
											type: 'boolean'
										},
										can_add_where_tag: {
											type: 'boolean'
										},
										can_see_transaction_start_date: {
											type: 'boolean'
										},
										can_see_bank_account_label: {
											type: 'boolean'
										},
										can_add_private_alias: {
											type: 'boolean'
										},
										can_see_transaction_currency: {
											type: 'boolean'
										},
										can_add_more_info: {
											type: 'boolean'
										},
										can_delete_comment: {
											type: 'boolean'
										},
										can_see_transaction_other_bank_account: {
											type: 'boolean'
										},
										can_see_bank_account_number: {
											type: 'boolean'
										},
										can_add_corporate_location: {
											type: 'boolean'
										},
										can_add_url: {
											type: 'boolean'
										},
										short_name: {
											type: 'string'
										},
										can_delete_where_tag: {
											type: 'boolean'
										},
										is_public: {
											type: 'boolean'
										},
										can_see_owner_comment: {
											type: 'boolean'
										},
										can_see_transaction_finish_date: {
											type: 'boolean'
										},
										can_see_open_corporates_url: {
											type: 'boolean'
										},
										can_add_physical_location: {
											type: 'boolean'
										},
										can_see_bank_account_iban: {
											type: 'boolean'
										},
										can_see_other_account_national_identifier: {
											type: 'boolean'
										},
										can_delete_image: {
											type: 'boolean'
										},
										can_add_tag: {
											type: 'boolean'
										},
										can_add_open_corporates_url: {
											type: 'boolean'
										},
										can_delete_tag: {
											type: 'boolean'
										},
										can_see_transaction_description: {
											type: 'boolean'
										},
										can_see_bank_account_national_identifier: {
											type: 'boolean'
										},
										can_see_other_account_number: {
											type: 'boolean'
										},
										can_see_bank_account_bank_name: {
											type: 'boolean'
										},
										alias: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views'
				},
				{
					operation_id: 'OBPv3.1.0-revokeConsent',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'revokeConsent'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/CONSENT_ID/revoke',
					summary: 'Revoke Consent',
					description: '<p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p>\n<p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p>\n<p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p>\n<p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.</p>\n<p>Revoke Consent for current user specified by CONSENT_ID</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\nRevoke Consent for current user specified by CONSENT_ID\n\n\nAuthentication is Mandatory\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						consent_id: '9d429899-24f5-42c8-8565-943ffa6a7945',
						jwt: 'eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4',
						status: 'REJECTED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: false,
					tags: [
						'Consent',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							status: {
								type: 'string'
							},
							jwt: {
								type: 'string'
							},
							consent_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/CONSENT_ID/revoke'
				},
				{
					operation_id: 'OBPv3.1.0-answerConsentChallenge',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'answerConsentChallenge'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/consents/CONSENT_ID/challenge',
					summary: 'Answer Consent Challenge',
					description: '<p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p>\n<p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p>\n<p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p>\n<p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.</p>\n<p>This endpoint is used to confirm a Consent previously created.</p>\n<p>The User must supply a code that was sent out of band (OOB) for example via an SMS.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\nThis endpoint is used to confirm a Consent previously created.\n\nThe User must supply a code that was sent out of band (OOB) for example via an SMS.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						answer: '12345678'
					},
					success_response_body: {
						consent_id: '9d429899-24f5-42c8-8565-943ffa6a7945',
						jwt: 'eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4',
						status: 'INITIATED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Consent',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							answer: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							status: {
								type: 'string'
							},
							jwt: {
								type: 'string'
							},
							consent_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/consents/CONSENT_ID/challenge'
				},
				{
					operation_id: 'OBPv3.1.0-deleteSystemView',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteSystemView'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/system-views/VIEW_ID',
					summary: 'Delete System View',
					description: '<p>Deletes the system view specified by VIEW_ID.</p>\n',
					description_markdown: 'Deletes the system view specified by VIEW_ID.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.',
						'user does not have owner access'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'System-View',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateSystemView',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/system-views/VIEW_ID'
				},
				{
					operation_id: 'OBPv3.0.0-getCurrentUser',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getCurrentUser'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/users/current',
					summary: 'Get User (Current)',
					description: '<p>Get the logged in user</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the logged in user\n\nAuthentication is Mandatory\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						email: 'eveline@example.com',
						provider_id: 'Chris',
						provider: 'http://127.0.0.1:8080',
						username: 'felixsmith',
						entitlements: {
							list: [{
								entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
								role_name: 'CanQueryOtherUser',
								bank_id: 'GENODEM1GLS'
							}]
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							entitlements: {
								type: 'object',
								properties: {
									list: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												bank_id: {
													type: 'string'
												},
												role_name: {
													type: 'string'
												},
												entitlement_id: {
													type: 'string'
												}
											}
										}
									}
								}
							},
							provider: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							provider_id: {
								type: 'string'
							},
							username: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/current'
				},
				{
					operation_id: 'OBPv3.1.0-getCustomerAddresses',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCustomerAddresses'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses',
					summary: 'Get Customer Addresses',
					description: '<p>Get the Addresses of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the Addresses of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						addresses: [{
							customer_address_id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: '',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE',
							tags: [
								'mailing',
								'home'
							],
							status: 'OK',
							insert_date: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'KYC',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							addresses: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										city: {
											type: 'string'
										},
										customer_id: {
											type: 'string'
										},
										tags: {
											type: 'array',
											items: {
												type: 'string'
											}
										},
										postcode: {
											type: 'string'
										},
										line_1: {
											type: 'string'
										},
										line_2: {
											type: 'string'
										},
										line_3: {
											type: 'string'
										},
										insert_date: {
											type: 'string',
											format: 'date-time'
										},
										customer_address_id: {
											type: 'string'
										},
										state: {
											type: 'string'
										},
										status: {
											type: 'string'
										},
										country_code: {
											type: 'string'
										},
										county: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanGetCustomerAddress',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses'
				},
				{
					operation_id: 'OBPv2.0.0-addSocialMediaHandle',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'addSocialMediaHandle'
					},
					request_verb: 'POST',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles',
					summary: 'Add Social Media Handle',
					description: '<p>Add a social media handle for the customer specified by CUSTOMER_ID.</p>\n',
					description_markdown: 'Add a social media handle for the customer specified by CUSTOMER_ID.',
					example_request_body: {
						customer_number: '5987953',
						type: 'PlaceholderString',
						handle: 'PlaceholderString',
						date_added: '2017-09-19T00:00:00Z',
						date_activated: '2017-09-19T00:00:00Z'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							date_activated: {
								type: 'string',
								format: 'date-time'
							},
							handle: {
								type: 'string'
							},
							date_added: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanAddSocialMediaHandle',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles'
				},
				{
					operation_id: 'OBPv3.1.0-updateAccountAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateAccountAttribute'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attributes/ACCOUNT_ATTRIBUTE_ID',
					summary: 'Update Account Attribute',
					description: '<p>Update Account Attribute</p>\n<p>Account Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Account Attribute is linked to its Account by ACCOUNT_ID</p>\n<p>Typical account attributes might be:</p>\n<p>ISIN (for International bonds)<br />\nVKN (for German bonds)<br />\nREDCODE (markit short code for credit derivative)<br />\nLOAN_ID (e.g. used for Anacredit reporting)</p>\n<p>ISSUE_DATE (When the bond was issued in the market)<br />\nMATURITY_DATE (End of life time of a product)<br />\nTRADABLE</p>\n<p>See <a href="http://www.fpml.org/">FPML</a> for more examples.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Update Account Attribute\n\n\nAccount Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Account Attribute is linked to its Account by ACCOUNT_ID\n\n\n       \n\nTypical account attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					success_response_body: {
						product_code: 'saving1',
						account_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							account_attribute_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							product_code: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attributes/ACCOUNT_ATTRIBUTE_ID'
				},
				{
					operation_id: 'OBPv3.1.0-createProductAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createProductAttribute'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attribute',
					summary: 'Create Product Attribute',
					description: '<p>Create Product Attribute</p>\n<p>Product Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Product Attribute is linked to its Product by PRODUCT_CODE</p>\n<p>Typical product attributes might be:</p>\n<p>ISIN (for International bonds)<br />\nVKN (for German bonds)<br />\nREDCODE (markit short code for credit derivative)<br />\nLOAN_ID (e.g. used for Anacredit reporting)</p>\n<p>ISSUE_DATE (When the bond was issued in the market)<br />\nMATURITY_DATE (End of life time of a product)<br />\nTRADABLE</p>\n<p>See <a href="http://www.fpml.org/">FPML</a> for more examples.</p>\n<p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Create Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nTypical product attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					success_response_body: {
						product_code: 'saving1',
						product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Product',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							product_attribute_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							product_code: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateProductAttribute',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attribute'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyPublicAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyPublicAlias'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					summary: 'Update public alias of other bank account.',
					description: '<p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					example_request_body: {
						alias: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-20001: User not logged in. Authentication is required!',
						'the view does not allow metadata access',
						'the view does not allow updating the public alias',
						'Alias cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							alias: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias'
				},
				{
					operation_id: 'OBPv2.2.0-createCounterparty',
					implemented_by: {
						version: 'OBPv2.2.0',
						'function': 'createCounterparty'
					},
					request_verb: 'POST',
					request_url: '/obp/v2.2.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties',
					summary: 'Create Counterparty (Explicit)',
					description: '<p>Create Counterparty (Explicit) for an Account.</p>\n<p>In OBP, there are two types of Counterparty.</p>\n<ul>\n<li>\n<p>Explicit Counterparties (those here) which we create explicitly and are used in COUNTERPARTY Transaction Requests</p>\n</li>\n<li>\n<p>Implicit Counterparties (AKA Other Accounts) which are generated automatically from the other sides of Transactions.</p>\n</li>\n</ul>\n<p>Explicit Counterparties are created for the account / view<br />\nThey are how the user of the view (e.g. account owner) refers to the other side of the transaction</p>\n<p>name : the human readable name (e.g. Piano teacher, Miss Nipa)</p>\n<p>description : the human readable name (e.g. Piano teacher, Miss Nipa)</p>\n<p>bank_routing_scheme : eg: bankId or bankCode or any other strings</p>\n<p>bank_routing_address : eg: <code>gh.29.uk</code>, must be valid sandbox bankIds</p>\n<p>account_routing_scheme : eg: AccountId or AccountNumber or any other strings</p>\n<p>account_routing_address : eg: <code>1d65db7c-a7b2-4839-af41-95</code>, must be valid accountIds</p>\n<p>other_account_secondary_routing_scheme : eg: IBan or any other strings</p>\n<p>other_account_secondary_routing_address : if it is IBan, it should be unique for each counterparty.</p>\n<p>other_branch_routing_scheme : eg: branchId or any other strings or you can leave it empty, not useful in sandbox mode.</p>\n<p>other_branch_routing_address : eg: <code>branch-id-123</code> or you can leave it empty, not useful in sandbox mode.</p>\n<p>is_beneficiary : must be set to <code>true</code> in order to send payments to this counterparty</p>\n<p>bespoke: It support list of key-value, you can add it to the counterarty.</p>\n<p>bespoke.key : any info-key you want to add to this counerparty</p>\n<p>bespoke.value : any info-value you want to add to this counerparty</p>\n<p>The view specified by VIEW_ID must have the canAddCounterparty permission</p>\n<p>A minimal example for TransactionRequestType == COUNTERPARTY<br />\n{<br />\n&quot;name&quot;: &quot;Tesobe1&quot;,<br />\n&quot;description&quot;: &quot;Good Company&quot;,<br />\n&quot;other_bank_routing_scheme&quot;: &quot;bankId&quot;,<br />\n&quot;other_bank_routing_address&quot;: &quot;gh.29.uk&quot;,<br />\n&quot;other_account_routing_scheme&quot;: &quot;accountId&quot;,<br />\n&quot;other_account_routing_address&quot;: &quot;8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0&quot;,<br />\n&quot;is_beneficiary&quot;: true,<br />\n&quot;other_account_secondary_routing_scheme&quot;: &quot;&quot;,<br />\n&quot;other_account_secondary_routing_address&quot;: &quot;&quot;,<br />\n&quot;other_branch_routing_scheme&quot;: &quot;&quot;,<br />\n&quot;other_branch_routing_address&quot;: &quot;&quot;,<br />\n&quot;bespoke&quot;: []<br />\n}</p>\n<p>A minimal example for TransactionRequestType == SEPA</p>\n<p>{<br />\n&quot;name&quot;: &quot;Tesobe2&quot;,<br />\n&quot;description&quot;: &quot;Good Company&quot;,<br />\n&quot;other_bank_routing_scheme&quot;: &quot;bankId&quot;,<br />\n&quot;other_bank_routing_address&quot;: &quot;gh.29.uk&quot;,<br />\n&quot;other_account_routing_scheme&quot;: &quot;accountId&quot;,<br />\n&quot;other_account_routing_address&quot;: &quot;8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0&quot;,<br />\n&quot;other_account_secondary_routing_scheme&quot;: &quot;IBAN&quot;,<br />\n&quot;other_account_secondary_routing_address&quot;: &quot;DE89 3704 0044 0532 0130 00&quot;,<br />\n&quot;is_beneficiary&quot;: true,<br />\n&quot;other_branch_routing_scheme&quot;: &quot;&quot;,<br />\n&quot;other_branch_routing_address&quot;: &quot;&quot;,<br />\n&quot;bespoke&quot;: []<br />\n}</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create Counterparty (Explicit) for an Account.\n\nIn OBP, there are two types of Counterparty.\n\n* Explicit Counterparties (those here) which we create explicitly and are used in COUNTERPARTY Transaction Requests\n\n* Implicit Counterparties (AKA Other Accounts) which are generated automatically from the other sides of Transactions.\n\nExplicit Counterparties are created for the account / view\nThey are how the user of the view (e.g. account owner) refers to the other side of the transaction\n\nname : the human readable name (e.g. Piano teacher, Miss Nipa)\n\ndescription : the human readable name (e.g. Piano teacher, Miss Nipa)\n\nbank_routing_scheme : eg: bankId or bankCode or any other strings\n\nbank_routing_address : eg: `gh.29.uk`, must be valid sandbox bankIds\n\naccount_routing_scheme : eg: AccountId or AccountNumber or any other strings\n\naccount_routing_address : eg: `1d65db7c-a7b2-4839-af41-95`, must be valid accountIds\n\nother_account_secondary_routing_scheme : eg: IBan or any other strings\n\nother_account_secondary_routing_address : if it is IBan, it should be unique for each counterparty. \n\nother_branch_routing_scheme : eg: branchId or any other strings or you can leave it empty, not useful in sandbox mode.\n\nother_branch_routing_address : eg: `branch-id-123` or you can leave it empty, not useful in sandbox mode.\n\nis_beneficiary : must be set to `true` in order to send payments to this counterparty\n\nbespoke: It support list of key-value, you can add it to the counterarty.\n\nbespoke.key : any info-key you want to add to this counerparty\n \nbespoke.value : any info-value you want to add to this counerparty\n\nThe view specified by VIEW_ID must have the canAddCounterparty permission\n\nA minimal example for TransactionRequestType == COUNTERPARTY\n {\n  "name": "Tesobe1",\n  "description": "Good Company",\n  "other_bank_routing_scheme": "bankId",\n  "other_bank_routing_address": "gh.29.uk",\n  "other_account_routing_scheme": "accountId",\n  "other_account_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "other_account_secondary_routing_scheme": "",\n  "other_account_secondary_routing_address": "",\n  "other_branch_routing_scheme": "",\n  "other_branch_routing_address": "",\n  "bespoke": []\n}\n\n \nA minimal example for TransactionRequestType == SEPA\n \n {\n  "name": "Tesobe2",\n  "description": "Good Company",\n  "other_bank_routing_scheme": "bankId",\n  "other_bank_routing_address": "gh.29.uk",\n  "other_account_routing_scheme": "accountId",\n  "other_account_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "other_account_secondary_routing_scheme": "IBAN",\n  "other_account_secondary_routing_address": "DE89 3704 0044 0532 0130 00",\n  "is_beneficiary": true,\n  "other_branch_routing_scheme": "",\n  "other_branch_routing_address": "",\n  "bespoke": []\n}\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'CounterpartyName',
						description: 'My landlord',
						other_account_routing_scheme: 'accountNumber',
						other_account_routing_address: '7987987-2348987-234234',
						other_account_secondary_routing_scheme: 'IBAN',
						other_account_secondary_routing_address: 'DE89370400440532013000',
						other_bank_routing_scheme: 'bankCode',
						other_bank_routing_address: '10',
						other_branch_routing_scheme: 'branchNumber',
						other_branch_routing_address: '10010',
						is_beneficiary: true,
						bespoke: [{
							key: 'englishName',
							value: 'english Name'
						}]
					},
					success_response_body: {
						name: 'CounterpartyName',
						description: 'My landlord',
						created_by_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						this_bank_id: 'GENODEM1GLS',
						this_account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						this_view_id: 'owner',
						counterparty_id: '1d65db7c-a7b2-4839-af41-958276ab7790',
						other_bank_routing_scheme: 'bankCode',
						other_bank_routing_address: '10',
						other_branch_routing_scheme: 'branchNumber',
						other_branch_routing_address: '10010',
						other_account_routing_scheme: 'accountNumber',
						other_account_routing_address: '7987987-2348987-234234',
						other_account_secondary_routing_scheme: 'accountId',
						other_account_secondary_routing_address: '8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0',
						is_beneficiary: true,
						bespoke: [{
							key: 'englishName',
							value: 'english Name'
						}],
						metadata: {
							public_alias: 'String',
							more_info: 'String',
							url: 'String',
							image_url: 'String',
							open_corporates_url: 'String',
							corporate_location: {
								latitude: 11.45,
								longitude: 11.45,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '123',
									provider: 'http://127.0.0.1:8080',
									username: 'felixsmith'
								}
							},
							physical_location: {
								latitude: 11.45,
								longitude: 11.45,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '123',
									provider: 'http://127.0.0.1:8080',
									username: 'felixsmith'
								}
							},
							private_alias: 'String'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-30014: Counterparty already exists. Please specify a different value for BANK_ID or ACCOUNT_ID or VIEW_ID or NAME.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty',
						'Account'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							bespoke: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										key: {
											type: 'string'
										}
									}
								}
							},
							other_bank_routing_scheme: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							other_branch_routing_address: {
								type: 'string'
							},
							other_account_secondary_routing_address: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							other_account_routing_address: {
								type: 'string'
							},
							other_bank_routing_address: {
								type: 'string'
							},
							other_branch_routing_scheme: {
								type: 'string'
							},
							other_account_secondary_routing_scheme: {
								type: 'string'
							},
							other_account_routing_scheme: {
								type: 'string'
							},
							is_beneficiary: {
								type: 'boolean'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bespoke: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										key: {
											type: 'string'
										}
									}
								}
							},
							created_by_user_id: {
								type: 'string'
							},
							other_bank_routing_scheme: {
								type: 'string'
							},
							this_bank_id: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							other_account_secondary_routing_scheme: {
								type: 'string'
							},
							other_branch_routing_address: {
								type: 'string'
							},
							counterparty_id: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							other_account_routing_address: {
								type: 'string'
							},
							other_bank_routing_address: {
								type: 'string'
							},
							this_account_id: {
								type: 'string'
							},
							other_branch_routing_scheme: {
								type: 'string'
							},
							metadata: {
								type: 'object',
								properties: {
									private_alias: {
										type: 'string'
									},
									corporate_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													username: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									url: {
										type: 'string'
									},
									physical_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													username: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									public_alias: {
										type: 'string'
									},
									open_corporates_url: {
										type: 'string'
									},
									more_info: {
										type: 'string'
									},
									image_url: {
										type: 'string'
									}
								}
							},
							other_account_routing_scheme: {
								type: 'string'
							},
							other_account_secondary_routing_address: {
								type: 'string'
							},
							is_beneficiary: {
								type: 'boolean'
							},
							this_view_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerData',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerData'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/data',
					summary: 'Update the other data of a Customer',
					description: '<p>Update the other data of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the other data of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						relationship_status: 'single',
						dependants: 10,
						highest_education_attained: 'Master',
						employment_status: 'worker'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							employment_status: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							highest_education_attained: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerIdentity',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/data'
				},
				{
					operation_id: 'OBPv3.1.0-deleteUserAuthContexts',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteUserAuthContexts'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/users/USER_ID/auth-context',
					summary: 'Delete User\'s Auth Contexts',
					description: '<p>Delete the Auth Contexts of a User specified by USER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Delete the Auth Contexts of a User specified by USER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/auth-context'
				},
				{
					operation_id: 'OBPv1.4.0-getCrmEvents',
					implemented_by: {
						version: 'OBPv1.4.0',
						'function': 'getCrmEvents'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.4.0/banks/d833731bfb92ee40d5b2da9aa66cef9/crm-events',
					summary: 'Get CRM Events',
					description: '',
					description_markdown: '',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						crm_events: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							bank_id: 'GENODEM1GLS',
							customer_name: 'String',
							customer_number: '5987953',
							category: 'String',
							detail: 'String',
							channel: 'String',
							scheduled_date: '2017-09-19T00:00:00Z',
							actual_date: '2017-09-19T00:00:00Z',
							result: 'String'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'No CRM Events available.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							crm_events: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										customer_number: {
											type: 'string'
										},
										id: {
											type: 'string'
										},
										result: {
											type: 'string'
										},
										actual_date: {
											type: 'string',
											format: 'date-time'
										},
										customer_name: {
											type: 'string'
										},
										category: {
											type: 'string'
										},
										detail: {
											type: 'string'
										},
										scheduled_date: {
											type: 'string',
											format: 'date-time'
										},
										channel: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/crm-events'
				},
				{
					operation_id: 'OBPv3.1.0-deleteUserAuthContextById',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteUserAuthContextById'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/users/USER_ID/auth-context/USER_AUTH_CONTEXT_ID',
					summary: 'Delete User Auth Context',
					description: '<p>Delete a User AuthContext of the User specified by USER_AUTH_CONTEXT_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Delete a User AuthContext of the User specified by USER_AUTH_CONTEXT_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/auth-context/USER_AUTH_CONTEXT_ID'
				},
				{
					operation_id: 'OBPv3.1.0-getCreditLimitRequests',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCreditLimitRequests'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests',
					summary: 'Get Credit Limit Order Requests ',
					description: '<p><strong>NOTE: This endpoint currently only returns example data.</strong></p>\n<p>Get Credit Limit Order Requests</p>\n',
					description_markdown: '**NOTE: This endpoint currently only returns example data.**\n\n      \nGet Credit Limit Order Requests \n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						rank_amount_1: 'String',
						nominal_interest_1: 'String',
						rank_amount_2: 'String',
						nominal_interest_2: 'String'
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							nominal_interest_2: {
								type: 'string'
							},
							rank_amount_2: {
								type: 'string'
							},
							nominal_interest_1: {
								type: 'string'
							},
							rank_amount_1: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyOpenCorporatesUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyOpenCorporatesUrl'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
					summary: 'Add Open Corporates URL to Counterparty',
					description: '<p>Add open corporates url to other bank account.</p>\n',
					description_markdown: 'Add open corporates url to other bank account.',
					example_request_body: {
						open_corporates_URL: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow adding an open corporate url',
						'URL cannot be added',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							open_corporates_URL: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url'
				},
				{
					operation_id: 'OBPv1.2.1-deleteViewForBankAccount',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteViewForBankAccount'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID',
					summary: 'Delete View',
					description: '<p>Deletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.</p>\n',
					description_markdown: 'Deletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.',
						'user does not have owner access'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID'
				},
				{
					operation_id: 'OBPv3.1.0-getAccountApplications',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getAccountApplications'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications',
					summary: 'Get Account Applications',
					description: '<p>Get the Account Applications.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the Account Applications.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						account_applications: [{
							account_application_id: 'gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763',
							product_code: 'saveing1',
							user: {
								user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
								email: 'eveline@example.com',
								provider_id: 'Chris',
								provider: 'http://127.0.0.1:8080',
								username: 'felixsmith'
							},
							customer: {
								bank_id: 'GENODEM1GLS',
								customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
								customer_number: '5987953',
								legal_name: 'Eveline Tripman',
								mobile_phone_number: '+44 07972 444 876',
								email: 'eveline@example.com',
								face_image: {
									url: 'www.openbankproject',
									date: '2017-09-19T00:00:00Z'
								},
								date_of_birth: '2017-09-19T00:00:00Z',
								relationship_status: 'single',
								dependants: 10,
								dob_of_dependants: [
									'2017-09-19T00:00:00Z'
								],
								credit_rating: {
									rating: 'OBP',
									source: 'OBP'
								},
								credit_limit: {
									currency: 'EUR',
									amount: '10'
								},
								highest_education_attained: 'Master',
								employment_status: 'worker',
								kyc_status: true,
								last_ok_date: '2017-09-19T00:00:00Z',
								title: 'Dr.',
								branchId: 'DERBY6',
								nameSuffix: 'Sr'
							},
							date_of_application: '2017-09-19T00:00:00Z',
							status: 'REQUESTED'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Application',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							account_applications: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										product_code: {
											type: 'string'
										},
										status: {
											type: 'string'
										},
										user: {
											type: 'object',
											properties: {
												provider: {
													type: 'string'
												},
												email: {
													type: 'string'
												},
												provider_id: {
													type: 'string'
												},
												username: {
													type: 'string'
												},
												user_id: {
													type: 'string'
												}
											}
										},
										customer: {
											type: 'object',
											properties: {
												bank_id: {
													type: 'string'
												},
												nameSuffix: {
													type: 'string'
												},
												email: {
													type: 'string'
												},
												employment_status: {
													type: 'string'
												},
												last_ok_date: {
													type: 'string',
													format: 'date-time'
												},
												customer_id: {
													type: 'string'
												},
												relationship_status: {
													type: 'string'
												},
												date_of_birth: {
													type: 'string',
													format: 'date-time'
												},
												dob_of_dependants: {
													type: 'array',
													items: {
														type: 'string',
														format: 'date-time'
													}
												},
												highest_education_attained: {
													type: 'string'
												},
												customer_number: {
													type: 'string'
												},
												credit_rating: {
													type: 'object',
													properties: {
														source: {
															type: 'string'
														},
														rating: {
															type: 'string'
														}
													}
												},
												credit_limit: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												branchId: {
													type: 'string'
												},
												face_image: {
													type: 'object',
													properties: {
														date: {
															type: 'string',
															format: 'date-time'
														},
														url: {
															type: 'string'
														}
													}
												},
												dependants: {
													type: 'integer'
												},
												legal_name: {
													type: 'string'
												},
												title: {
													type: 'string'
												},
												mobile_phone_number: {
													type: 'string'
												},
												kyc_status: {
													type: 'boolean'
												}
											}
										},
										account_application_id: {
											type: 'string'
										},
										date_of_application: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications'
				},
				{
					operation_id: 'OBPv3.1.0-getTransactionByIdForBankAccount',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getTransactionByIdForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/transaction',
					summary: 'Get Transaction by Id.',
					description: '<p>Returns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and <a href="#1_2_1-getViewsForBankAccount">moderated</a> by the view (VIEW_ID).</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Returns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and [moderated](#1_2_1-getViewsForBankAccount) by the view (VIEW_ID).\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						this_account: {
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							holders: [{
								name: 'OBP',
								is_alias: true
							}],
							number: '123',
							kind: 'AC',
							IBAN: 'UK1234AD',
							swift_bic: 'UK1234AD',
							bank: {
								national_identifier: 'OBP',
								name: 'OBP'
							}
						},
						other_account: {
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							holder: {
								name: 'OBP',
								is_alias: true
							},
							number: '123',
							kind: '3456',
							IBAN: 'UK234DB',
							swift_bic: 'UK12321DB',
							bank: {
								national_identifier: 'OBP',
								name: 'OBP'
							},
							metadata: {
								public_alias: 'NONE',
								private_alias: 'NONE',
								more_info: 'www.openbankproject.com',
								URL: 'www.openbankproject.com',
								image_URL: 'www.openbankproject.com',
								open_corporates_URL: 'www.openbankproject.com',
								corporate_location: {
									latitude: 1.231,
									longitude: 1.231,
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								},
								physical_location: {
									latitude: 1.231,
									longitude: 1.231,
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								}
							}
						},
						details: {
							type: 'AC',
							description: 'this is for family',
							posted: '2017-09-19T00:00:00Z',
							completed: '2017-09-19T00:00:00Z',
							new_balance: {
								currency: 'EUR',
								amount: '10'
							},
							value: {
								currency: 'EUR',
								amount: '10'
							}
						},
						metadata: {
							narrative: 'NONE',
							comments: [{
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								value: 'OBP',
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							}],
							tags: [{
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								value: 'OBP',
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							}],
							images: [{
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								label: 'NONE',
								URL: 'www.openbankproject.com',
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							}],
							where: {
								latitude: 1.231,
								longitude: 1.231,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Transaction',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							details: {
								type: 'object',
								properties: {
									type: {
										type: 'string'
									},
									description: {
										type: 'string'
									},
									completed: {
										type: 'string',
										format: 'date-time'
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									new_balance: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									posted: {
										type: 'string',
										format: 'date-time'
									}
								}
							},
							id: {
								type: 'string'
							},
							this_account: {
								type: 'object',
								properties: {
									swift_bic: {
										type: 'string'
									},
									number: {
										type: 'string'
									},
									id: {
										type: 'string'
									},
									bank: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											national_identifier: {
												type: 'string'
											}
										}
									},
									holders: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												is_alias: {
													type: 'boolean'
												},
												name: {
													type: 'string'
												}
											}
										}
									},
									kind: {
										type: 'string'
									},
									IBAN: {
										type: 'string'
									}
								}
							},
							other_account: {
								type: 'object',
								properties: {
									IBAN: {
										type: 'string'
									},
									swift_bic: {
										type: 'string'
									},
									number: {
										type: 'string'
									},
									holder: {
										type: 'object',
										properties: {
											is_alias: {
												type: 'boolean'
											},
											name: {
												type: 'string'
											}
										}
									},
									id: {
										type: 'string'
									},
									bank: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											national_identifier: {
												type: 'string'
											}
										}
									},
									metadata: {
										type: 'object',
										properties: {
											image_URL: {
												type: 'string'
											},
											URL: {
												type: 'string'
											},
											open_corporates_URL: {
												type: 'string'
											},
											physical_location: {
												type: 'object',
												properties: {
													user: {
														type: 'object',
														properties: {
															display_name: {
																type: 'string'
															},
															provider: {
																type: 'string'
															},
															id: {
																type: 'string'
															}
														}
													},
													date: {
														type: 'string',
														format: 'date-time'
													},
													longitude: {
														type: 'number'
													},
													latitude: {
														type: 'number'
													}
												}
											},
											public_alias: {
												type: 'string'
											},
											corporate_location: {
												type: 'object',
												properties: {
													user: {
														type: 'object',
														properties: {
															display_name: {
																type: 'string'
															},
															provider: {
																type: 'string'
															},
															id: {
																type: 'string'
															}
														}
													},
													date: {
														type: 'string',
														format: 'date-time'
													},
													longitude: {
														type: 'number'
													},
													latitude: {
														type: 'number'
													}
												}
											},
											private_alias: {
												type: 'string'
											},
											more_info: {
												type: 'string'
											}
										}
									},
									kind: {
										type: 'string'
									}
								}
							},
							metadata: {
								type: 'object',
								properties: {
									narrative: {
										type: 'string'
									},
									tags: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												user: {
													type: 'object',
													properties: {
														display_name: {
															type: 'string'
														},
														provider: {
															type: 'string'
														},
														id: {
															type: 'string'
														}
													}
												},
												date: {
													type: 'string',
													format: 'date-time'
												},
												value: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										}
									},
									images: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												date: {
													type: 'string',
													format: 'date-time'
												},
												URL: {
													type: 'string'
												},
												id: {
													type: 'string'
												},
												user: {
													type: 'object',
													properties: {
														display_name: {
															type: 'string'
														},
														provider: {
															type: 'string'
														},
														id: {
															type: 'string'
														}
													}
												},
												label: {
													type: 'string'
												}
											}
										}
									},
									comments: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												user: {
													type: 'object',
													properties: {
														display_name: {
															type: 'string'
														},
														provider: {
															type: 'string'
														},
														id: {
															type: 'string'
														}
													}
												},
												date: {
													type: 'string',
													format: 'date-time'
												},
												value: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										}
									},
									where: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													display_name: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/transaction'
				},
				{
					operation_id: 'OBPv3.1.0-getCustomerByCustomerNumber',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCustomerByCustomerNumber'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/customer-number',
					summary: 'Get Customer by CUSTOMER_NUMBER',
					description: '<p>Gets the Customer specified by CUSTOMER_NUMBER.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Gets the Customer specified by CUSTOMER_NUMBER.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						customer_number: '5987953'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30008: User Customer Link not found by USER_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'KYC',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							customer_number: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/customer-number'
				},
				{
					operation_id: 'OBPv3.1.0-createCustomerAddress',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createCustomerAddress'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/address',
					summary: 'Add Address to Customer',
					description: '<p>Add an Address to the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Add an Address to the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						line_1: 'No 1 the Road',
						line_2: 'The Place',
						line_3: 'The Hill',
						city: 'Berlin',
						county: '',
						state: 'Brandenburg',
						postcode: '13359',
						country_code: 'DE',
						tags: [
							'mailing',
							'home'
						],
						status: 'OK'
					},
					success_response_body: {
						customer_address_id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						line_1: 'No 1 the Road',
						line_2: 'The Place',
						line_3: 'The Hill',
						city: 'Berlin',
						county: '',
						state: 'Brandenburg',
						postcode: '13359',
						country_code: 'DE',
						tags: [
							'mailing',
							'home'
						],
						status: 'OK',
						insert_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							city: {
								type: 'string'
							},
							tags: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							postcode: {
								type: 'string'
							},
							line_1: {
								type: 'string'
							},
							line_2: {
								type: 'string'
							},
							line_3: {
								type: 'string'
							},
							state: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							country_code: {
								type: 'string'
							},
							county: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							city: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							tags: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							postcode: {
								type: 'string'
							},
							line_1: {
								type: 'string'
							},
							line_2: {
								type: 'string'
							},
							line_3: {
								type: 'string'
							},
							insert_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_address_id: {
								type: 'string'
							},
							state: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							country_code: {
								type: 'string'
							},
							county: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateCustomerAddress',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/address'
				},
				{
					operation_id: 'OBPv3.1.0-deleteTaxResidence',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteTaxResidence'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax_residencies/TAX_RESIDENCE_ID',
					summary: 'Delete Tax Residence',
					description: '<p>Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'KYC',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax_residencies/TAX_RESIDENCE_ID'
				},
				{
					operation_id: 'OBPv3.0.0-getOtherAccountsForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getOtherAccountsForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts',
					summary: 'Get Other Accounts of one Account.',
					description: '<p>Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.<br />\nAuthentication is Optional</p>\n<p>Authentication is required if the view VIEW_ID is not public.</p>\n',
					description_markdown: 'Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.\nAuthentication is Optional\n\nAuthentication is required if the view VIEW_ID is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						other_accounts: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							holder: {
								name: 'OBP',
								is_alias: true
							},
							bank_routing: {
								scheme: 'Bank_ID',
								address: 'gh.29.uk'
							},
							account_routings: [{
								scheme: 'AccountNumber',
								address: '4930396'
							}],
							metadata: {
								public_alias: 'NONE',
								private_alias: 'NONE',
								more_info: 'www.openbankproject.com',
								URL: 'www.openbankproject.com',
								image_URL: 'www.openbankproject.com',
								open_corporates_URL: 'www.openbankproject.com',
								corporate_location: {
									latitude: 1.231,
									longitude: 1.231,
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								},
								physical_location: {
									latitude: 1.231,
									longitude: 1.231,
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								}
							}
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Counterparty',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							other_accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										holder: {
											type: 'object',
											properties: {
												is_alias: {
													type: 'boolean'
												},
												name: {
													type: 'string'
												}
											}
										},
										id: {
											type: 'string'
										},
										metadata: {
											type: 'object',
											properties: {
												image_URL: {
													type: 'string'
												},
												URL: {
													type: 'string'
												},
												open_corporates_URL: {
													type: 'string'
												},
												physical_location: {
													type: 'object',
													properties: {
														user: {
															type: 'object',
															properties: {
																display_name: {
																	type: 'string'
																},
																provider: {
																	type: 'string'
																},
																id: {
																	type: 'string'
																}
															}
														},
														date: {
															type: 'string',
															format: 'date-time'
														},
														longitude: {
															type: 'number'
														},
														latitude: {
															type: 'number'
														}
													}
												},
												public_alias: {
													type: 'string'
												},
												corporate_location: {
													type: 'object',
													properties: {
														user: {
															type: 'object',
															properties: {
																display_name: {
																	type: 'string'
																},
																provider: {
																	type: 'string'
																},
																id: {
																	type: 'string'
																}
															}
														},
														date: {
															type: 'string',
															format: 'date-time'
														},
														longitude: {
															type: 'number'
														},
														latitude: {
															type: 'number'
														}
													}
												},
												private_alias: {
													type: 'string'
												},
												more_info: {
													type: 'string'
												}
											}
										},
										account_routings: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													address: {
														type: 'string'
													},
													scheme: {
														type: 'string'
													}
												}
											}
										},
										bank_routing: {
											type: 'object',
											properties: {
												address: {
													type: 'string'
												},
												scheme: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts'
				},
				{
					operation_id: 'OBPv3.1.0-getBankAccountsBalances',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getBankAccountsBalances'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/balances',
					summary: 'Get Accounts Balances',
					description: '<p>Get the Balances for the Accounts of the current User at one bank.</p>\n',
					description_markdown: 'Get the Balances for the Accounts of the current User at one bank.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
							label: 'My Account',
							bank_id: 'GENODEM1GLS',
							account_routings: [{
								scheme: 'accountNumber',
								address: '123456'
							}],
							balance: {
								currency: 'EUR',
								amount: '100'
							}
						}],
						overall_balance: {
							currency: 'EUR',
							amount: '100'
						},
						overall_balance_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Account',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							overall_balance_date: {
								type: 'string',
								format: 'date-time'
							},
							overall_balance: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										balance: {
											type: 'object',
											properties: {
												amount: {
													type: 'string'
												},
												currency: {
													type: 'string'
												}
											}
										},
										label: {
											type: 'string'
										},
										account_routings: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													address: {
														type: 'string'
													},
													scheme: {
														type: 'string'
													}
												}
											}
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/balances'
				},
				{
					operation_id: 'OBPv1.2.1-addCommentForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCommentForViewOnTransaction'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments',
					summary: 'Add comment.',
					description: '<p>Posts a comment about a transaction TRANSACTION_ID on a <a href="#1_2_1-getViewsForBankAccount">view</a> VIEW_ID.</p>\n<p>${authenticationRequiredMessage(false)}</p>\n<p>Authentication is required since the comment is linked with the user.</p>\n',
					description_markdown: 'Posts a comment about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\n${authenticationRequiredMessage(false)}\n\nAuthentication is required since the comment is linked with the user.',
					example_request_body: {
						value: 'String'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						value: 'OBP',
						date: '2017-09-19T00:00:00Z',
						user: {
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user: {
								type: 'object',
								properties: {
									display_name: {
										type: 'string'
									},
									provider: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							date: {
								type: 'string',
								format: 'date-time'
							},
							value: {
								type: 'string'
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments'
				},
				{
					operation_id: 'OBPv3.1.0-getProduct',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getProduct'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE',
					summary: 'Get Bank Product',
					description: '<p>Returns information about a financial Product offered by the bank specified by BANK_ID and PRODUCT_CODE including:</p>\n<ul>\n<li>Name</li>\n<li>Code</li>\n<li>Parent Product Code</li>\n<li>Category</li>\n<li>Family</li>\n<li>Super Family</li>\n<li>More info URL</li>\n<li>Description</li>\n<li>Terms and Conditions</li>\n<li>License the data under this endpoint is released under</li>\n</ul>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns information about a financial Product offered by the bank specified by BANK_ID and PRODUCT_CODE including:\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License the data under this endpoint is released under\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						code: 'product_code',
						parent_product_code: 'parent',
						name: 'product name',
						category: 'category',
						family: 'family',
						super_family: 'super family',
						more_info_url: 'www.example.com/prod1/more-info.html',
						details: 'Details',
						description: 'Description',
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						product_attributes: [{
							product_code: 'saving1',
							product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							name: 'OVERDRAFT_START_DATE',
							type: 'DATE_WITH_DAY',
							value: '2012-04-23'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30011: Product not found. Please specify a valid value for PRODUCT_CODE.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Product'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							super_family: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							},
							product_attributes: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										product_attribute_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										product_code: {
											type: 'string'
										}
									}
								}
							},
							description: {
								type: 'string'
							},
							details: {
								type: 'string'
							},
							code: {
								type: 'string'
							},
							parent_product_code: {
								type: 'string'
							},
							more_info_url: {
								type: 'string'
							},
							family: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							name: {
								type: 'string'
							},
							category: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE'
				},
				{
					operation_id: 'OBPv3.1.0-unlockUser',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'unlockUser'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/users/USERNAME/lock-status',
					summary: 'Unlock the user',
					description: '<p>Unlock a User.</p>\n<p>(Perhaps the user was locked due to multiple failed login attempts)</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\nUnlock a User.\n\n(Perhaps the user was locked due to multiple failed login attempts)\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						username: 'felixsmith',
						bad_attempts_since_last_success_or_reset: 0,
						last_failure_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20027: User not found by username.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							last_failure_date: {
								type: 'string',
								format: 'date-time'
							},
							bad_attempts_since_last_success_or_reset: {
								type: 'integer'
							},
							username: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanUnlockUser',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USERNAME/lock-status'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyPrivateAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyPrivateAlias'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					summary: 'Update Counterparty Private Alias',
					description: '<p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					example_request_body: {
						alias: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow updating the private alias',
						'Alias cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							alias: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyCorporateLocation',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyCorporateLocation'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
					summary: 'Delete Counterparty Corporate Location.',
					description: '<p>Delete corporate location of other bank account. Delete the geolocation of the counterparty\'s registered address</p>\n',
					description_markdown: 'Delete corporate location of other bank account. Delete the geolocation of the counterparty\'s registered address',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'Corporate Location cannot be deleted',
						'Delete not completed',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location'
				},
				{
					operation_id: 'OBPv2.0.0-addKycStatus',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'addKycStatus'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_statuses',
					summary: 'Add KYC Status',
					description: '<p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p>\n',
					description_markdown: 'Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer',
					example_request_body: {
						customer_number: '5987953',
						ok: true,
						date: '2017-09-19T00:00:00Z'
					},
					success_response_body: {
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						ok: true,
						date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-50000: Unknown Error.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-00004: Server error: could not add message',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							date: {
								type: 'string',
								format: 'date-time'
							},
							ok: {
								type: 'boolean'
							},
							customer_number: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							date: {
								type: 'string',
								format: 'date-time'
							},
							ok: {
								type: 'boolean'
							},
							customer_number: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_statuses'
				},
				{
					operation_id: 'OBPv1.2.1-updateWhereTagForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateWhereTagForViewOnTransaction'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					summary: 'Update where tag.',
					description: '<p>Updates the &quot;where&quot; Geo tag on a transaction TRANSACTION_ID in a <a href="#1_2_1-getViewsForBankAccount">view</a>.</p>\n<p>Authentication is Mandatory</p>\n<p>The geo tag is linked with the user.</p>\n',
					description_markdown: 'Updates the "where" Geo tag on a transaction TRANSACTION_ID in a [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe geo tag is linked with the user.',
					example_request_body: {
						where: {
							latitude: 1.532,
							longitude: 1.535
						}
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-30022: The current view does not have the permission: ',
						'Coordinates not possible',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							where: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where'
				},
				{
					operation_id: 'OBPv1.2.1-updateAccountLabel',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateAccountLabel'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
					summary: 'Update Account Label.',
					description: '<p>Update the label for the account. The label is how the account is known to the account owner e.g. \'My savings account\'</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the label for the account. The label is how the account is known to the account owner e.g. \'My savings account\'\n\n\nAuthentication is Mandatory\n\n       ',
					example_request_body: {
						id: '123123',
						label: 'label',
						bank_id: 'GENODEM1GLS'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'user does not have access to owner view on account'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							label: {
								type: 'string'
							},
							id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID'
				},
				{
					operation_id: 'OBPv1.2.1-getOtherAccountMetadata',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getOtherAccountMetadata'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata',
					summary: 'Get Other Account Metadata.',
					description: '<p>Get metadata of one other account.<br />\nReturns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p>\n<p>Authentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Get metadata of one other account.\nReturns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.\n\nAuthentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						public_alias: 'NONE',
						private_alias: 'NONE',
						more_info: 'www.openbankproject.com',
						URL: 'www.openbankproject.com',
						image_URL: 'www.openbankproject.com',
						open_corporates_URL: 'www.openbankproject.com',
						corporate_location: {
							latitude: 1.231,
							longitude: 1.231,
							date: '2017-09-19T00:00:00Z',
							user: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								provider: 'http://127.0.0.1:8080',
								display_name: 'OBP'
							}
						},
						physical_location: {
							latitude: 1.231,
							longitude: 1.231,
							date: '2017-09-19T00:00:00Z',
							user: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								provider: 'http://127.0.0.1:8080',
								display_name: 'OBP'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.',
						'the view does not allow metadata access'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							image_URL: {
								type: 'string'
							},
							URL: {
								type: 'string'
							},
							open_corporates_URL: {
								type: 'string'
							},
							physical_location: {
								type: 'object',
								properties: {
									user: {
										type: 'object',
										properties: {
											display_name: {
												type: 'string'
											},
											provider: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									},
									date: {
										type: 'string',
										format: 'date-time'
									},
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							public_alias: {
								type: 'string'
							},
							corporate_location: {
								type: 'object',
								properties: {
									user: {
										type: 'object',
										properties: {
											display_name: {
												type: 'string'
											},
											provider: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									},
									date: {
										type: 'string',
										format: 'date-time'
									},
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							private_alias: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerEmail',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerEmail'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/email',
					summary: 'Update the email of a Customer',
					description: '<p>Update an email of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update an email of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						email: 'marko@tesobe.com'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							email: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerEmail',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/email'
				},
				{
					operation_id: 'OBPv4.0.0-createTransactionRequestAccountOtp',
					implemented_by: {
						version: 'OBPv4.0.0',
						'function': 'createTransactionRequestAccountOtp'
					},
					request_verb: 'POST',
					request_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT_OTP/transaction-requests',
					summary: 'Create Transaction Request (ACCOUNT_OTP)',
					description: '<p>When using ACCOUNT, the payee is set in the request body.</p>\n<p>Money goes into the BANK_ID and ACCOUNT_ID specified in the request body.</p>\n<p>Initiate a Payment via creating a Transaction Request.</p>\n<p>In OBP, a <code>transaction request</code> may or may not result in a <code>transaction</code>. However, a <code>transaction</code> only has one possible state: completed.</p>\n<p>A <code>Transaction Request</code> can have one of several states.</p>\n<p><code>Transactions</code> are modeled on items in a bank statement that represent the movement of money.</p>\n<p><code>Transaction Requests</code> are requests to move money which may or may not succeeed and thus result in a <code>Transaction</code>.</p>\n<p>A <code>Transaction Request</code> might create a security challenge that needs to be answered before the <code>Transaction Request</code> proceeds.</p>\n<p>Transaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).</p>\n<p>Transaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.<br />\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.</p>\n<p>The payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.</p>\n<p>In sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.</p>\n<p>In sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.</p>\n<p>If a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.</p>\n<p>You can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.</p>\n<p>The following static FX rates are available in sandbox mode:</p>\n<p><a href="http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate">http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate</a></p>\n<p>Transaction Requests satisfy PSD2 requirements thus:</p>\n<p>1) A transaction can be initiated by a third party application.</p>\n<p>2) The customer is informed of the charge that will incurred.</p>\n<p>3) The call supports delegated authentication (OAuth)</p>\n<p>See <a href="https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py">this python code</a> for a complete example of this flow.</p>\n<p>There is further documentation <a href="https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests">here</a></p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'When using ACCOUNT, the payee is set in the request body.\n\nMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					example_request_body: {
						to: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						value: {
							currency: 'EUR',
							amount: '10'
						},
						description: 'this is for work'
					},
					success_response_body: {
						id: '4050046c-63b3-4868-8a22-14b4181d33a6',
						type: 'SANDBOX_TAN',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						details: {
							to_sandbox_tan: {
								bank_id: 'String',
								account_id: 'String'
							},
							to_sepa: {
								iban: 'String'
							},
							to_counterparty: {
								counterparty_id: 'String'
							},
							to_transfer_to_phone: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									mobile_phone_number: '+44 07972 444 876'
								}
							},
							to_transfer_to_atm: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									legal_name: 'Eveline Tripman',
									date_of_birth: '20181230',
									mobile_phone_number: '+44 07972 444 876',
									kyc_document: {
										type: 'String',
										number: 'String'
									}
								}
							},
							to_transfer_to_account: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								transfer_type: 'String',
								future_date: '20181230',
								to: {
									name: 'String',
									bank_code: 'String',
									branch_number: 'String',
									account: {
										number: 'String',
										iban: 'String'
									}
								}
							},
							to_sepa_credit_transfers: {
								debtorAccount: {
									iban: '12345'
								},
								instructedAmount: {
									currency: 'EUR',
									amount: '10'
								},
								creditorAccount: {
									iban: '54321'
								},
								creditorName: 'John Miles'
							},
							value: {
								currency: 'EUR',
								amount: '100'
							},
							description: 'String'
						},
						transaction_ids: [
							'902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
						],
						status: 'COMPLETED',
						start_date: '2017-09-19T00:00:00Z',
						end_date: '2017-09-19T00:00:00Z',
						challenge: {
							id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
							allowed_attempts: 3,
							challenge_type: 'SANDBOX_TAN'
						},
						charge: {
							summary: 'Rent the flat',
							value: {
								currency: 'EUR',
								amount: '10'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-40002: Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-40001: Invalid value for TRANSACTION_REQUEST_TYPE',
						'OBP-10001: Incorrect json format.',
						'OBP-10002: Invalid Number. Could not convert value to a number.',
						'OBP-40008: Can\'t send a payment with a value of 0 or less.',
						'OBP-40003: Transaction Request Currency must be the same as From Account Currency.',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							description: {
								type: 'string'
							},
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							to: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							challenge: {
								type: 'object',
								properties: {
									challenge_type: {
										type: 'string'
									},
									allowed_attempts: {
										type: 'integer'
									},
									id: {
										type: 'string'
									}
								}
							},
							status: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									summary: {
										type: 'string'
									}
								}
							},
							details: {
								type: 'object',
								properties: {
									to_sandbox_tan: {
										type: 'object',
										properties: {
											account_id: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											}
										}
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									to_sepa: {
										type: 'object',
										properties: {
											iban: {
												type: 'string'
											}
										}
									},
									description: {
										type: 'string'
									},
									to_transfer_to_atm: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													kyc_document: {
														type: 'object',
														properties: {
															number: {
																type: 'string'
															},
															type: {
																type: 'string'
															}
														}
													},
													mobile_phone_number: {
														type: 'string'
													},
													date_of_birth: {
														type: 'string'
													},
													legal_name: {
														type: 'string'
													}
												}
											}
										}
									},
									to_sepa_credit_transfers: {
										type: 'object',
										properties: {
											creditorName: {
												type: 'string'
											},
											creditorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											},
											instructedAmount: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											debtorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											}
										}
									},
									to_counterparty: {
										type: 'object',
										properties: {
											counterparty_id: {
												type: 'string'
											}
										}
									},
									to_transfer_to_phone: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													mobile_phone_number: {
														type: 'string'
													}
												}
											}
										}
									},
									to_transfer_to_account: {
										type: 'object',
										properties: {
											to: {
												type: 'object',
												properties: {
													account: {
														type: 'object',
														properties: {
															iban: {
																type: 'string'
															},
															number: {
																type: 'string'
															}
														}
													},
													branch_number: {
														type: 'string'
													},
													bank_code: {
														type: 'string'
													},
													name: {
														type: 'string'
													}
												}
											},
											transfer_type: {
												type: 'string'
											},
											description: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											future_date: {
												type: 'string'
											}
										}
									}
								}
							},
							end_date: {
								type: 'string',
								format: 'date-time'
							},
							start_date: {
								type: 'string',
								format: 'date-time'
							},
							transaction_ids: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT_OTP/transaction-requests'
				},
				{
					operation_id: 'OBPv3.1.0-getConsents',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getConsents'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents',
					summary: 'Get Consents',
					description: '<p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p>\n<p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p>\n<p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p>\n<p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.</p>\n<p>This endpoint gets the Consents that the current User created.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\n\nThis endpoint gets the Consents that the current User created.\n\nAuthentication is Mandatory\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						consents: [{
							consent_id: '9d429899-24f5-42c8-8565-943ffa6a7945',
							jwt: 'eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4',
							status: 'INITIATED'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: false,
					tags: [
						'Consent',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							consents: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										status: {
											type: 'string'
										},
										jwt: {
											type: 'string'
										},
										consent_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents'
				},
				{
					operation_id: 'OBPv2.0.0-getKycMedia',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getKycMedia'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/customers/CUSTOMER_ID/kyc_media',
					summary: 'Get KYC Media for a customer',
					description: '<p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get KYC media (scans, pictures, videos) that affirms the identity of the customer.\n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						medias: [{
							bank_id: 'GENODEM1GLS',
							customer_id: 'PlaceholderString',
							id: 'PlaceholderString',
							customer_number: '5987953',
							type: 'PlaceholderString',
							url: 'PlaceholderString',
							date: '2017-09-19T00:00:00Z',
							relates_to_kyc_document_id: 'PlaceholderString',
							relates_to_kyc_check_id: 'PlaceholderString'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							medias: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										date: {
											type: 'string',
											format: 'date-time'
										},
										customer_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										customer_number: {
											type: 'string'
										},
										relates_to_kyc_document_id: {
											type: 'string'
										},
										id: {
											type: 'string'
										},
										relates_to_kyc_check_id: {
											type: 'string'
										},
										url: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_media'
				},
				{
					operation_id: 'OBPv1.2.1-deleteWhereTagForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteWhereTagForViewOnTransaction'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					summary: 'Delete where tag.',
					description: '<p>Deletes the where tag of the transaction TRANSACTION_ID made on <a href="#1_2_1-getViewsForBankAccount">view</a>.</p>\n<p>Authentication is Mandatory</p>\n<p>The user must either have owner privileges for this account, or must be the user that posted the geo tag.</p>\n',
					description_markdown: 'Deletes the where tag of the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe user must either have owner privileges for this account, or must be the user that posted the geo tag.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'there is no tag to delete',
						'Delete not completed',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyMoreInfo',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyMoreInfo'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
					summary: 'Add Counterparty More Info',
					description: '<p>Add a description of the counter party from the perpestive of the account e.g. My dentist.</p>\n',
					description_markdown: 'Add a description of the counter party from the perpestive of the account e.g. My dentist.',
					example_request_body: {
						more_info: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-30022: The current view does not have the permission: ',
						'the view ownerdoes not allow adding more info',
						'More Info cannot be added',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							more_info: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyPublicAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyPublicAlias'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					summary: 'Delete Counterparty Public Alias',
					description: '<p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Deletes the public alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow deleting the public alias',
						'Alias cannot be deleted',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyPhysicalLocation',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyPhysicalLocation'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
					summary: 'Update Counterparty Physical Location',
					description: '<p>Update geocoordinates of the counterparty\'s main location</p>\n',
					description_markdown: 'Update geocoordinates of the counterparty\'s main location',
					example_request_body: {
						physical_location: {
							latitude: 1.532,
							longitude: 1.535
						}
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow updating a physical location',
						'Coordinates not possible',
						'Physical Location cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							physical_location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location'
				},
				{
					operation_id: 'OBPv3.1.0-createUserAuthContextUpdate',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createUserAuthContextUpdate'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/current/auth-context-updates/SCA_METHOD',
					summary: 'Create User Auth Context Update',
					description: '<p>Create User Auth Context Update.<br />\nAuthentication is Mandatory</p>\n<p>A One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD<br />\nSCA_METHOD is typically &quot;SMS&quot; or &quot;EMAIL&quot;. &quot;EMAIL&quot; is used for testing purposes.</p>\n',
					description_markdown: 'Create User Auth Context Update.\nAuthentication is Mandatory\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\n',
					example_request_body: {
						key: 'CUSTOMER_NUMBER',
						value: '78987432'
					},
					success_response_body: {
						user_auth_context_update_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						key: 'CUSTOMER_NUMBER',
						value: '78987432',
						status: 'INITIATED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30053: Could not insert the UserAuthContext',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							key: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user_auth_context_update_id: {
								type: 'string',
								format: 'date-time'
							},
							key: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							value: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateUserAuthContextUpdate',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/current/auth-context-updates/SCA_METHOD'
				},
				{
					operation_id: 'OBPv2.0.0-createUserCustomerLinks',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'createUserCustomerLinks'
					},
					request_verb: 'POST',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/user_customer_links',
					summary: 'Create User Customer Link.',
					description: '<p>Link a User to a Customer</p>\n<p>Authentication is Mandatory</p>\n<p>CanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.</p>\n',
					description_markdown: 'Link a User to a Customer\n\nAuthentication is Mandatory\n\nCanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.\n',
					example_request_body: {
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
					},
					success_response_body: {
						user_customer_link_id: 'String',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						date_inserted: '2017-09-19T00:00:00Z',
						is_active: true
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-30007: The User is already linked to a Customer at the bank specified by BANK_ID',
						'OBP-30025: Could not create user_customer_links ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'User'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							customer_id: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user_customer_link_id: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							is_active: {
								type: 'boolean'
							},
							date_inserted: {
								type: 'string',
								format: 'date-time'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					roles: [{
							role: 'CanCreateUserCustomerLink',
							requires_bank_id: true
						},
						{
							role: 'CanCreateUserCustomerLinkAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/user_customer_links'
				},
				{
					operation_id: 'OBPv1.2.1-getOtherAccountForTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getOtherAccountForTransaction'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/other_account',
					summary: 'Get Other Account of Transaction',
					description: '<p>Get other account of a transaction.<br />\nReturns details of the other party involved in the transaction, moderated by the <a href="#1_2_1-getViewsForBankAccount">view</a> (VIEW_ID).<br />\nAuthentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Get other account of a transaction.\nReturns details of the other party involved in the transaction, moderated by the [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n          Authentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						holder: {
							name: 'OBP',
							is_alias: true
						},
						number: '123',
						kind: '3456',
						IBAN: 'UK234DB',
						swift_bic: 'UK12321DB',
						bank: {
							national_identifier: 'OBP',
							name: 'OBP'
						},
						metadata: {
							public_alias: 'NONE',
							private_alias: 'NONE',
							more_info: 'www.openbankproject.com',
							URL: 'www.openbankproject.com',
							image_URL: 'www.openbankproject.com',
							open_corporates_URL: 'www.openbankproject.com',
							corporate_location: {
								latitude: 1.231,
								longitude: 1.231,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							},
							physical_location: {
								latitude: 1.231,
								longitude: 1.231,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							}
						}
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							IBAN: {
								type: 'string'
							},
							swift_bic: {
								type: 'string'
							},
							number: {
								type: 'string'
							},
							holder: {
								type: 'object',
								properties: {
									is_alias: {
										type: 'boolean'
									},
									name: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							},
							bank: {
								type: 'object',
								properties: {
									name: {
										type: 'string'
									},
									national_identifier: {
										type: 'string'
									}
								}
							},
							metadata: {
								type: 'object',
								properties: {
									image_URL: {
										type: 'string'
									},
									URL: {
										type: 'string'
									},
									open_corporates_URL: {
										type: 'string'
									},
									physical_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													display_name: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									public_alias: {
										type: 'string'
									},
									corporate_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													display_name: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									private_alias: {
										type: 'string'
									},
									more_info: {
										type: 'string'
									}
								}
							},
							kind: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/other_account'
				},
				{
					operation_id: 'OBPv3.1.0-createProductCollection',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createProductCollection'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE',
					summary: 'Create Product Collection',
					description: '<p>Create or Update a Product Collection at the Bank.</p>\n<p>Use Product Collections to create Product &quot;Baskets&quot;, &quot;Portfolios&quot;, &quot;Indices&quot;, &quot;Collections&quot;, &quot;Underlyings-lists&quot;, &quot;Buckets&quot; etc. etc.</p>\n<p>There is a many to many relationship between Products and Product Collections:</p>\n<ul>\n<li>\n<p>A Product can exist in many Collections</p>\n</li>\n<li>\n<p>A Collection can contain many Products.</p>\n</li>\n</ul>\n<p>A collection has collection code, one parent Product and one or more child Products.</p>\n<p>Product hiearchy vs Product Collections:</p>\n<ul>\n<li>\n<p>You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.</p>\n</li>\n<li>\n<p>You can define a collection (also known as baskets or buckets) of products using Product Collections.</p>\n</li>\n</ul>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create or Update a Product Collection at the Bank.\n\nUse Product Collections to create Product "Baskets", "Portfolios", "Indices", "Collections", "Underlyings-lists", "Buckets" etc. etc.\n\nThere is a many to many relationship between Products and Product Collections:\n\n* A Product can exist in many Collections\n\n* A Collection can contain many Products.\n\nA collection has collection code, one parent Product and one or more child Products.\n\n\n\n\nProduct hiearchy vs Product Collections:\n\n* You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.\n\n* You can define a collection (also known as baskets or buckets) of products using Product Collections.\n\n      \n\nAuthentication is Mandatory\n\n\n',
					example_request_body: {
						parent_product_code: 'A',
						children_product_codes: [
							'B',
							'C',
							'D'
						]
					},
					success_response_body: {
						product_collection: [{
							collection_code: 'C',
							product_code: 'D',
							items: [{
									member_product_code: 'A'
								},
								{
									member_product_code: 'B'
								}
							]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Product-Collection',
						'Product'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							children_product_codes: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							parent_product_code: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							product_collection: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										items: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													member_product_code: {
														type: 'string'
													}
												}
											}
										},
										product_code: {
											type: 'string'
										},
										collection_code: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanMaintainProductCollection',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE'
				},
				{
					operation_id: 'OBPv3.0.0-getEntitlementsForCurrentUser',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getEntitlementsForCurrentUser'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/my/entitlements',
					summary: 'Get Entitlements for the current User.',
					description: '<p>Get Entitlements for the current User.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get Entitlements for the current User.\n\n\nAuthentication is Mandatory\n\n        ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						list: [{
							entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
							role_name: 'CanQueryOtherUser',
							bank_id: 'GENODEM1GLS'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20050: Current User is not a Super Admin!',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							list: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										role_name: {
											type: 'string'
										},
										entitlement_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/my/entitlements'
				},
				{
					operation_id: 'OBPv2.0.0-getSocialMediaHandles',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getSocialMediaHandles'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles',
					summary: 'Get Customer Social Media Handles',
					description: '<p>Get social media handles for a customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get social media handles for a customer specified by CUSTOMER_ID.\n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						checks: [{
							customer_number: '5987953',
							type: 'PlaceholderString',
							handle: 'PlaceholderString',
							date_added: '2017-09-19T00:00:00Z',
							date_activated: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							checks: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										type: {
											type: 'string'
										},
										customer_number: {
											type: 'string'
										},
										date_activated: {
											type: 'string',
											format: 'date-time'
										},
										handle: {
											type: 'string'
										},
										date_added: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanGetSocialMediaHandles',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles'
				},
				{
					operation_id: 'OBPv1.2.1-addImageForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addImageForViewOnTransaction'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images',
					summary: 'Add an image.',
					description: '<p>Posts an image about a transaction TRANSACTION_ID on a <a href="#1_2_1-getViewsForBankAccount">view</a> VIEW_ID.</p>\n<p>Authentication is Mandatory</p>\n<p>The image is linked with the user.</p>\n',
					description_markdown: 'Posts an image about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\nAuthentication is Mandatory\n\nThe image is linked with the user.',
					example_request_body: {
						label: 'String',
						URL: 'String'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						label: 'NONE',
						URL: 'www.openbankproject.com',
						date: '2017-09-19T00:00:00Z',
						user: {
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-10017: Incorrect URL Format. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							URL: {
								type: 'string'
							},
							label: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							date: {
								type: 'string',
								format: 'date-time'
							},
							URL: {
								type: 'string'
							},
							id: {
								type: 'string'
							},
							user: {
								type: 'object',
								properties: {
									display_name: {
										type: 'string'
									},
									provider: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							label: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images'
				},
				{
					operation_id: 'OBPv1.2.1-getWhereTagForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getWhereTagForViewOnTransaction'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					summary: 'Get where tag.',
					description: '<p>Returns the &quot;where&quot; Geo tag added to the transaction TRANSACTION_ID made on a <a href="#1_2_1-getViewsForBankAccount">view</a> (VIEW_ID).<br />\nIt represents the location where the transaction has been initiated.</p>\n<p>Authentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Returns the "where" Geo tag added to the transaction TRANSACTION_ID made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\nIt represents the location where the transaction has been initiated.\n\nAuthentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						where: {
							latitude: 1.231,
							longitude: 1.231,
							date: '2017-09-19T00:00:00Z',
							user: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								provider: 'http://127.0.0.1:8080',
								display_name: 'OBP'
							}
						}
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							where: {
								type: 'object',
								properties: {
									user: {
										type: 'object',
										properties: {
											display_name: {
												type: 'string'
											},
											provider: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									},
									date: {
										type: 'string',
										format: 'date-time'
									},
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where'
				},
				{
					operation_id: 'OBPv2.0.0-getKycDocuments',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getKycDocuments'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/customers/CUSTOMER_ID/kyc_documents',
					summary: 'Get Customer KYC Documents',
					description: '<p>Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID<br />\nGet a list of documents that affirm the identity of the customer<br />\nPassport, driving licence etc.<br />\nAuthentication is Optional</p>\n',
					description_markdown: 'Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID\nGet a list of documents that affirm the identity of the customer\nPassport, driving licence etc.\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						documents: [{
							bank_id: 'GENODEM1GLS',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							id: 'PlaceholderString',
							customer_number: '5987953',
							type: 'PlaceholderString',
							number: 'PlaceholderString',
							issue_date: '2017-09-19T00:00:00Z',
							issue_place: 'PlaceholderString',
							expiry_date: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							documents: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										issue_place: {
											type: 'string'
										},
										customer_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										number: {
											type: 'string'
										},
										customer_number: {
											type: 'string'
										},
										expiry_date: {
											type: 'string',
											format: 'date-time'
										},
										id: {
											type: 'string'
										},
										issue_date: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_documents'
				},
				{
					operation_id: 'OBPv3.0.0-privateAccountsAtOneBank',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'privateAccountsAtOneBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private',
					summary: 'Get Accounts at Bank (Minimal).',
					description: '<p>Returns the minimal list of private accounts at BANK_ID that the user has access to.<br />\nFor each account, the API returns the ID, routing addresses and the views available to the current user.</p>\n<p>If you want to see more information on the Views, use the Account Detail call.</p>\n<p>optional request parameters:</p>\n<ul>\n<li>account_type_filter: one or many accountType value, split by comma</li>\n<li>account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE</li>\n</ul>\n<p>whole url example:<br />\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private?account_type_filter=330,CURRENT+PLUS&amp;account_type_filter_operation=INCLUDE</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Returns the minimal list of private accounts at BANK_ID that the user has access to.\nFor each account, the API returns the ID, routing addresses and the views available to the current user.\n\nIf you want to see more information on the Views, use the Account Detail call.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							label: 'String',
							bank_id: 'GENODEM1GLS',
							account_type: '330',
							account_routings: [{
								scheme: 'AccountNumber',
								address: '4930396'
							}],
							views: [{
								id: 'owner',
								short_name: 'Owner',
								description: 'This view is for the owner for the account.',
								is_public: false
							}]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Account',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										views: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													is_public: {
														type: 'boolean'
													},
													description: {
														type: 'string'
													},
													short_name: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											}
										},
										account_type: {
											type: 'string'
										},
										id: {
											type: 'string'
										},
										label: {
											type: 'string'
										},
										account_routings: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													address: {
														type: 'string'
													},
													scheme: {
														type: 'string'
													}
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private'
				},
				{
					operation_id: 'OBPv3.1.0-createAccountApplication',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createAccountApplication'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications',
					summary: 'Create Account Application',
					description: '<p>Create Account Application</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Create Account Application\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						product_code: 'saveing1',
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
					},
					success_response_body: {
						account_application_id: 'gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763',
						product_code: 'saveing1',
						user: {
							user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							email: 'eveline@example.com',
							provider_id: 'Chris',
							provider: 'http://127.0.0.1:8080',
							username: 'felixsmith'
						},
						customer: {
							bank_id: 'GENODEM1GLS',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							customer_number: '5987953',
							legal_name: 'Eveline Tripman',
							mobile_phone_number: '+44 07972 444 876',
							email: 'eveline@example.com',
							face_image: {
								url: 'www.openbankproject',
								date: '2017-09-19T00:00:00Z'
							},
							date_of_birth: '2017-09-19T00:00:00Z',
							relationship_status: 'single',
							dependants: 10,
							dob_of_dependants: [
								'2017-09-19T00:00:00Z'
							],
							credit_rating: {
								rating: 'OBP',
								source: 'OBP'
							},
							credit_limit: {
								currency: 'EUR',
								amount: '10'
							},
							highest_education_attained: 'Master',
							employment_status: 'worker',
							kyc_status: true,
							last_ok_date: '2017-09-19T00:00:00Z',
							title: 'Dr.',
							branchId: 'DERBY6',
							nameSuffix: 'Sr'
						},
						date_of_application: '2017-09-19T00:00:00Z',
						status: 'REQUESTED'
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Application',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							customer_id: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							},
							product_code: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							product_code: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							user: {
								type: 'object',
								properties: {
									provider: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									provider_id: {
										type: 'string'
									},
									username: {
										type: 'string'
									},
									user_id: {
										type: 'string'
									}
								}
							},
							customer: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									nameSuffix: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									employment_status: {
										type: 'string'
									},
									last_ok_date: {
										type: 'string',
										format: 'date-time'
									},
									customer_id: {
										type: 'string'
									},
									relationship_status: {
										type: 'string'
									},
									date_of_birth: {
										type: 'string',
										format: 'date-time'
									},
									dob_of_dependants: {
										type: 'array',
										items: {
											type: 'string',
											format: 'date-time'
										}
									},
									highest_education_attained: {
										type: 'string'
									},
									customer_number: {
										type: 'string'
									},
									credit_rating: {
										type: 'object',
										properties: {
											source: {
												type: 'string'
											},
											rating: {
												type: 'string'
											}
										}
									},
									credit_limit: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									branchId: {
										type: 'string'
									},
									face_image: {
										type: 'object',
										properties: {
											date: {
												type: 'string',
												format: 'date-time'
											},
											url: {
												type: 'string'
											}
										}
									},
									dependants: {
										type: 'integer'
									},
									legal_name: {
										type: 'string'
									},
									title: {
										type: 'string'
									},
									mobile_phone_number: {
										type: 'string'
									},
									kyc_status: {
										type: 'boolean'
									}
								}
							},
							account_application_id: {
								type: 'string'
							},
							date_of_application: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerCreditLimit',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerCreditLimit'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-limit',
					summary: 'Update the credit limit of a Customer',
					description: '<p>Update the credit limit of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the credit limit of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						credit_limit: {
							currency: 'EUR',
							amount: '1000'
						}
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerCreditLimit',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-limit'
				},
				{
					operation_id: 'OBPv2.0.0-publicAccountsAtOneBank',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'publicAccountsAtOneBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/public',
					summary: 'Get Public Accounts at Bank',
					description: '<p>Returns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.</p>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.\n\nAuthentication is Optional\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0',
							label: 'NoneLabel',
							bank_id: 'GENODEM1GLS',
							views_available: [{
								id: '1',
								short_name: 'HHH',
								is_public: true
							}]
						}]
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Public',
						'Account',
						'PublicData',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										views_available: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													is_public: {
														type: 'boolean'
													},
													short_name: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											}
										},
										bank_id: {
											type: 'string'
										},
										label: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/public'
				},
				{
					operation_id: 'OBPv3.1.0-updateProductAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateProductAttribute'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
					summary: 'Update Product Attribute',
					description: '<p>Update Product Attribute.</p>\n<p>Product Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Product Attribute is linked to its Product by PRODUCT_CODE</p>\n<p>Update one Product Attribute by its id.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Update Product Attribute. \n\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nUpdate one Product Attribute by its id.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					success_response_body: {
						product_code: 'saving1',
						product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					error_response_bodies: [
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Product',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							product_attribute_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							product_code: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID'
				},
				{
					operation_id: 'OBPv3.1.0-deleteCustomerAddress',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteCustomerAddress'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID',
					summary: 'Delete Customer Address',
					description: '<p>Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'KYC',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanDeleteCustomerAddress',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyImageUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyImageUrl'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
					summary: 'Add image url to other bank account.',
					description: '<p>Add a url that points to the logo of the counterparty</p>\n',
					description_markdown: 'Add a url that points to the logo of the counterparty',
					example_request_body: {
						image_URL: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow adding an image url',
						'URL cannot be added',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							image_URL: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url'
				},
				{
					operation_id: 'OBPv2.1.0-createTransactionType',
					implemented_by: {
						version: 'OBPv2.1.0',
						'function': 'createTransactionType'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types',
					summary: 'Create Transaction Type at bank',
					description: '<p>Create Transaction Types for the bank specified by BANK_ID:</p>\n<ul>\n<li>id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.</li>\n<li>bank_id : The bank that supports this TransactionType</li>\n<li>short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here</li>\n<li>summary : A succinct summary</li>\n<li>description : A longer description</li>\n<li>charge : The charge to the customer for each one of these</li>\n</ul>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create Transaction Types for the bank specified by BANK_ID:\n\n  * id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\n  * bank_id : The bank that supports this TransactionType\n  * short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\n  * summary : A succinct summary\n  * description : A longer description\n  * charge : The charge to the customer for each one of these\n\nAuthentication is Mandatory',
					example_request_body: {
						id: {
							value: '123'
						},
						bank_id: 'GENODEM1GLS',
						short_code: 'PlaceholderString',
						summary: 'PlaceholderString',
						description: 'PlaceholderString',
						charge: {
							currency: 'EUR',
							amount: '10'
						}
					},
					success_response_body: {
						id: {
							value: '123'
						},
						bankId: {
							value: 'gh.uk.9j'
						},
						shortCode: '80080',
						summary: 'SANDBOX_TAN',
						description: 'This is the sandbox mode, charging litter money.',
						charge: {
							currency: 'EUR',
							amount: '100'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-40005: Insufficient authorisation to Create Transaction Type offered by the bank. The Request could not be created because you don\'t have access to CanCreateTransactionType.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Bank'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							description: {
								type: 'string'
							},
							short_code: {
								type: 'string'
							},
							summary: {
								type: 'string'
							},
							id: {
								type: 'object',
								properties: {
									value: {
										type: 'string'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bankId: {
								type: 'object',
								properties: {
									value: {
										type: 'string'
									}
								}
							},
							charge: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							summary: {
								type: 'string'
							},
							shortCode: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							id: {
								type: 'object',
								properties: {
									value: {
										type: 'string'
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanCreateTransactionType',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types'
				},
				{
					operation_id: 'OBPv3.1.0-deleteBranch',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteBranch'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
					summary: 'Delete Branch',
					description: '<p>Delete Branch from given Bank.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Delete Branch from given Bank.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30218: Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Branch'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					roles: [{
							role: 'CanDeleteBranch',
							requires_bank_id: true
						},
						{
							role: 'CanDeleteBranchAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID'
				},
				{
					operation_id: 'OBPv3.1.0-enableDisableAccountWebhook',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'enableDisableAccountWebhook'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
					summary: 'Enable/Disable an Account Webhook',
					description: '<p>Enable/Disable an Account Webhook</p>\n<p>Webhooks are used to call external URLs when certain events happen.</p>\n<p>Account Webhooks focus on events around accounts.</p>\n<p>For instance, a webhook could be used to notify an external service if a balance changes on an account.</p>\n<p>This functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange</p>\n',
					description_markdown: 'Enable/Disable an Account Webhook\n\n\nWebhooks are used to call external URLs when certain events happen.\n\nAccount Webhooks focus on events around accounts.\n\nFor instance, a webhook could be used to notify an external service if a balance changes on an account.\n\nThis functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange\n',
					example_request_body: {
						account_webhook_id: 'fc23a7e2-7dd2-4bdf-a0b4-ae31232a4762',
						is_active: 'true'
					},
					success_response_body: {
						account_webhook_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						bank_id: 'GENODEM1GLS',
						account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						trigger_name: 'OnBalanceChange',
						url: 'https://localhost.openbankproject.com',
						http_method: 'POST',
						http_protocol: 'HTTP/1.1',
						created_by_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						is_active: true
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Webhook',
						'Bank',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							is_active: {
								type: 'string'
							},
							account_webhook_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							created_by_user_id: {
								type: 'string'
							},
							http_method: {
								type: 'string'
							},
							is_active: {
								type: 'boolean'
							},
							http_protocol: {
								type: 'string'
							},
							account_webhook_id: {
								type: 'string'
							},
							trigger_name: {
								type: 'string'
							},
							account_id: {
								type: 'string'
							},
							url: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanUpdateWebhook',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks'
				},
				{
					operation_id: 'OBPv2.1.0-getTransactionRequestTypesSupportedByBank',
					implemented_by: {
						version: 'OBPv2.1.0',
						'function': 'getTransactionRequestTypesSupportedByBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-request-types',
					summary: 'Get supported Transaction Request Types',
					description: '<p>Get the list of the Transaction Request Types supported by the bank.</p>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Get the list of the Transaction Request Types supported by the bank.\n\nAuthentication is Optional\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						transaction_request_types: [{
							transaction_request_type: 'SandboxTan'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Request',
						'Bank'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							transaction_request_types: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										transaction_request_type: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-request-types'
				},
				{
					operation_id: 'OBPv3.1.0-deleteCardForBank',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteCardForBank'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
					summary: 'Delete Card',
					description: '<p>Delete a Card at bank specified by CARD_ID .</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Delete a Card at bank specified by CARD_ID .\n\nAuthentication is Mandatory\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10015: Allowed values are: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateCardsForBank',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID'
				},
				{
					operation_id: 'OBPv3.1.0-createProduct',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createProduct'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE',
					summary: 'Create Product',
					description: '<p>Create or Update Product for the Bank.</p>\n<p>Typical Super Family values / Asset classes are:</p>\n<p>Debt<br />\nEquity<br />\nFX<br />\nCommodity<br />\nDerivative</p>\n<p>Product hiearchy vs Product Collections:</p>\n<ul>\n<li>\n<p>You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.</p>\n</li>\n<li>\n<p>You can define a collection (also known as baskets or buckets) of products using Product Collections.</p>\n</li>\n</ul>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create or Update Product for the Bank.\n\n\nTypical Super Family values / Asset classes are:\n\nDebt\nEquity\nFX\nCommodity\nDerivative\n\n\n\nProduct hiearchy vs Product Collections:\n\n* You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.\n\n* You can define a collection (also known as baskets or buckets) of products using Product Collections.\n\n      \n\n\nAuthentication is Mandatory\n\n\n',
					example_request_body: {
						bank_id: 'GENODEM1GLS',
						name: 'product name',
						parent_product_code: 'parent product name',
						category: 'category',
						family: 'family',
						super_family: 'super family',
						more_info_url: 'www.example.com/prod1/more-info.html',
						details: 'Details',
						description: 'Description',
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						}
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						code: 'product_code',
						parent_product_code: 'parent',
						name: 'product name',
						category: 'category',
						family: 'family',
						super_family: 'super family',
						more_info_url: 'www.example.com/prod1/more-info.html',
						details: 'Details',
						description: 'Description',
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						product_attributes: [{
							product_code: 'saving1',
							product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							name: 'OVERDRAFT_START_DATE',
							type: 'DATE_WITH_DAY',
							value: '2012-04-23'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Product'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							super_family: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							details: {
								type: 'string'
							},
							more_info_url: {
								type: 'string'
							},
							family: {
								type: 'string'
							},
							parent_product_code: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							name: {
								type: 'string'
							},
							category: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							super_family: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							},
							product_attributes: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										product_attribute_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										product_code: {
											type: 'string'
										}
									}
								}
							},
							description: {
								type: 'string'
							},
							details: {
								type: 'string'
							},
							code: {
								type: 'string'
							},
							parent_product_code: {
								type: 'string'
							},
							more_info_url: {
								type: 'string'
							},
							family: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							name: {
								type: 'string'
							},
							category: {
								type: 'string'
							}
						}
					},
					roles: [{
							role: 'CanCreateProduct',
							requires_bank_id: true
						},
						{
							role: 'CanCreateProductAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE'
				},
				{
					operation_id: 'OBPv3.1.0-getProductAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getProductAttribute'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
					summary: 'Get Product Attribute',
					description: '<p>Get Product Attribute</p>\n<p>Product Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Product Attribute is linked to its Product by PRODUCT_CODE</p>\n<p>Get one product attribute by its id.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Get Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nGet one product attribute by its id.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						product_code: 'saving1',
						product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					error_response_bodies: [
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Product',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							product_attribute_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							product_code: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID'
				},
				{
					operation_id: 'OBPv2.2.0-createFx',
					implemented_by: {
						version: 'OBPv2.2.0',
						'function': 'createFx'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.2.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx',
					summary: 'Create Fx',
					description: '<p>Create or Update Fx for the Bank.</p>\n<p>Example:</p>\n<p>“from_currency_code”:“EUR”,<br />\n“to_currency_code”:“USD”,<br />\n“conversion_value”: 1.136305,<br />\n“inverse_conversion_value”: 1 / 1.136305 = 0.8800454103431737,</p>\n<p>Thus 1 Euro = 1.136305 US Dollar<br />\nand<br />\n1 US Dollar = 0.8800 Euro</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create or Update Fx for the Bank.\n\nExample:\n\n“from_currency_code”:“EUR”,\n“to_currency_code”:“USD”,\n“conversion_value”: 1.136305,\n“inverse_conversion_value”: 1 / 1.136305 = 0.8800454103431737,\n\n Thus 1 Euro = 1.136305 US Dollar\n and\n 1 US Dollar = 0.8800 Euro\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						bank_id: 'GENODEM1GLS',
						from_currency_code: 'EUR',
						to_currency_code: 'USD',
						conversion_value: 1.136305,
						inverse_conversion_value: 0.8800454103431737,
						effective_date: '2017-09-19T00:00:00Z'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						from_currency_code: 'EUR',
						to_currency_code: 'USD',
						conversion_value: 1.136305,
						inverse_conversion_value: 0.8800454103431737,
						effective_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'FX'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							conversion_value: {
								type: 'number'
							},
							from_currency_code: {
								type: 'string'
							},
							effective_date: {
								type: 'string',
								format: 'date-time'
							},
							inverse_conversion_value: {
								type: 'number'
							},
							to_currency_code: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							conversion_value: {
								type: 'number'
							},
							from_currency_code: {
								type: 'string'
							},
							effective_date: {
								type: 'string',
								format: 'date-time'
							},
							inverse_conversion_value: {
								type: 'number'
							},
							to_currency_code: {
								type: 'string'
							}
						}
					},
					roles: [{
							role: 'CanCreateFxRate',
							requires_bank_id: true
						},
						{
							role: 'CanCreateFxRateAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCommentForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCommentForViewOnTransaction'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments/COMMENT_ID',
					summary: 'Delete comment.',
					description: '<p>Delete the comment COMMENT_ID about the transaction TRANSACTION_ID made on <a href="#1_2_1-getViewsForBankAccount">view</a>.</p>\n<p>Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.</p>\n',
					description_markdown: 'Delete the comment COMMENT_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments/COMMENT_ID'
				},
				{
					operation_id: 'OBPv2.0.0-deleteEntitlement',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'deleteEntitlement'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v2.0.0/users/USER_ID/entitlement/ENTITLEMENT_ID',
					summary: 'Delete Entitlement',
					description: '<p>Delete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID</p>\n<p>Authentication is required and the user needs to be a Super Admin.<br />\nSuper Admins are listed in the Props file.</p>\n',
					description_markdown: 'Delete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID\n\nAuthentication is required and the user needs to be a Super Admin.\nSuper Admins are listed in the Props file.\n\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20050: Current User is not a Super Admin!',
						'OBP-30212: EntitlementId not found',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'User',
						'Entitlement'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/entitlement/ENTITLEMENT_ID'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyImageUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyImageUrl'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
					summary: 'Update Counterparty Image Url',
					description: '<p>Update the url that points to the logo of the counterparty</p>\n',
					description_markdown: 'Update the url that points to the logo of the counterparty',
					example_request_body: {
						image_URL: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow updating an image url',
						'URL cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							image_URL: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url'
				},
				{
					operation_id: 'OBPv3.1.0-updateAccount',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateAccount'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
					summary: 'Update Account.',
					description: '<p>Update the account.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the account. \n\nAuthentication is Mandatory\n\n       ',
					example_request_body: {
						label: 'Label',
						type: 'CURRENT',
						branch_id: '1234',
						account_routing: {
							scheme: 'AccountNumber',
							address: '4930396'
						}
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						label: 'Label',
						type: 'CURRENT',
						branch_id: '1234',
						account_routing: {
							scheme: 'AccountNumber',
							address: '4930396'
						}
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
					],
					is_core: true,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							account_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							branch_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							label: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							branch_id: {
								type: 'string'
							},
							label: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							account_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							account_id: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanUpdateAccount',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID'
				},
				{
					operation_id: 'OBPv3.0.0-getPrivateAccountIdsbyBankId',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getPrivateAccountIdsbyBankId'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private',
					summary: 'Get Accounts at Bank (IDs only).',
					description: '<p>Returns only the list of accounts ids at BANK_ID that the user has access to.</p>\n<p>Each account must have at least one private View.</p>\n<p>For each account the API returns its account ID.</p>\n<p>If you want to see more information on the Views, use the Account Detail call.</p>\n<p>optional request parameters:</p>\n<ul>\n<li>account_type_filter: one or many accountType value, split by comma</li>\n<li>account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE</li>\n</ul>\n<p>whole url example:<br />\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private?account_type_filter=330,CURRENT+PLUS&amp;account_type_filter_operation=INCLUDE</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Returns only the list of accounts ids at BANK_ID that the user has access to.\n\nEach account must have at least one private View.\n\nFor each account the API returns its account ID.\n\nIf you want to see more information on the Views, use the Account Detail call.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Account',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private'
				},
				{
					operation_id: 'OBPv3.0.0-getAtm',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getAtm'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms/ATM_ID',
					summary: 'Get Bank ATM',
					description: '<p>Returns information about ATM for a single bank specified by BANK_ID and ATM_ID including:</p>\n<ul>\n<li>Address</li>\n<li>Geo Location</li>\n<li>License the data under this endpoint is released under</li>\n</ul>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns information about ATM for a single bank specified by BANK_ID and ATM_ID including:\n\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n\n\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: 'atm-id-123',
						bank_id: 'GENODEM1GLS',
						name: 'Atm by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: '',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 11.45,
							longitude: 11.45
						},
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						monday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						tuesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						wednesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						thursday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						friday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						saturday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						sunday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						is_accessible: 'true',
						located_at: 'Full service store',
						more_info: 'short walk to the lake from here',
						has_deposit_capability: 'true'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30009: ATM not found. Please specify a valid value for ATM_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'ATM',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							has_deposit_capability: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							friday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							bank_id: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							monday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							saturday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							thursday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							tuesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							wednesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							sunday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									},
									county: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							located_at: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms/ATM_ID'
				},
				{
					operation_id: 'OBPv2.0.0-getKycStatuses',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getKycStatuses'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/customers/CUSTOMER_ID/kyc_statuses',
					summary: 'Get Customer KYC statuses',
					description: '<p>Get the KYC statuses for a customer specified by CUSTOMER_ID over time.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the KYC statuses for a customer specified by CUSTOMER_ID over time.\n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						statuses: [{
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							customer_number: '5987953',
							ok: true,
							date: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							statuses: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										date: {
											type: 'string',
											format: 'date-time'
										},
										ok: {
											type: 'boolean'
										},
										customer_number: {
											type: 'string'
										},
										customer_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_statuses'
				},
				{
					operation_id: 'OBPv3.1.0-getAccountWebhooks',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getAccountWebhooks'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
					summary: 'Get Account Webhooks',
					description: '<p>Get Account Webhooks.</p>\n<p>Possible custom URL parameters for pagination:</p>\n<ul>\n<li>limit=NUMBER</li>\n<li>offset=NUMBER</li>\n<li>account_id=STRING</li>\n<li>user_id=STRING</li>\n</ul>\n',
					description_markdown: 'Get Account Webhooks.\n\nPossible custom URL parameters for pagination:\n\n* limit=NUMBER\n* offset=NUMBER\n* account_id=STRING\n* user_id=STRING\n\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						web_hooks: [{
							account_webhook_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
							trigger_name: 'OnBalanceChange',
							url: 'https://localhost.openbankproject.com',
							http_method: 'POST',
							http_protocol: 'HTTP/1.1',
							created_by_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							is_active: true
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Webhook',
						'Bank',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							web_hooks: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										created_by_user_id: {
											type: 'string'
										},
										http_method: {
											type: 'string'
										},
										is_active: {
											type: 'boolean'
										},
										http_protocol: {
											type: 'string'
										},
										account_webhook_id: {
											type: 'string'
										},
										trigger_name: {
											type: 'string'
										},
										account_id: {
											type: 'string'
										},
										url: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanGetWebhooks',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks'
				},
				{
					operation_id: 'OBPv3.0.0-getEntitlementRequests',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getEntitlementRequests'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/users/USER_ID/entitlement-requests',
					summary: 'Get Entitlement Requests for a User.',
					description: '<p>Get Entitlement Requests for a User.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get Entitlement Requests for a User.\n\n\nAuthentication is Mandatory\n\n        ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						entitlement_requests: [{
							entitlement_request_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
							user: {
								user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
								email: 'eveline@example.com',
								provider_id: 'Chris',
								provider: 'http://127.0.0.1:8080',
								username: 'felixsmith',
								entitlements: {
									list: [{
										entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
										role_name: 'CanQueryOtherUser',
										bank_id: 'GENODEM1GLS'
									}]
								}
							},
							role_name: 'CanQueryOtherUser',
							bank_id: 'GENODEM1GLS',
							created: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20050: Current User is not a Super Admin!',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							entitlement_requests: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										entitlement_request_id: {
											type: 'string'
										},
										created: {
											type: 'string',
											format: 'date-time'
										},
										user: {
											type: 'object',
											properties: {
												entitlements: {
													type: 'object',
													properties: {
														list: {
															type: 'array',
															items: {
																type: 'object',
																properties: {
																	bank_id: {
																		type: 'string'
																	},
																	role_name: {
																		type: 'string'
																	},
																	entitlement_id: {
																		type: 'string'
																	}
																}
															}
														}
													}
												},
												provider: {
													type: 'string'
												},
												email: {
													type: 'string'
												},
												provider_id: {
													type: 'string'
												},
												username: {
													type: 'string'
												},
												user_id: {
													type: 'string'
												}
											}
										},
										role_name: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanGetEntitlementRequestsAtAnyBank',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/entitlement-requests'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyUrl'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
					summary: 'Delete url of other bank account.',
					description: '',
					description_markdown: '',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow deleting a url',
						'URL cannot be deleted',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url'
				},
				{
					operation_id: 'OBPv3.1.0-createAccount',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createAccount'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
					summary: 'Create Account',
					description: '<p>Create Account at bank specified by BANK_ID with Id specified by ACCOUNT_ID.</p>\n<p>The User can create an Account for themself  - or -  the User that has the USER_ID specified in the POST body.</p>\n<p>If the PUT body USER_ID <em>is</em> specified, the logged in user must have the Role canCreateAccount. Once created, the Account will be owned by the User specified by USER_ID.</p>\n<p>If the PUT body USER_ID is <em>not</em> specified, the account will be owned by the logged in User.</p>\n<p>The \'type\' field SHOULD be a product_code from Product.<br />\nIf the type matches a product_code from Product, account attributes will be created that match the Product Attributes.</p>\n<p>Note: The Amount MUST be zero.</p>\n',
					description_markdown: 'Create Account at bank specified by BANK_ID with Id specified by ACCOUNT_ID.\n\nThe User can create an Account for themself  - or -  the User that has the USER_ID specified in the POST body.\n\nIf the PUT body USER_ID *is* specified, the logged in user must have the Role canCreateAccount. Once created, the Account will be owned by the User specified by USER_ID.\n\nIf the PUT body USER_ID is *not* specified, the account will be owned by the logged in User.\n\nThe \'type\' field SHOULD be a product_code from Product.\nIf the type matches a product_code from Product, account attributes will be created that match the Product Attributes.\n\nNote: The Amount MUST be zero.',
					example_request_body: {
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						label: 'Label',
						type: 'CURRENT',
						balance: {
							currency: 'EUR',
							amount: '0'
						},
						branch_id: '1234',
						account_routing: {
							scheme: 'OBP',
							address: 'UK123456'
						}
					},
					success_response_body: {
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						label: 'My Account',
						type: 'AC',
						balance: {
							currency: 'EUR',
							amount: '10'
						},
						branch_id: 'DERBY6',
						account_routing: {
							scheme: 'AccountNumber',
							address: '4930396'
						},
						account_attributes: [{
							product_code: 'saving1',
							account_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							name: 'OVERDRAFT_START_DATE',
							type: 'DATE_WITH_DAY',
							value: '2012-04-23'
						}]
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30107: Invalid User Id.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-20005: User not found. Please specify a valid value for USER_ID.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-30106: Invalid Balance Amount.',
						'OBP-30112: Invalid Number. Initial balance must be a number, e.g 1000.00',
						'OBP-30109: Initial Balance of Account must be Zero (0).',
						'OBP-30105: Invalid Balance Currency.',
						'OBP-30208: Account_ID already exists at the Bank.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account',
						'Onboarding'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							branch_id: {
								type: 'string'
							},
							label: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							balance: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							account_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							user_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							account_attributes: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										account_attribute_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										product_code: {
											type: 'string'
										}
									}
								}
							},
							label: {
								type: 'string'
							},
							account_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							balance: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branch_id: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateAccount',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID'
				},
				{
					operation_id: 'OBPv2.1.0-getCustomersForCurrentUserAtBank',
					implemented_by: {
						version: 'OBPv2.1.0',
						'function': 'getCustomersForCurrentUserAtBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers',
					summary: 'Get Customers for current User at Bank',
					description: '<p>Retuns a list of Customers at the Bank that are linked to the currently authenticated User.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Retuns a list of Customers at the Bank that are linked to the currently authenticated User.\n\n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30008: User Customer Link not found by USER_ID',
						'OBP-30008: User Customer Link not found by USER_ID',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers'
				},
				{
					operation_id: 'OBPv3.1.0-createConsentEmail',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createConsentEmail'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/EMAIL',
					summary: 'Create Consent (EMAIL)',
					description: '<p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p>\n<p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p>\n<p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p>\n<p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.</p>\n<p>This endpoint starts the process of creating a Consent.</p>\n<p>The Consent is created in an INITIATED state.</p>\n<p>A One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD<br />\nSCA_METHOD is typically &quot;SMS&quot; or &quot;EMAIL&quot;. &quot;EMAIL&quot; is used for testing purposes.</p>\n<p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\nThis endpoint starts the process of creating a Consent.\n\nThe Consent is created in an INITIATED state.\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\nWhen the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						'for': 'ALL_MY_ACCOUNTS',
						view: 'owner',
						email: 'marko@tesobe.com'
					},
					success_response_body: {
						consent_id: '9d429899-24f5-42c8-8565-943ffa6a7945',
						jwt: 'eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4',
						status: 'INITIATED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Consent',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							email: {
								type: 'string'
							},
							view: {
								type: 'string'
							},
							'for': {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							status: {
								type: 'string'
							},
							jwt: {
								type: 'string'
							},
							consent_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/EMAIL'
				},
				{
					operation_id: 'OBPv2.2.0-getExplictCounterpartiesForAccount',
					implemented_by: {
						version: 'OBPv2.2.0',
						'function': 'getExplictCounterpartiesForAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.2.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties',
					summary: 'Get Counterparties (Explicit).',
					description: '<p>Get the Counterparties (Explicit) for the account / view.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get the Counterparties (Explicit) for the account / view.\n\nAuthentication is Mandatory\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						counterparties: [{
							name: 'CounterpartyName',
							description: 'My landlord',
							created_by_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							this_bank_id: 'GENODEM1GLS',
							this_account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
							this_view_id: 'owner',
							counterparty_id: '1d65db7c-a7b2-4839-af41-958276ab7790',
							other_bank_routing_scheme: 'bankCode',
							other_bank_routing_address: '10',
							other_branch_routing_scheme: 'branchNumber',
							other_branch_routing_address: '10010',
							other_account_routing_scheme: 'accountNumber',
							other_account_routing_address: '7987987-2348987-234234',
							other_account_secondary_routing_scheme: 'accountId',
							other_account_secondary_routing_address: '8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0',
							is_beneficiary: true,
							bespoke: [{
								key: 'englishName',
								value: 'english Name'
							}]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Counterparty',
						'Payment Initiation Service (PIS)',
						'Account'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							counterparties: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bespoke: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													value: {
														type: 'string'
													},
													key: {
														type: 'string'
													}
												}
											}
										},
										created_by_user_id: {
											type: 'string'
										},
										other_bank_routing_scheme: {
											type: 'string'
										},
										this_bank_id: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										other_account_secondary_routing_scheme: {
											type: 'string'
										},
										other_branch_routing_address: {
											type: 'string'
										},
										counterparty_id: {
											type: 'string'
										},
										description: {
											type: 'string'
										},
										other_account_routing_address: {
											type: 'string'
										},
										other_bank_routing_address: {
											type: 'string'
										},
										this_account_id: {
											type: 'string'
										},
										other_branch_routing_scheme: {
											type: 'string'
										},
										other_account_routing_scheme: {
											type: 'string'
										},
										other_account_secondary_routing_address: {
											type: 'string'
										},
										is_beneficiary: {
											type: 'boolean'
										},
										this_view_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyMoreInfo',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyMoreInfo'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
					summary: 'Update Counterparty More Info',
					description: '<p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist.</p>\n',
					description_markdown: 'Update the more info description of the counter party from the perpestive of the account e.g. My dentist.',
					example_request_body: {
						more_info: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow updating more info',
						'More Info cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							more_info: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info'
				},
				{
					operation_id: 'OBPv3.0.0-createAtm',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'createAtm'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms',
					summary: 'Create ATM',
					description: '<p>Create ATM for the Bank.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create ATM for the Bank.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						id: 'atm-id-123',
						bank_id: 'GENODEM1GLS',
						name: 'Atm by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: '',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 11.45,
							longitude: 11.45
						},
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						monday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						tuesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						wednesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						thursday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						friday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						saturday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						sunday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						is_accessible: 'true',
						located_at: 'Full service store',
						more_info: 'short walk to the lake from here',
						has_deposit_capability: 'true'
					},
					success_response_body: {
						id: 'atm-id-123',
						bank_id: 'GENODEM1GLS',
						name: 'Atm by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: '',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 11.45,
							longitude: 11.45
						},
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						monday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						tuesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						wednesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						thursday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						friday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						saturday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						sunday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						is_accessible: 'true',
						located_at: 'Full service store',
						more_info: 'short walk to the lake from here',
						has_deposit_capability: 'true'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'ATM'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							has_deposit_capability: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							friday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							bank_id: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							monday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							saturday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							thursday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							tuesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							wednesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							sunday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									},
									county: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							located_at: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							has_deposit_capability: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							friday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							bank_id: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							monday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							saturday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							thursday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							tuesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							wednesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							sunday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									},
									county: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							located_at: {
								type: 'string'
							}
						}
					},
					roles: [{
							role: 'CanCreateAtm',
							requires_bank_id: true
						},
						{
							role: 'CanCreateAtmAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms'
				},
				{
					operation_id: 'OBPv3.1.0-getPrivateAccountByIdFull',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getPrivateAccountByIdFull'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/account',
					summary: 'Get Account by Id (Full)',
					description: '<p>Information returned about an account specified by ACCOUNT_ID as moderated by the view (VIEW_ID):</p>\n<ul>\n<li>Number</li>\n<li>Owners</li>\n<li>Type</li>\n<li>Balance</li>\n<li>IBAN</li>\n<li>Available views (sorted by short_name)</li>\n</ul>\n<p>More details about the data moderation by the view <a href="#1_2_1-getViewsForBankAccount">here</a>.</p>\n<p>PSD2 Context: PSD2 requires customers to have access to their account information via third party applications.<br />\nThis call provides balance and other account information via delegated authentication using OAuth.</p>\n<p>Authentication is required if the \'is_public\' field in view (VIEW_ID) is not set to <code>true</code>.</p>\n',
					description_markdown: 'Information returned about an account specified by ACCOUNT_ID as moderated by the view (VIEW_ID):\n\n* Number\n* Owners\n* Type\n* Balance\n* IBAN\n* Available views (sorted by short_name)\n\nMore details about the data moderation by the view [here](#1_2_1-getViewsForBankAccount).\n\nPSD2 Context: PSD2 requires customers to have access to their account information via third party applications.\nThis call provides balance and other account information via delegated authentication using OAuth.\n\nAuthentication is required if the \'is_public\' field in view (VIEW_ID) is not set to `true`.\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						label: 'NoneLabel',
						number: '123',
						owners: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}],
						type: 'OBP',
						balance: {
							currency: 'EUR',
							amount: '10'
						},
						views_available: [{
							id: '123',
							short_name: 'short_name',
							description: 'description',
							is_public: true,
							alias: 'None',
							hide_metadata_if_alias_used: true,
							can_add_comment: true,
							can_add_corporate_location: true,
							can_add_image: true,
							can_add_image_url: true,
							can_add_more_info: true,
							can_add_open_corporates_url: true,
							can_add_physical_location: true,
							can_add_private_alias: true,
							can_add_public_alias: true,
							can_add_tag: true,
							can_add_url: true,
							can_add_where_tag: true,
							can_delete_comment: true,
							can_delete_corporate_location: true,
							can_delete_image: true,
							can_delete_physical_location: true,
							can_delete_tag: true,
							can_delete_where_tag: true,
							can_edit_owner_comment: true,
							can_see_bank_account_balance: true,
							can_see_bank_account_bank_name: true,
							can_see_bank_account_currency: true,
							can_see_bank_account_iban: true,
							can_see_bank_account_label: true,
							can_see_bank_account_national_identifier: true,
							can_see_bank_account_number: true,
							can_see_bank_account_owners: true,
							can_see_bank_account_swift_bic: true,
							can_see_bank_account_type: true,
							can_see_comments: true,
							can_see_corporate_location: true,
							can_see_image_url: true,
							can_see_images: true,
							can_see_more_info: true,
							can_see_open_corporates_url: true,
							can_see_other_account_bank_name: true,
							can_see_other_account_iban: true,
							can_see_other_account_kind: true,
							can_see_other_account_metadata: true,
							can_see_other_account_national_identifier: true,
							can_see_other_account_number: true,
							can_see_other_account_swift_bic: true,
							can_see_owner_comment: true,
							can_see_physical_location: true,
							can_see_private_alias: true,
							can_see_public_alias: true,
							can_see_tags: true,
							can_see_transaction_amount: true,
							can_see_transaction_balance: true,
							can_see_transaction_currency: true,
							can_see_transaction_description: true,
							can_see_transaction_finish_date: true,
							can_see_transaction_metadata: true,
							can_see_transaction_other_bank_account: true,
							can_see_transaction_start_date: true,
							can_see_transaction_this_bank_account: true,
							can_see_transaction_type: true,
							can_see_url: true,
							can_see_where_tag: true
						}],
						bank_id: 'GENODEM1GLS',
						account_routing: {
							scheme: 'AccountNumber',
							address: '4930396'
						},
						account_attributes: [{
							product_code: 'saving1',
							account_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							name: 'OVERDRAFT_START_DATE',
							type: 'DATE_WITH_DAY',
							value: '2012-04-23'
						}]
					},
					error_response_bodies: [
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							account_attributes: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										account_attribute_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										product_code: {
											type: 'string'
										}
									}
								}
							},
							label: {
								type: 'string'
							},
							number: {
								type: 'string'
							},
							owners: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										display_name: {
											type: 'string'
										},
										provider: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							},
							id: {
								type: 'string'
							},
							views_available: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										can_see_other_account_swift_bic: {
											type: 'boolean'
										},
										can_see_where_tag: {
											type: 'boolean'
										},
										can_see_url: {
											type: 'boolean'
										},
										can_see_bank_account_swift_bic: {
											type: 'boolean'
										},
										can_see_tags: {
											type: 'boolean'
										},
										can_see_transaction_balance: {
											type: 'boolean'
										},
										can_delete_corporate_location: {
											type: 'boolean'
										},
										can_add_image_url: {
											type: 'boolean'
										},
										can_see_public_alias: {
											type: 'boolean'
										},
										can_add_comment: {
											type: 'boolean'
										},
										description: {
											type: 'string'
										},
										can_see_corporate_location: {
											type: 'boolean'
										},
										can_see_other_account_bank_name: {
											type: 'boolean'
										},
										can_see_more_info: {
											type: 'boolean'
										},
										can_see_physical_location: {
											type: 'boolean'
										},
										can_edit_owner_comment: {
											type: 'boolean'
										},
										can_see_private_alias: {
											type: 'boolean'
										},
										can_see_bank_account_balance: {
											type: 'boolean'
										},
										can_add_public_alias: {
											type: 'boolean'
										},
										can_see_bank_account_owners: {
											type: 'boolean'
										},
										can_see_other_account_metadata: {
											type: 'boolean'
										},
										can_delete_physical_location: {
											type: 'boolean'
										},
										hide_metadata_if_alias_used: {
											type: 'boolean'
										},
										can_see_transaction_this_bank_account: {
											type: 'boolean'
										},
										can_see_image_url: {
											type: 'boolean'
										},
										can_see_transaction_type: {
											type: 'boolean'
										},
										can_see_images: {
											type: 'boolean'
										},
										can_see_transaction_amount: {
											type: 'boolean'
										},
										can_see_transaction_metadata: {
											type: 'boolean'
										},
										id: {
											type: 'string'
										},
										can_see_comments: {
											type: 'boolean'
										},
										can_see_other_account_iban: {
											type: 'boolean'
										},
										can_add_image: {
											type: 'boolean'
										},
										can_see_bank_account_type: {
											type: 'boolean'
										},
										can_see_other_account_kind: {
											type: 'boolean'
										},
										can_see_bank_account_currency: {
											type: 'boolean'
										},
										can_add_where_tag: {
											type: 'boolean'
										},
										can_see_transaction_start_date: {
											type: 'boolean'
										},
										can_see_bank_account_label: {
											type: 'boolean'
										},
										can_add_private_alias: {
											type: 'boolean'
										},
										can_see_transaction_currency: {
											type: 'boolean'
										},
										can_add_more_info: {
											type: 'boolean'
										},
										can_delete_comment: {
											type: 'boolean'
										},
										can_see_transaction_other_bank_account: {
											type: 'boolean'
										},
										can_see_bank_account_number: {
											type: 'boolean'
										},
										can_add_corporate_location: {
											type: 'boolean'
										},
										can_add_url: {
											type: 'boolean'
										},
										short_name: {
											type: 'string'
										},
										can_delete_where_tag: {
											type: 'boolean'
										},
										is_public: {
											type: 'boolean'
										},
										can_see_owner_comment: {
											type: 'boolean'
										},
										can_see_transaction_finish_date: {
											type: 'boolean'
										},
										can_see_open_corporates_url: {
											type: 'boolean'
										},
										can_add_physical_location: {
											type: 'boolean'
										},
										can_see_bank_account_iban: {
											type: 'boolean'
										},
										can_see_other_account_national_identifier: {
											type: 'boolean'
										},
										can_delete_image: {
											type: 'boolean'
										},
										can_add_tag: {
											type: 'boolean'
										},
										can_add_open_corporates_url: {
											type: 'boolean'
										},
										can_delete_tag: {
											type: 'boolean'
										},
										can_see_transaction_description: {
											type: 'boolean'
										},
										can_see_bank_account_national_identifier: {
											type: 'boolean'
										},
										can_see_other_account_number: {
											type: 'boolean'
										},
										can_see_bank_account_bank_name: {
											type: 'boolean'
										},
										alias: {
											type: 'string'
										}
									}
								}
							},
							account_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							balance: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							type: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/account'
				},
				{
					operation_id: 'OBPv2.2.0-getCurrentFxRate',
					implemented_by: {
						version: 'OBPv2.2.0',
						'function': 'getCurrentFxRate'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.2.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx/FROM_CURRENCY_CODE/TO_CURRENCY_CODE',
					summary: 'Get Current FxRate',
					description: '<p>Get the latest FX rate specified by BANK_ID, FROM_CURRENCY_CODE and TO_CURRENCY_CODE</p>\n<p>OBP may try different sources of FX rate information depending on the Connector in operation.</p>\n<p>For example we want to convert EUR =&gt; USD:</p>\n<p>OBP will:<br />\n1st try - Connector (database, core banking system or external FX service)<br />\n2nd try part 1 - fallbackexchangerates/eur.json<br />\n2nd try part 2 - fallbackexchangerates/usd.json (the inverse rate is used)<br />\n3rd try - Hardcoded map of FX rates.</p>\n<p><img src="https://user-images.githubusercontent.com/485218/60005085-1eded600-966e-11e9-96fb-798b102d9ad0.png" alt="FX Flow" /></p>\n',
					description_markdown: 'Get the latest FX rate specified by BANK_ID, FROM_CURRENCY_CODE and TO_CURRENCY_CODE\n\nOBP may try different sources of FX rate information depending on the Connector in operation.\n\nFor example we want to convert EUR => USD:\n\nOBP will:\n1st try - Connector (database, core banking system or external FX service)\n2nd try part 1 - fallbackexchangerates/eur.json\n2nd try part 2 - fallbackexchangerates/usd.json (the inverse rate is used)\n3rd try - Hardcoded map of FX rates.\n\n![FX Flow](https://user-images.githubusercontent.com/485218/60005085-1eded600-966e-11e9-96fb-798b102d9ad0.png)\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						from_currency_code: 'EUR',
						to_currency_code: 'GBP',
						conversion_value: 1.001,
						inverse_conversion_value: 0.998,
						effective_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-10003: Invalid Currency Value. It should be three letters ISO Currency Code. ',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10004: ISO Currency code combination not supported for FX. Please modify the FROM_CURRENCY_CODE or TO_CURRENCY_CODE. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'FX',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							to_currency_code: {
								type: 'string'
							},
							from_currency_code: {
								type: 'string'
							},
							inverse_conversion_value: {
								type: 'number'
							},
							effective_date: {
								type: 'string',
								format: 'date-time'
							},
							conversion_value: {
								type: 'number'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx/FROM_CURRENCY_CODE/TO_CURRENCY_CODE'
				},
				{
					operation_id: 'OBPv1.4.0-getTransactionRequestTypes',
					implemented_by: {
						version: 'OBPv1.4.0',
						'function': 'getTransactionRequestTypes'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.4.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types',
					summary: 'Get Transaction Request Types for Account',
					description: '<p>Returns the Transation Request Types that the account specified by ACCOUNT_ID and view specified by VIEW_ID has access to.</p>\n<p>These are the ways this API Server can create a Transaction via a Transaction Request<br />\n(as opposed to Transaction Types which include external types too e.g. for Transactions created by core banking etc.)</p>\n<p>A Transaction Request Type internally determines:</p>\n<ul>\n<li>the required Transaction Request \'body\' i.e. fields that define the \'what\' and \'to\' of a Transaction Request,</li>\n<li>the type of security challenge that may be be raised before the Transaction Request proceeds, and</li>\n<li>the threshold of that challenge.</li>\n</ul>\n<p>For instance in a \'SANDBOX_TAN\' Transaction Request, for amounts over 1000 currency units, the user must supply a positive integer to complete the Transaction Request and create a Transaction.</p>\n<p>This approach aims to provide only one endpoint for initiating transactions, and one that handles challenges, whilst still allowing flexibility with the payload and internal logic.</p>\n',
					description_markdown: 'Returns the Transation Request Types that the account specified by ACCOUNT_ID and view specified by VIEW_ID has access to.\n\nThese are the ways this API Server can create a Transaction via a Transaction Request\n(as opposed to Transaction Types which include external types too e.g. for Transactions created by core banking etc.)\n\n A Transaction Request Type internally determines:\n\n * the required Transaction Request \'body\' i.e. fields that define the \'what\' and \'to\' of a Transaction Request,\n * the type of security challenge that may be be raised before the Transaction Request proceeds, and\n * the threshold of that challenge.\n\n For instance in a \'SANDBOX_TAN\' Transaction Request, for amounts over 1000 currency units, the user must supply a positive integer to complete the Transaction Request and create a Transaction.\n\n This approach aims to provide only one endpoint for initiating transactions, and one that handles challenges, whilst still allowing flexibility with the payload and internal logic.\n \n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						transaction_request_types: [{
							value: '10',
							charge: {
								summary: 'The bank fixed charge',
								value: {
									currency: 'EUR',
									amount: '10'
								}
							}
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'Please specify a valid value for CURRENCY of your Bank Account. ',
						'Current user does not have access to the view ',
						'account not found at bank',
						'user does not have access to owner view',
						'OBP-40018: Sorry, Transaction Requests are not enabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							transaction_request_types: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										charge: {
											type: 'object',
											properties: {
												value: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												summary: {
													type: 'string'
												}
											}
										},
										value: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types'
				},
				{
					operation_id: 'OBPv3.0.0-getPermissionForUserForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getPermissionForUserForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID',
					summary: 'Get Account access for User.',
					description: '<p>Returns the list of the views at BANK_ID for account ACCOUNT_ID that a user identified by PROVIDER_ID at their provider PROVIDER has access to.<br />\nAll url parameters must be <a href="http://en.wikipedia.org/wiki/Percent-encoding">%-encoded</a>, which is often especially relevant for USER_ID and PROVIDER.</p>\n<p>Authentication is Mandatory</p>\n<p>The user needs to have access to the owner view.</p>\n',
					description_markdown: 'Returns the list of the views at BANK_ID for account ACCOUNT_ID that a user identified by PROVIDER_ID at their provider PROVIDER has access to.\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for USER_ID and PROVIDER.\n\nAuthentication is Mandatory\n\nThe user needs to have access to the owner view.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						views: [{
							id: '1234',
							short_name: 'short_name',
							description: 'description',
							metadata_view: 'owner',
							is_public: true,
							alias: 'No',
							hide_metadata_if_alias_used: true,
							can_add_comment: true,
							can_add_corporate_location: true,
							can_add_image: true,
							can_add_image_url: true,
							can_add_more_info: true,
							can_add_open_corporates_url: true,
							can_add_physical_location: true,
							can_add_private_alias: true,
							can_add_public_alias: true,
							can_add_tag: true,
							can_add_url: true,
							can_add_where_tag: true,
							can_delete_comment: true,
							can_add_counterparty: true,
							can_delete_corporate_location: true,
							can_delete_image: true,
							can_delete_physical_location: true,
							can_delete_tag: true,
							can_delete_where_tag: true,
							can_edit_owner_comment: true,
							can_see_bank_account_balance: true,
							can_query_available_funds: true,
							can_see_bank_account_bank_name: true,
							can_see_bank_account_currency: true,
							can_see_bank_account_iban: true,
							can_see_bank_account_label: true,
							can_see_bank_account_national_identifier: true,
							can_see_bank_account_number: true,
							can_see_bank_account_owners: true,
							can_see_bank_account_swift_bic: true,
							can_see_bank_account_type: true,
							can_see_comments: true,
							can_see_corporate_location: true,
							can_see_image_url: true,
							can_see_images: true,
							can_see_more_info: true,
							can_see_open_corporates_url: true,
							can_see_other_account_bank_name: true,
							can_see_other_account_iban: true,
							can_see_other_account_kind: true,
							can_see_other_account_metadata: true,
							can_see_other_account_national_identifier: true,
							can_see_other_account_number: true,
							can_see_other_account_swift_bic: true,
							can_see_owner_comment: true,
							can_see_physical_location: true,
							can_see_private_alias: true,
							can_see_public_alias: true,
							can_see_tags: true,
							can_see_transaction_amount: true,
							can_see_transaction_balance: true,
							can_see_transaction_currency: true,
							can_see_transaction_description: true,
							can_see_transaction_finish_date: true,
							can_see_transaction_metadata: true,
							can_see_transaction_other_bank_account: true,
							can_see_transaction_start_date: true,
							can_see_transaction_this_bank_account: true,
							can_see_transaction_type: true,
							can_see_url: true,
							can_see_where_tag: true,
							can_see_bank_routing_scheme: true,
							can_see_bank_routing_address: true,
							can_see_bank_account_routing_scheme: true,
							can_see_bank_account_routing_address: true,
							can_see_other_bank_routing_scheme: true,
							can_see_other_bank_routing_address: true,
							can_see_other_account_routing_scheme: true,
							can_see_other_account_routing_address: true,
							can_add_transaction_request_to_own_account: true,
							can_add_transaction_request_to_any_account: true,
							can_see_bank_account_credit_limit: true
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							views: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										can_see_other_account_swift_bic: {
											type: 'boolean'
										},
										can_see_where_tag: {
											type: 'boolean'
										},
										can_see_url: {
											type: 'boolean'
										},
										can_see_bank_account_swift_bic: {
											type: 'boolean'
										},
										can_see_bank_account_routing_address: {
											type: 'boolean'
										},
										can_see_tags: {
											type: 'boolean'
										},
										can_see_transaction_balance: {
											type: 'boolean'
										},
										can_delete_corporate_location: {
											type: 'boolean'
										},
										can_add_image_url: {
											type: 'boolean'
										},
										can_see_public_alias: {
											type: 'boolean'
										},
										can_add_transaction_request_to_own_account: {
											type: 'boolean'
										},
										can_add_comment: {
											type: 'boolean'
										},
										can_see_other_bank_routing_scheme: {
											type: 'boolean'
										},
										description: {
											type: 'string'
										},
										can_see_corporate_location: {
											type: 'boolean'
										},
										can_see_other_account_bank_name: {
											type: 'boolean'
										},
										can_see_more_info: {
											type: 'boolean'
										},
										can_add_counterparty: {
											type: 'boolean'
										},
										can_see_physical_location: {
											type: 'boolean'
										},
										can_query_available_funds: {
											type: 'boolean'
										},
										can_edit_owner_comment: {
											type: 'boolean'
										},
										can_see_private_alias: {
											type: 'boolean'
										},
										can_see_bank_account_credit_limit: {
											type: 'boolean'
										},
										can_see_other_account_routing_address: {
											type: 'boolean'
										},
										can_see_bank_account_balance: {
											type: 'boolean'
										},
										can_add_public_alias: {
											type: 'boolean'
										},
										can_see_bank_routing_scheme: {
											type: 'boolean'
										},
										can_see_bank_account_owners: {
											type: 'boolean'
										},
										can_see_other_account_metadata: {
											type: 'boolean'
										},
										can_delete_physical_location: {
											type: 'boolean'
										},
										hide_metadata_if_alias_used: {
											type: 'boolean'
										},
										can_see_transaction_this_bank_account: {
											type: 'boolean'
										},
										can_see_image_url: {
											type: 'boolean'
										},
										can_see_transaction_type: {
											type: 'boolean'
										},
										can_see_images: {
											type: 'boolean'
										},
										can_see_transaction_amount: {
											type: 'boolean'
										},
										metadata_view: {
											type: 'string'
										},
										can_see_transaction_metadata: {
											type: 'boolean'
										},
										can_see_comments: {
											type: 'boolean'
										},
										can_see_other_account_iban: {
											type: 'boolean'
										},
										can_add_image: {
											type: 'boolean'
										},
										can_see_bank_account_routing_scheme: {
											type: 'boolean'
										},
										can_see_bank_account_type: {
											type: 'boolean'
										},
										can_see_other_account_kind: {
											type: 'boolean'
										},
										can_see_bank_account_currency: {
											type: 'boolean'
										},
										can_add_where_tag: {
											type: 'boolean'
										},
										can_see_transaction_start_date: {
											type: 'boolean'
										},
										can_see_bank_account_label: {
											type: 'boolean'
										},
										can_add_private_alias: {
											type: 'boolean'
										},
										can_see_transaction_currency: {
											type: 'boolean'
										},
										can_add_more_info: {
											type: 'boolean'
										},
										can_delete_comment: {
											type: 'boolean'
										},
										can_see_other_bank_routing_address: {
											type: 'boolean'
										},
										can_see_transaction_other_bank_account: {
											type: 'boolean'
										},
										can_see_bank_account_number: {
											type: 'boolean'
										},
										can_add_corporate_location: {
											type: 'boolean'
										},
										alias: {
											type: 'string'
										},
										can_add_url: {
											type: 'boolean'
										},
										short_name: {
											type: 'string'
										},
										can_delete_where_tag: {
											type: 'boolean'
										},
										is_public: {
											type: 'boolean'
										},
										can_see_owner_comment: {
											type: 'boolean'
										},
										can_see_transaction_finish_date: {
											type: 'boolean'
										},
										can_see_open_corporates_url: {
											type: 'boolean'
										},
										can_add_physical_location: {
											type: 'boolean'
										},
										can_see_bank_account_iban: {
											type: 'boolean'
										},
										can_see_other_account_national_identifier: {
											type: 'boolean'
										},
										can_see_bank_routing_address: {
											type: 'boolean'
										},
										can_delete_image: {
											type: 'boolean'
										},
										can_add_transaction_request_to_any_account: {
											type: 'boolean'
										},
										can_add_tag: {
											type: 'boolean'
										},
										id: {
											type: 'string'
										},
										can_see_other_account_routing_scheme: {
											type: 'boolean'
										},
										can_add_open_corporates_url: {
											type: 'boolean'
										},
										can_delete_tag: {
											type: 'boolean'
										},
										can_see_transaction_description: {
											type: 'boolean'
										},
										can_see_bank_account_national_identifier: {
											type: 'boolean'
										},
										can_see_other_account_number: {
											type: 'boolean'
										},
										can_see_bank_account_bank_name: {
											type: 'boolean'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID'
				},
				{
					operation_id: 'OBPv3.0.0-getBranch',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getBranch'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
					summary: 'Get Branch',
					description: '<p>Returns information about a single Branch specified by BANK_ID and BRANCH_ID including:</p>\n<ul>\n<li>Name</li>\n<li>Address</li>\n<li>Geo Location</li>\n<li>License the data under this endpoint is released under.</li>\n</ul>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns information about a single Branch specified by BANK_ID and BRANCH_ID including:\n\n* Name\n* Address\n* Geo Location\n* License the data under this endpoint is released under.\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: 'branch-id-123',
						bank_id: 'bank-id-123',
						name: 'Branch by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: 'String',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 10,
							longitude: 10
						},
						meta: {
							license: {
								id: 'PDDL',
								name: 'Open Data Commons Public Domain Dedication and License '
							}
						},
						lobby: {
							monday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							tuesday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							wednesday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							thursday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							friday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							saturday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							sunday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}]
						},
						drive_up: {
							monday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							tuesday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							wednesday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							thursday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							friday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							saturday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							sunday: {
								opening_time: '10:00',
								closing_time: '18:00'
							}
						},
						branch_routing: {
							scheme: 'OBP',
							address: '123abc'
						},
						is_accessible: 'true',
						accessibleFeatures: 'wheelchair, atm usuable by the visually impaired',
						branch_type: 'Full service store',
						more_info: 'short walk to the lake from here',
						phone_number: '+381631954907'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'License may not be set. meta.license.id and eta.license.name can not be empty',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Branch',
						'Bank',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accessibleFeatures: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							branch_type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							id: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									county: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									}
								}
							},
							drive_up: {
								type: 'object',
								properties: {
									friday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									monday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									saturday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									thursday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									tuesday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									wednesday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									sunday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									}
								}
							},
							branch_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							phone_number: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							lobby: {
								type: 'object',
								properties: {
									saturday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									tuesday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									monday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									friday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									sunday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									wednesday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									thursday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID'
				},
				{
					operation_id: 'OBPv3.1.0-getCreditLimitRequestByRequestId',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCreditLimitRequestByRequestId'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests/REQUEST_ID',
					summary: 'Get Credit Limit Order Request By Request Id',
					description: '<p><strong>NOTE: This endpoint currently only returns example data.</strong></p>\n<pre><code>    Get Credit Limit Order Request By Request Id\n</code></pre>\n',
					description_markdown: '**NOTE: This endpoint currently only returns example data.**\n\n      \n        Get Credit Limit Order Request By Request Id\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						rank_amount_1: 'String',
						nominal_interest_1: 'String',
						rank_amount_2: 'String',
						nominal_interest_2: 'String'
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							nominal_interest_2: {
								type: 'string'
							},
							rank_amount_2: {
								type: 'string'
							},
							nominal_interest_1: {
								type: 'string'
							},
							rank_amount_1: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests/REQUEST_ID'
				},
				{
					operation_id: 'OBPv3.1.0-answerUserAuthContextUpdateChallenge',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'answerUserAuthContextUpdateChallenge'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/users/current/auth-context-updates/AUTH_CONTEXT_UPDATE_ID/challenge',
					summary: 'Answer Auth Context Update Challenge',
					description: '<p>Answer Auth Context Update Challenge.</p>\n',
					description_markdown: '\nAnswer Auth Context Update Challenge.\n',
					example_request_body: {
						answer: '12345678'
					},
					success_response_body: {
						user_auth_context_update_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						key: 'CUSTOMER_NUMBER',
						value: '78987432',
						status: 'INITIATED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							answer: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user_auth_context_update_id: {
								type: 'string',
								format: 'date-time'
							},
							key: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							value: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/current/auth-context-updates/AUTH_CONTEXT_UPDATE_ID/challenge'
				},
				{
					operation_id: 'OBPv3.1.0-getProductCollection',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getProductCollection'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE',
					summary: 'Get Product Collection',
					description: '<p>Returns information about the financial Product Collection specified by BANK_ID and COLLECTION_CODE:</p>\n',
					description_markdown: 'Returns information about the financial Product Collection specified by BANK_ID and COLLECTION_CODE:\n\n          ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						collection_code: 'A',
						products: [{
							bank_id: 'GENODEM1GLS',
							code: 'product_code',
							parent_product_code: 'parent',
							name: 'product name',
							category: 'category',
							family: 'family',
							super_family: 'super family',
							more_info_url: 'www.example.com/prod1/more-info.html',
							details: 'Details',
							description: 'Description',
							meta: {
								license: {
									id: '5',
									name: 'TESOBE'
								}
							},
							product_attributes: [{
								product_code: 'saving1',
								product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
								name: 'OVERDRAFT_START_DATE',
								type: 'DATE_WITH_DAY',
								value: '2012-04-23'
							}]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Product-Collection',
						'Product'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							products: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										super_family: {
											type: 'string'
										},
										bank_id: {
											type: 'string'
										},
										product_attributes: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													value: {
														type: 'string'
													},
													product_attribute_id: {
														type: 'string'
													},
													type: {
														type: 'string'
													},
													name: {
														type: 'string'
													},
													product_code: {
														type: 'string'
													}
												}
											}
										},
										description: {
											type: 'string'
										},
										details: {
											type: 'string'
										},
										code: {
											type: 'string'
										},
										parent_product_code: {
											type: 'string'
										},
										more_info_url: {
											type: 'string'
										},
										family: {
											type: 'string'
										},
										meta: {
											type: 'object',
											properties: {
												license: {
													type: 'object',
													properties: {
														name: {
															type: 'string'
														},
														id: {
															type: 'string'
														}
													}
												}
											}
										},
										name: {
											type: 'string'
										},
										category: {
											type: 'string'
										}
									}
								}
							},
							collection_code: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE'
				},
				{
					operation_id: 'OBPv1.2.1-getOtherAccountPrivateAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getOtherAccountPrivateAlias'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					summary: 'Get Other Account Private Alias',
					description: '<p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Returns the private alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						alias: 'String'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow private alias access',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							alias: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyUrl'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
					summary: 'Add url to other bank account.',
					description: '<p>A url which represents the counterparty (home page url etc.)</p>\n',
					description_markdown: 'A url which represents the counterparty (home page url etc.)',
					example_request_body: {
						URL: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow adding a url',
						'URL cannot be added',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							URL: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url'
				},
				{
					operation_id: 'OBPv3.1.0-checkFundsAvailable',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'checkFundsAvailable'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/funds-available',
					summary: 'Check Available Funds',
					description: '<p>Check Available Funds<br />\nMandatory URL parameters:</p>\n<ul>\n<li>amount=NUMBER</li>\n<li>currency=STRING</li>\n</ul>\n',
					description_markdown: 'Check Available Funds\nMandatory URL parameters:\n\n* amount=NUMBER\n* currency=STRING\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						answer: 'yes',
						date: '2019-09-03T17:59:14Z',
						available_funds_request_id: 'c4ykz59svsr9b7fmdxk8ezs7'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-20054: Invalid amount. Please specify a valid value for amount.',
						'OBP-10003: Invalid Currency Value. It should be three letters ISO Currency Code. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Account',
						'Confirmation of Funds Service (PIIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							available_funds_request_id: {
								type: 'string'
							},
							date: {
								type: 'string',
								format: 'date-time'
							},
							answer: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/funds-available'
				},
				{
					operation_id: 'OBPv1.2.1-deleteTagForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteTagForViewOnTransaction'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags/TAG_ID',
					summary: 'Delete a tag.',
					description: '<p>Deletes the tag TAG_ID about the transaction TRANSACTION_ID made on <a href="#1_2_1-getViewsForBankAccount">view</a>.<br />\nAuthentication via OAuth is required. The user must either have owner privileges for this account,<br />\nor must be the user that posted the tag.</p>\n',
					description_markdown: 'Deletes the tag TAG_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\nAuthentication via OAuth is required. The user must either have owner privileges for this account, \nor must be the user that posted the tag.\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags/TAG_ID'
				},
				{
					operation_id: 'OBPv3.1.0-createUserAuthContext',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createUserAuthContext'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/users/USER_ID/auth-context',
					summary: 'Create User Auth Context',
					description: '<p>Create User Auth Context. These key value pairs will be propagated over connector to adapter. Normally used for mapping OBP user and<br />\nBank User/Customer.<br />\nAuthentication is Mandatory</p>\n',
					description_markdown: 'Create User Auth Context. These key value pairs will be propagated over connector to adapter. Normally used for mapping OBP user and \n Bank User/Customer. \nAuthentication is Mandatory\n',
					example_request_body: {
						key: 'CUSTOMER_NUMBER',
						value: '78987432'
					},
					success_response_body: {
						user_auth_context_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						key: 'CUSTOMER_NUMBER',
						value: '78987432'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30053: Could not insert the UserAuthContext',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							key: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							key: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							},
							user_auth_context_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/auth-context'
				},
				{
					operation_id: 'OBPv4.0.0-createTransactionRequestCounterparty',
					implemented_by: {
						version: 'OBPv4.0.0',
						'function': 'createTransactionRequestCounterparty'
					},
					request_verb: 'POST',
					request_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/COUNTERPARTY/transaction-requests',
					summary: 'Create Transaction Request (COUNTERPARTY)',
					description: '<p>Special instructions for COUNTERPARTY:</p>\n<p>When using a COUNTERPARTY to create a Transaction Request, specificy the counterparty_id in the body of the request.<br />\nThe routing details of the counterparty will be forwarded for the transfer.</p>\n<p>Initiate a Payment via creating a Transaction Request.</p>\n<p>In OBP, a <code>transaction request</code> may or may not result in a <code>transaction</code>. However, a <code>transaction</code> only has one possible state: completed.</p>\n<p>A <code>Transaction Request</code> can have one of several states.</p>\n<p><code>Transactions</code> are modeled on items in a bank statement that represent the movement of money.</p>\n<p><code>Transaction Requests</code> are requests to move money which may or may not succeeed and thus result in a <code>Transaction</code>.</p>\n<p>A <code>Transaction Request</code> might create a security challenge that needs to be answered before the <code>Transaction Request</code> proceeds.</p>\n<p>Transaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).</p>\n<p>Transaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.<br />\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.</p>\n<p>The payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.</p>\n<p>In sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.</p>\n<p>In sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.</p>\n<p>If a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.</p>\n<p>You can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.</p>\n<p>The following static FX rates are available in sandbox mode:</p>\n<p><a href="http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate">http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate</a></p>\n<p>Transaction Requests satisfy PSD2 requirements thus:</p>\n<p>1) A transaction can be initiated by a third party application.</p>\n<p>2) The customer is informed of the charge that will incurred.</p>\n<p>3) The call supports delegated authentication (OAuth)</p>\n<p>See <a href="https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py">this python code</a> for a complete example of this flow.</p>\n<p>There is further documentation <a href="https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests">here</a></p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\nSpecial instructions for COUNTERPARTY:\n\nWhen using a COUNTERPARTY to create a Transaction Request, specificy the counterparty_id in the body of the request.\nThe routing details of the counterparty will be forwarded for the transfer.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					example_request_body: {
						to: {
							counterparty_id: '123456'
						},
						value: {
							currency: 'EUR',
							amount: '10'
						},
						description: 'A description for the transaction to the counterparty',
						charge_policy: 'SHARED',
						future_date: '20881230'
					},
					success_response_body: {
						id: '4050046c-63b3-4868-8a22-14b4181d33a6',
						type: 'SANDBOX_TAN',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						details: {
							to_sandbox_tan: {
								bank_id: 'String',
								account_id: 'String'
							},
							to_sepa: {
								iban: 'String'
							},
							to_counterparty: {
								counterparty_id: 'String'
							},
							to_transfer_to_phone: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									mobile_phone_number: '+44 07972 444 876'
								}
							},
							to_transfer_to_atm: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									legal_name: 'Eveline Tripman',
									date_of_birth: '20181230',
									mobile_phone_number: '+44 07972 444 876',
									kyc_document: {
										type: 'String',
										number: 'String'
									}
								}
							},
							to_transfer_to_account: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								transfer_type: 'String',
								future_date: '20181230',
								to: {
									name: 'String',
									bank_code: 'String',
									branch_number: 'String',
									account: {
										number: 'String',
										iban: 'String'
									}
								}
							},
							to_sepa_credit_transfers: {
								debtorAccount: {
									iban: '12345'
								},
								instructedAmount: {
									currency: 'EUR',
									amount: '10'
								},
								creditorAccount: {
									iban: '54321'
								},
								creditorName: 'John Miles'
							},
							value: {
								currency: 'EUR',
								amount: '100'
							},
							description: 'String'
						},
						transaction_ids: [
							'902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
						],
						status: 'COMPLETED',
						start_date: '2017-09-19T00:00:00Z',
						end_date: '2017-09-19T00:00:00Z',
						challenge: {
							id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
							allowed_attempts: 3,
							challenge_type: 'SANDBOX_TAN'
						},
						charge: {
							summary: 'Rent the flat',
							value: {
								currency: 'EUR',
								amount: '10'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-40002: Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-40001: Invalid value for TRANSACTION_REQUEST_TYPE',
						'OBP-10001: Incorrect json format.',
						'OBP-10002: Invalid Number. Could not convert value to a number.',
						'OBP-40008: Can\'t send a payment with a value of 0 or less.',
						'OBP-40003: Transaction Request Currency must be the same as From Account Currency.',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							description: {
								type: 'string'
							},
							to: {
								type: 'object',
								properties: {
									counterparty_id: {
										type: 'string'
									}
								}
							},
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							charge_policy: {
								type: 'string'
							},
							future_date: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							challenge: {
								type: 'object',
								properties: {
									challenge_type: {
										type: 'string'
									},
									allowed_attempts: {
										type: 'integer'
									},
									id: {
										type: 'string'
									}
								}
							},
							status: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									summary: {
										type: 'string'
									}
								}
							},
							details: {
								type: 'object',
								properties: {
									to_sandbox_tan: {
										type: 'object',
										properties: {
											account_id: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											}
										}
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									to_sepa: {
										type: 'object',
										properties: {
											iban: {
												type: 'string'
											}
										}
									},
									description: {
										type: 'string'
									},
									to_transfer_to_atm: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													kyc_document: {
														type: 'object',
														properties: {
															number: {
																type: 'string'
															},
															type: {
																type: 'string'
															}
														}
													},
													mobile_phone_number: {
														type: 'string'
													},
													date_of_birth: {
														type: 'string'
													},
													legal_name: {
														type: 'string'
													}
												}
											}
										}
									},
									to_sepa_credit_transfers: {
										type: 'object',
										properties: {
											creditorName: {
												type: 'string'
											},
											creditorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											},
											instructedAmount: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											debtorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											}
										}
									},
									to_counterparty: {
										type: 'object',
										properties: {
											counterparty_id: {
												type: 'string'
											}
										}
									},
									to_transfer_to_phone: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													mobile_phone_number: {
														type: 'string'
													}
												}
											}
										}
									},
									to_transfer_to_account: {
										type: 'object',
										properties: {
											to: {
												type: 'object',
												properties: {
													account: {
														type: 'object',
														properties: {
															iban: {
																type: 'string'
															},
															number: {
																type: 'string'
															}
														}
													},
													branch_number: {
														type: 'string'
													},
													bank_code: {
														type: 'string'
													},
													name: {
														type: 'string'
													}
												}
											},
											transfer_type: {
												type: 'string'
											},
											description: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											future_date: {
												type: 'string'
											}
										}
									}
								}
							},
							end_date: {
								type: 'string',
								format: 'date-time'
							},
							start_date: {
								type: 'string',
								format: 'date-time'
							},
							transaction_ids: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/COUNTERPARTY/transaction-requests'
				},
				{
					operation_id: 'OBPv1.3.0-getCards',
					implemented_by: {
						version: 'OBPv1.3.0',
						'function': 'getCards'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.3.0/cards',
					summary: 'Get cards for the current user',
					description: '<p>Returns data about all the physical cards a user has been issued. These could be debit cards, credit cards, etc.</p>\n',
					description_markdown: 'Returns data about all the physical cards a user has been issued. These could be debit cards, credit cards, etc.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						cards: [{
							bank_id: 'GENODEM1GLS',
							bank_card_number: '364435172576215',
							name_on_card: 'String',
							issue_number: '1',
							serial_number: '1324234',
							valid_from_date: '2017-09-19T00:00:00Z',
							expires_date: '2017-09-19T00:00:00Z',
							enabled: true,
							cancelled: true,
							on_hot_list: true,
							technology: 'String',
							networks: [
								'String'
							],
							allows: [
								'String'
							],
							account: {
								id: '123',
								label: 'OBP',
								views_available: [{
									id: '123',
									short_name: 'short_name',
									description: 'description',
									is_public: true,
									alias: 'None',
									hide_metadata_if_alias_used: true,
									can_add_comment: true,
									can_add_corporate_location: true,
									can_add_image: true,
									can_add_image_url: true,
									can_add_more_info: true,
									can_add_open_corporates_url: true,
									can_add_physical_location: true,
									can_add_private_alias: true,
									can_add_public_alias: true,
									can_add_tag: true,
									can_add_url: true,
									can_add_where_tag: true,
									can_delete_comment: true,
									can_delete_corporate_location: true,
									can_delete_image: true,
									can_delete_physical_location: true,
									can_delete_tag: true,
									can_delete_where_tag: true,
									can_edit_owner_comment: true,
									can_see_bank_account_balance: true,
									can_see_bank_account_bank_name: true,
									can_see_bank_account_currency: true,
									can_see_bank_account_iban: true,
									can_see_bank_account_label: true,
									can_see_bank_account_national_identifier: true,
									can_see_bank_account_number: true,
									can_see_bank_account_owners: true,
									can_see_bank_account_swift_bic: true,
									can_see_bank_account_type: true,
									can_see_comments: true,
									can_see_corporate_location: true,
									can_see_image_url: true,
									can_see_images: true,
									can_see_more_info: true,
									can_see_open_corporates_url: true,
									can_see_other_account_bank_name: true,
									can_see_other_account_iban: true,
									can_see_other_account_kind: true,
									can_see_other_account_metadata: true,
									can_see_other_account_national_identifier: true,
									can_see_other_account_number: true,
									can_see_other_account_swift_bic: true,
									can_see_owner_comment: true,
									can_see_physical_location: true,
									can_see_private_alias: true,
									can_see_public_alias: true,
									can_see_tags: true,
									can_see_transaction_amount: true,
									can_see_transaction_balance: true,
									can_see_transaction_currency: true,
									can_see_transaction_description: true,
									can_see_transaction_finish_date: true,
									can_see_transaction_metadata: true,
									can_see_transaction_other_bank_account: true,
									can_see_transaction_start_date: true,
									can_see_transaction_this_bank_account: true,
									can_see_transaction_type: true,
									can_see_url: true,
									can_see_where_tag: true
								}],
								bank_id: 'GENODEM1GLS'
							},
							replacement: {
								requested_date: '2017-09-19T00:00:00Z',
								reason_requested: 'RENEW'
							},
							pin_reset: [{
								requested_date: '2017-09-19T00:00:00Z',
								reason_requested: 'FORGOT'
							}],
							collected: '2017-09-19T00:00:00Z',
							posted: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card',
						'User'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							cards: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										technology: {
											type: 'string'
										},
										name_on_card: {
											type: 'string'
										},
										bank_id: {
											type: 'string'
										},
										enabled: {
											type: 'boolean'
										},
										on_hot_list: {
											type: 'boolean'
										},
										replacement: {
											type: 'object',
											properties: {
												reason_requested: {
													type: 'string'
												},
												requested_date: {
													type: 'string',
													format: 'date-time'
												}
											}
										},
										networks: {
											type: 'array',
											items: {
												type: 'string'
											}
										},
										pin_reset: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													reason_requested: {
														type: 'string'
													},
													requested_date: {
														type: 'string',
														format: 'date-time'
													}
												}
											}
										},
										bank_card_number: {
											type: 'string'
										},
										valid_from_date: {
											type: 'string',
											format: 'date-time'
										},
										issue_number: {
											type: 'string'
										},
										serial_number: {
											type: 'string'
										},
										posted: {
											type: 'string',
											format: 'date-time'
										},
										cancelled: {
											type: 'boolean'
										},
										allows: {
											type: 'array',
											items: {
												type: 'string'
											}
										},
										collected: {
											type: 'string',
											format: 'date-time'
										},
										expires_date: {
											type: 'string',
											format: 'date-time'
										},
										account: {
											type: 'object',
											properties: {
												bank_id: {
													type: 'string'
												},
												views_available: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															can_see_other_account_swift_bic: {
																type: 'boolean'
															},
															can_see_where_tag: {
																type: 'boolean'
															},
															can_see_url: {
																type: 'boolean'
															},
															can_see_bank_account_swift_bic: {
																type: 'boolean'
															},
															can_see_tags: {
																type: 'boolean'
															},
															can_see_transaction_balance: {
																type: 'boolean'
															},
															can_delete_corporate_location: {
																type: 'boolean'
															},
															can_add_image_url: {
																type: 'boolean'
															},
															can_see_public_alias: {
																type: 'boolean'
															},
															can_add_comment: {
																type: 'boolean'
															},
															description: {
																type: 'string'
															},
															can_see_corporate_location: {
																type: 'boolean'
															},
															can_see_other_account_bank_name: {
																type: 'boolean'
															},
															can_see_more_info: {
																type: 'boolean'
															},
															can_see_physical_location: {
																type: 'boolean'
															},
															can_edit_owner_comment: {
																type: 'boolean'
															},
															can_see_private_alias: {
																type: 'boolean'
															},
															can_see_bank_account_balance: {
																type: 'boolean'
															},
															can_add_public_alias: {
																type: 'boolean'
															},
															can_see_bank_account_owners: {
																type: 'boolean'
															},
															can_see_other_account_metadata: {
																type: 'boolean'
															},
															can_delete_physical_location: {
																type: 'boolean'
															},
															hide_metadata_if_alias_used: {
																type: 'boolean'
															},
															can_see_transaction_this_bank_account: {
																type: 'boolean'
															},
															can_see_image_url: {
																type: 'boolean'
															},
															can_see_transaction_type: {
																type: 'boolean'
															},
															can_see_images: {
																type: 'boolean'
															},
															can_see_transaction_amount: {
																type: 'boolean'
															},
															can_see_transaction_metadata: {
																type: 'boolean'
															},
															id: {
																type: 'string'
															},
															can_see_comments: {
																type: 'boolean'
															},
															can_see_other_account_iban: {
																type: 'boolean'
															},
															can_add_image: {
																type: 'boolean'
															},
															can_see_bank_account_type: {
																type: 'boolean'
															},
															can_see_other_account_kind: {
																type: 'boolean'
															},
															can_see_bank_account_currency: {
																type: 'boolean'
															},
															can_add_where_tag: {
																type: 'boolean'
															},
															can_see_transaction_start_date: {
																type: 'boolean'
															},
															can_see_bank_account_label: {
																type: 'boolean'
															},
															can_add_private_alias: {
																type: 'boolean'
															},
															can_see_transaction_currency: {
																type: 'boolean'
															},
															can_add_more_info: {
																type: 'boolean'
															},
															can_delete_comment: {
																type: 'boolean'
															},
															can_see_transaction_other_bank_account: {
																type: 'boolean'
															},
															can_see_bank_account_number: {
																type: 'boolean'
															},
															can_add_corporate_location: {
																type: 'boolean'
															},
															can_add_url: {
																type: 'boolean'
															},
															short_name: {
																type: 'string'
															},
															can_delete_where_tag: {
																type: 'boolean'
															},
															is_public: {
																type: 'boolean'
															},
															can_see_owner_comment: {
																type: 'boolean'
															},
															can_see_transaction_finish_date: {
																type: 'boolean'
															},
															can_see_open_corporates_url: {
																type: 'boolean'
															},
															can_add_physical_location: {
																type: 'boolean'
															},
															can_see_bank_account_iban: {
																type: 'boolean'
															},
															can_see_other_account_national_identifier: {
																type: 'boolean'
															},
															can_delete_image: {
																type: 'boolean'
															},
															can_add_tag: {
																type: 'boolean'
															},
															can_add_open_corporates_url: {
																type: 'boolean'
															},
															can_delete_tag: {
																type: 'boolean'
															},
															can_see_transaction_description: {
																type: 'boolean'
															},
															can_see_bank_account_national_identifier: {
																type: 'boolean'
															},
															can_see_other_account_number: {
																type: 'boolean'
															},
															can_see_bank_account_bank_name: {
																type: 'boolean'
															},
															alias: {
																type: 'string'
															}
														}
													}
												},
												label: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/cards'
				},
				{
					operation_id: 'OBPv2.0.0-addKycDocument',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'addKycDocument'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_documents/KYC_DOCUMENT_ID',
					summary: 'Add KYC Document.',
					description: '<p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc.</p>\n',
					description_markdown: 'Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc. ',
					example_request_body: {
						customer_number: '5987953',
						type: 'passport',
						number: '12345',
						issue_date: '2017-09-19T00:00:00Z',
						issue_place: 'Berlin',
						expiry_date: '2017-09-19T00:00:00Z'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						id: 'PlaceholderString',
						customer_number: '5987953',
						type: 'PlaceholderString',
						number: 'PlaceholderString',
						issue_date: '2017-09-19T00:00:00Z',
						issue_place: 'PlaceholderString',
						expiry_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'Server error: could not add KycDocument',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							issue_place: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							expiry_date: {
								type: 'string',
								format: 'date-time'
							},
							type: {
								type: 'string'
							},
							number: {
								type: 'string'
							},
							issue_date: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							issue_place: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							number: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							expiry_date: {
								type: 'string',
								format: 'date-time'
							},
							id: {
								type: 'string'
							},
							issue_date: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_documents/KYC_DOCUMENT_ID'
				},
				{
					operation_id: 'OBPv3.1.0-getUserAuthContexts',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getUserAuthContexts'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/users/USER_ID/auth-context',
					summary: 'Get User Auth Contexts',
					description: '<p>Get User Auth Contexts for a User.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get User Auth Contexts for a User.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						user_auth_contexts: [{
							user_auth_context_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							key: 'CUSTOMER_NUMBER',
							value: '78987432'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-30053: Could not insert the UserAuthContext',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user_auth_contexts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										key: {
											type: 'string'
										},
										user_id: {
											type: 'string'
										},
										user_auth_context_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanGetUserAuthContext',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/auth-context'
				},
				{
					operation_id: 'OBPv1.2.1-removePermissionForUserForBankAccountForAllViews',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'removePermissionForUserForBankAccountForAllViews'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views',
					summary: 'Revoke access to all Views on Account',
					description: '<p>&quot;Revokes access to all Views on an Account for a certain User.</p>\n<p>The User is identified by PROVIDER_ID at their PROVIDER.</p>\n<p>The Account is specified by BANK_ID and ACCOUNT_ID.</p>\n<p>The View is specified by VIEW_ID.</p>\n<p>PROVIDER (may be a URL so) must be URL Encoded.</p>\n<p>PROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.</p>\n<p>Attempting to revoke access to a public view will return an error message.</p>\n<p>An Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.</p>\n',
					description_markdown: '"Revokes access to all Views on an Account for a certain User.\n\n\nThe User is identified by PROVIDER_ID at their PROVIDER.\n\nThe Account is specified by BANK_ID and ACCOUNT_ID.\n\nThe View is specified by VIEW_ID.\n\n\nPROVIDER (may be a URL so) must be URL Encoded.\n\nPROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.\n\nAttempting to revoke access to a public view will return an error message.\n\nAn Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.\n\n      \n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.',
						'user does not have access to owner view on account'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'User',
						'OwnerViewRequired'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views'
				},
				{
					operation_id: 'OBPv3.0.0-getOtherAccountByIdForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getOtherAccountByIdForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID',
					summary: 'Get Other Account by Id.',
					description: '<p>Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.<br />\nAuthentication is Optional</p>\n<p>Authentication is required if the view is not public.</p>\n',
					description_markdown: 'Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.\nAuthentication is Optional\n\nAuthentication is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						holder: {
							name: 'OBP',
							is_alias: true
						},
						bank_routing: {
							scheme: 'Bank_ID',
							address: 'gh.29.uk'
						},
						account_routings: [{
							scheme: 'AccountNumber',
							address: '4930396'
						}],
						metadata: {
							public_alias: 'NONE',
							private_alias: 'NONE',
							more_info: 'www.openbankproject.com',
							URL: 'www.openbankproject.com',
							image_URL: 'www.openbankproject.com',
							open_corporates_URL: 'www.openbankproject.com',
							corporate_location: {
								latitude: 1.231,
								longitude: 1.231,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							},
							physical_location: {
								latitude: 1.231,
								longitude: 1.231,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									provider: 'http://127.0.0.1:8080',
									display_name: 'OBP'
								}
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Counterparty',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							holder: {
								type: 'object',
								properties: {
									is_alias: {
										type: 'boolean'
									},
									name: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							},
							metadata: {
								type: 'object',
								properties: {
									image_URL: {
										type: 'string'
									},
									URL: {
										type: 'string'
									},
									open_corporates_URL: {
										type: 'string'
									},
									physical_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													display_name: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									public_alias: {
										type: 'string'
									},
									corporate_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													display_name: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									private_alias: {
										type: 'string'
									},
									more_info: {
										type: 'string'
									}
								}
							},
							account_routings: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										address: {
											type: 'string'
										},
										scheme: {
											type: 'string'
										}
									}
								}
							},
							bank_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID'
				},
				{
					operation_id: 'OBPv2.0.0-createUser',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'createUser'
					},
					request_verb: 'POST',
					request_url: '/obp/v2.0.0/users',
					summary: 'Create User.',
					description: '<p>Creates OBP user.<br />\nNo authorisation (currently) required.</p>\n<p>Mimics current webform to Register.</p>\n<p>Requires username(email) and password.</p>\n<p>Returns 409 error if username not unique.</p>\n<p>May require validation of email address.</p>\n',
					description_markdown: 'Creates OBP user.\n No authorisation (currently) required.\n\n Mimics current webform to Register.\n\n Requires username(email) and password.\n\n Returns 409 error if username not unique.\n\n May require validation of email address.\n\n',
					example_request_body: {
						email: 'eveline@example.com',
						username: 'felixsmith',
						password: 'String',
						first_name: 'Simon',
						last_name: 'Redfern'
					},
					success_response_body: {
						user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						email: 'eveline@example.com',
						provider_id: 'Chris',
						provider: 'http://127.0.0.1:8080',
						username: 'felixsmith',
						entitlements: {
							list: [{
								entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
								role_name: 'CanQueryOtherUser',
								bank_id: 'GENODEM1GLS'
							}]
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30207: Invalid Password Format. Your password should EITHER be at least 10 characters long and contain mixed numbers and both upper and lower case letters and at least one special character, OR be longer than 16 characters.',
						'Error occurred during user creation.',
						'User with the same username already exists.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'Onboarding'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							email: {
								type: 'string'
							},
							first_name: {
								type: 'string'
							},
							password: {
								type: 'string'
							},
							username: {
								type: 'string'
							},
							last_name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							entitlements: {
								type: 'object',
								properties: {
									list: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												bank_id: {
													type: 'string'
												},
												role_name: {
													type: 'string'
												},
												entitlement_id: {
													type: 'string'
												}
											}
										}
									}
								}
							},
							provider: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							provider_id: {
								type: 'string'
							},
							username: {
								type: 'string'
							},
							user_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyPublicAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyPublicAlias'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					summary: 'Add public alias to other bank account.',
					description: '<p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n<p>Note: Public aliases are automatically generated for new \'other accounts / counterparties\', so this call should only be used if<br />\nthe public alias was deleted.</p>\n<p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p>\n',
					description_markdown: 'Creates the public alias for the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n\nNote: Public aliases are automatically generated for new \'other accounts / counterparties\', so this call should only be used if\nthe public alias was deleted.\n\nThe VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.',
					example_request_body: {
						alias: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.',
						'the view does not allow metadata access',
						'the view does not allow adding a public alias',
						'Alias cannot be added',
						'public alias added'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							alias: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyUrl'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
					summary: 'Update url of other bank account.',
					description: '<p>A url which represents the counterparty (home page url etc.)</p>\n',
					description_markdown: 'A url which represents the counterparty (home page url etc.)',
					example_request_body: {
						URL: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'URL cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							URL: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url'
				},
				{
					operation_id: 'OBPv3.1.0-deleteProductAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'deleteProductAttribute'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
					summary: 'Delete Product Attribute',
					description: '<p>Delete Product Attribute</p>\n<p>Product Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Product Attribute is linked to its Product by PRODUCT_CODE</p>\n<p>Delete a Product Attribute by its id.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Delete Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nDelete a Product Attribute by its id.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Product',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerCreditRatingAndSource',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerCreditRatingAndSource'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-rating-and-source',
					summary: 'Update the credit rating and source of a Customer',
					description: '<p>Update the credit rating and source of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the credit rating and source of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						credit_rating: 'Good',
						credit_source: 'Bank'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							credit_source: {
								type: 'string'
							},
							credit_rating: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerCreditRatingAndSource',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-rating-and-source'
				},
				{
					operation_id: 'OBPv1.2.1-removePermissionForUserForBankAccountForOneView',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'removePermissionForUserForBankAccountForOneView'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID',
					summary: 'Revoke access to one View.',
					description: '<p>Revokes access to a View on an Account for a certain User.</p>\n<p>The User is identified by PROVIDER_ID at their PROVIDER.</p>\n<p>The Account is specified by BANK_ID and ACCOUNT_ID.</p>\n<p>The View is specified by VIEW_ID.</p>\n<p>PROVIDER (may be a URL so) must be URL Encoded.</p>\n<p>PROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.</p>\n<p>Attempting to revoke access to a public view will return an error message.</p>\n<p>An Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.</p>\n',
					description_markdown: 'Revokes access to a View on an Account for a certain User.\n\n\nThe User is identified by PROVIDER_ID at their PROVIDER.\n\nThe Account is specified by BANK_ID and ACCOUNT_ID.\n\nThe View is specified by VIEW_ID.\n\n\nPROVIDER (may be a URL so) must be URL Encoded.\n\nPROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.\n\nAttempting to revoke access to a public view will return an error message.\n\nAn Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.\n\n      \n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'could not save the privilege',
						'user does not have access to owner view on account',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'User',
						'Entitlement',
						'OwnerViewRequired'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerNumber',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerNumber'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/number',
					summary: 'Update the number of a Customer',
					description: '<p>Update the number of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the number of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						customer_number: '5987953'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							customer_number: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerNumber',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/number'
				},
				{
					operation_id: 'OBPv3.1.0-saveHistoricalTransaction',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'saveHistoricalTransaction'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/management/historical/transactions ',
					summary: 'Save Historical Transactions ',
					description: '<p>Import the historical transactions.</p>\n',
					description_markdown: '\nImport the historical transactions.\n       ',
					example_request_body: {
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						to: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						value: {
							currency: 'EUR',
							amount: '10'
						},
						description: 'this is for work',
						posted: '2017-09-19T02:31:05Z',
						completed: '2017-09-19T02:31:05Z',
						type: 'SANDBOX_TAN',
						charge_policy: 'SHARED'
					},
					success_response_body: {
						transaction_id: '123',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						to: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						value: {
							currency: 'EUR',
							amount: '10'
						},
						description: 'this is for work',
						posted: '2017-09-19T00:00:00Z',
						completed: '2017-09-19T00:00:00Z',
						transaction_request_type: 'SANDBOX_TAN',
						charge_policy: 'SHARED'
					},
					error_response_bodies: [
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-10002: Invalid Number. Could not convert value to a number.',
						'OBP-40008: Can\'t send a payment with a value of 0 or less.',
						'OBP-40003: Transaction Request Currency must be the same as From Account Currency.',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Transaction-Request'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							posted: {
								type: 'string'
							},
							to: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							completed: {
								type: 'string'
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							charge_policy: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							description: {
								type: 'string'
							},
							completed: {
								type: 'string',
								format: 'date-time'
							},
							transaction_id: {
								type: 'string'
							},
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							transaction_request_type: {
								type: 'string'
							},
							to: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							charge_policy: {
								type: 'string'
							},
							posted: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					roles: [{
						role: 'CanCreateHistoricalTransaction',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/historical/transactions '
				},
				{
					operation_id: 'OBPv4.0.0-createTransactionRequestAccount',
					implemented_by: {
						version: 'OBPv4.0.0',
						'function': 'createTransactionRequestAccount'
					},
					request_verb: 'POST',
					request_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT/transaction-requests',
					summary: 'Create Transaction Request (ACCOUNT)',
					description: '<p>When using ACCOUNT, the payee is set in the request body.</p>\n<p>Money goes into the BANK_ID and ACCOUNT_ID specified in the request body.</p>\n<p>Initiate a Payment via creating a Transaction Request.</p>\n<p>In OBP, a <code>transaction request</code> may or may not result in a <code>transaction</code>. However, a <code>transaction</code> only has one possible state: completed.</p>\n<p>A <code>Transaction Request</code> can have one of several states.</p>\n<p><code>Transactions</code> are modeled on items in a bank statement that represent the movement of money.</p>\n<p><code>Transaction Requests</code> are requests to move money which may or may not succeeed and thus result in a <code>Transaction</code>.</p>\n<p>A <code>Transaction Request</code> might create a security challenge that needs to be answered before the <code>Transaction Request</code> proceeds.</p>\n<p>Transaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).</p>\n<p>Transaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.<br />\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.</p>\n<p>The payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.</p>\n<p>In sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.</p>\n<p>In sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.</p>\n<p>If a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.</p>\n<p>You can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.</p>\n<p>The following static FX rates are available in sandbox mode:</p>\n<p><a href="http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate">http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate</a></p>\n<p>Transaction Requests satisfy PSD2 requirements thus:</p>\n<p>1) A transaction can be initiated by a third party application.</p>\n<p>2) The customer is informed of the charge that will incurred.</p>\n<p>3) The call supports delegated authentication (OAuth)</p>\n<p>See <a href="https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py">this python code</a> for a complete example of this flow.</p>\n<p>There is further documentation <a href="https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests">here</a></p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'When using ACCOUNT, the payee is set in the request body.\n\nMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					example_request_body: {
						to: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						value: {
							currency: 'EUR',
							amount: '10'
						},
						description: 'this is for work'
					},
					success_response_body: {
						id: '4050046c-63b3-4868-8a22-14b4181d33a6',
						type: 'SANDBOX_TAN',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						details: {
							to_sandbox_tan: {
								bank_id: 'String',
								account_id: 'String'
							},
							to_sepa: {
								iban: 'String'
							},
							to_counterparty: {
								counterparty_id: 'String'
							},
							to_transfer_to_phone: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									mobile_phone_number: '+44 07972 444 876'
								}
							},
							to_transfer_to_atm: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									legal_name: 'Eveline Tripman',
									date_of_birth: '20181230',
									mobile_phone_number: '+44 07972 444 876',
									kyc_document: {
										type: 'String',
										number: 'String'
									}
								}
							},
							to_transfer_to_account: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								transfer_type: 'String',
								future_date: '20181230',
								to: {
									name: 'String',
									bank_code: 'String',
									branch_number: 'String',
									account: {
										number: 'String',
										iban: 'String'
									}
								}
							},
							to_sepa_credit_transfers: {
								debtorAccount: {
									iban: '12345'
								},
								instructedAmount: {
									currency: 'EUR',
									amount: '10'
								},
								creditorAccount: {
									iban: '54321'
								},
								creditorName: 'John Miles'
							},
							value: {
								currency: 'EUR',
								amount: '100'
							},
							description: 'String'
						},
						transaction_ids: [
							'902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
						],
						status: 'COMPLETED',
						start_date: '2017-09-19T00:00:00Z',
						end_date: '2017-09-19T00:00:00Z',
						challenge: {
							id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
							allowed_attempts: 3,
							challenge_type: 'SANDBOX_TAN'
						},
						charge: {
							summary: 'Rent the flat',
							value: {
								currency: 'EUR',
								amount: '10'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-40002: Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-40001: Invalid value for TRANSACTION_REQUEST_TYPE',
						'OBP-10001: Incorrect json format.',
						'OBP-10002: Invalid Number. Could not convert value to a number.',
						'OBP-40008: Can\'t send a payment with a value of 0 or less.',
						'OBP-40003: Transaction Request Currency must be the same as From Account Currency.',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							description: {
								type: 'string'
							},
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							to: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							challenge: {
								type: 'object',
								properties: {
									challenge_type: {
										type: 'string'
									},
									allowed_attempts: {
										type: 'integer'
									},
									id: {
										type: 'string'
									}
								}
							},
							status: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									summary: {
										type: 'string'
									}
								}
							},
							details: {
								type: 'object',
								properties: {
									to_sandbox_tan: {
										type: 'object',
										properties: {
											account_id: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											}
										}
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									to_sepa: {
										type: 'object',
										properties: {
											iban: {
												type: 'string'
											}
										}
									},
									description: {
										type: 'string'
									},
									to_transfer_to_atm: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													kyc_document: {
														type: 'object',
														properties: {
															number: {
																type: 'string'
															},
															type: {
																type: 'string'
															}
														}
													},
													mobile_phone_number: {
														type: 'string'
													},
													date_of_birth: {
														type: 'string'
													},
													legal_name: {
														type: 'string'
													}
												}
											}
										}
									},
									to_sepa_credit_transfers: {
										type: 'object',
										properties: {
											creditorName: {
												type: 'string'
											},
											creditorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											},
											instructedAmount: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											debtorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											}
										}
									},
									to_counterparty: {
										type: 'object',
										properties: {
											counterparty_id: {
												type: 'string'
											}
										}
									},
									to_transfer_to_phone: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													mobile_phone_number: {
														type: 'string'
													}
												}
											}
										}
									},
									to_transfer_to_account: {
										type: 'object',
										properties: {
											to: {
												type: 'object',
												properties: {
													account: {
														type: 'object',
														properties: {
															iban: {
																type: 'string'
															},
															number: {
																type: 'string'
															}
														}
													},
													branch_number: {
														type: 'string'
													},
													bank_code: {
														type: 'string'
													},
													name: {
														type: 'string'
													}
												}
											},
											transfer_type: {
												type: 'string'
											},
											description: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											future_date: {
												type: 'string'
											}
										}
									}
								}
							},
							end_date: {
								type: 'string',
								format: 'date-time'
							},
							start_date: {
								type: 'string',
								format: 'date-time'
							},
							transaction_ids: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT/transaction-requests'
				},
				{
					operation_id: 'OBPv3.1.0-getBadLoginStatus',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getBadLoginStatus'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/users/USERNAME/lock-status',
					summary: 'Get User Lock Status',
					description: '<p>Get User Login Status.<br />\nAuthentication is Mandatory</p>\n',
					description_markdown: '\nGet User Login Status.\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						username: 'felixsmith',
						bad_attempts_since_last_success_or_reset: 0,
						last_failure_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20027: User not found by username.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							last_failure_date: {
								type: 'string',
								format: 'date-time'
							},
							bad_attempts_since_last_success_or_reset: {
								type: 'integer'
							},
							username: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanReadUserLockedStatus',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USERNAME/lock-status'
				},
				{
					operation_id: 'OBPv2.0.0-getPermissionsForBankAccount',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getPermissionsForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions',
					summary: 'Get access.',
					description: '<p>Returns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.</p>\n<p>Authentication is Mandatory<br />\nand the user needs to have access to the owner view.</p>\n',
					description_markdown: 'Returns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.\n\nAuthentication is Mandatory\nand the user needs to have access to the owner view.\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						permissions: [{
							user: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								provider: 'http://127.0.0.1:8080',
								display_name: 'OBP'
							},
							views: [{
								id: '123',
								short_name: 'short_name',
								description: 'description',
								is_public: true,
								alias: 'None',
								hide_metadata_if_alias_used: true,
								can_add_comment: true,
								can_add_corporate_location: true,
								can_add_image: true,
								can_add_image_url: true,
								can_add_more_info: true,
								can_add_open_corporates_url: true,
								can_add_physical_location: true,
								can_add_private_alias: true,
								can_add_public_alias: true,
								can_add_tag: true,
								can_add_url: true,
								can_add_where_tag: true,
								can_delete_comment: true,
								can_delete_corporate_location: true,
								can_delete_image: true,
								can_delete_physical_location: true,
								can_delete_tag: true,
								can_delete_where_tag: true,
								can_edit_owner_comment: true,
								can_see_bank_account_balance: true,
								can_see_bank_account_bank_name: true,
								can_see_bank_account_currency: true,
								can_see_bank_account_iban: true,
								can_see_bank_account_label: true,
								can_see_bank_account_national_identifier: true,
								can_see_bank_account_number: true,
								can_see_bank_account_owners: true,
								can_see_bank_account_swift_bic: true,
								can_see_bank_account_type: true,
								can_see_comments: true,
								can_see_corporate_location: true,
								can_see_image_url: true,
								can_see_images: true,
								can_see_more_info: true,
								can_see_open_corporates_url: true,
								can_see_other_account_bank_name: true,
								can_see_other_account_iban: true,
								can_see_other_account_kind: true,
								can_see_other_account_metadata: true,
								can_see_other_account_national_identifier: true,
								can_see_other_account_number: true,
								can_see_other_account_swift_bic: true,
								can_see_owner_comment: true,
								can_see_physical_location: true,
								can_see_private_alias: true,
								can_see_public_alias: true,
								can_see_tags: true,
								can_see_transaction_amount: true,
								can_see_transaction_balance: true,
								can_see_transaction_currency: true,
								can_see_transaction_description: true,
								can_see_transaction_finish_date: true,
								can_see_transaction_metadata: true,
								can_see_transaction_other_bank_account: true,
								can_see_transaction_start_date: true,
								can_see_transaction_this_bank_account: true,
								can_see_transaction_type: true,
								can_see_url: true,
								can_see_where_tag: true
							}]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'User',
						'Entitlement'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							permissions: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										views: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													can_see_other_account_swift_bic: {
														type: 'boolean'
													},
													can_see_where_tag: {
														type: 'boolean'
													},
													can_see_url: {
														type: 'boolean'
													},
													can_see_bank_account_swift_bic: {
														type: 'boolean'
													},
													can_see_tags: {
														type: 'boolean'
													},
													can_see_transaction_balance: {
														type: 'boolean'
													},
													can_delete_corporate_location: {
														type: 'boolean'
													},
													can_add_image_url: {
														type: 'boolean'
													},
													can_see_public_alias: {
														type: 'boolean'
													},
													can_add_comment: {
														type: 'boolean'
													},
													description: {
														type: 'string'
													},
													can_see_corporate_location: {
														type: 'boolean'
													},
													can_see_other_account_bank_name: {
														type: 'boolean'
													},
													can_see_more_info: {
														type: 'boolean'
													},
													can_see_physical_location: {
														type: 'boolean'
													},
													can_edit_owner_comment: {
														type: 'boolean'
													},
													can_see_private_alias: {
														type: 'boolean'
													},
													can_see_bank_account_balance: {
														type: 'boolean'
													},
													can_add_public_alias: {
														type: 'boolean'
													},
													can_see_bank_account_owners: {
														type: 'boolean'
													},
													can_see_other_account_metadata: {
														type: 'boolean'
													},
													can_delete_physical_location: {
														type: 'boolean'
													},
													hide_metadata_if_alias_used: {
														type: 'boolean'
													},
													can_see_transaction_this_bank_account: {
														type: 'boolean'
													},
													can_see_image_url: {
														type: 'boolean'
													},
													can_see_transaction_type: {
														type: 'boolean'
													},
													can_see_images: {
														type: 'boolean'
													},
													can_see_transaction_amount: {
														type: 'boolean'
													},
													can_see_transaction_metadata: {
														type: 'boolean'
													},
													id: {
														type: 'string'
													},
													can_see_comments: {
														type: 'boolean'
													},
													can_see_other_account_iban: {
														type: 'boolean'
													},
													can_add_image: {
														type: 'boolean'
													},
													can_see_bank_account_type: {
														type: 'boolean'
													},
													can_see_other_account_kind: {
														type: 'boolean'
													},
													can_see_bank_account_currency: {
														type: 'boolean'
													},
													can_add_where_tag: {
														type: 'boolean'
													},
													can_see_transaction_start_date: {
														type: 'boolean'
													},
													can_see_bank_account_label: {
														type: 'boolean'
													},
													can_add_private_alias: {
														type: 'boolean'
													},
													can_see_transaction_currency: {
														type: 'boolean'
													},
													can_add_more_info: {
														type: 'boolean'
													},
													can_delete_comment: {
														type: 'boolean'
													},
													can_see_transaction_other_bank_account: {
														type: 'boolean'
													},
													can_see_bank_account_number: {
														type: 'boolean'
													},
													can_add_corporate_location: {
														type: 'boolean'
													},
													can_add_url: {
														type: 'boolean'
													},
													short_name: {
														type: 'string'
													},
													can_delete_where_tag: {
														type: 'boolean'
													},
													is_public: {
														type: 'boolean'
													},
													can_see_owner_comment: {
														type: 'boolean'
													},
													can_see_transaction_finish_date: {
														type: 'boolean'
													},
													can_see_open_corporates_url: {
														type: 'boolean'
													},
													can_add_physical_location: {
														type: 'boolean'
													},
													can_see_bank_account_iban: {
														type: 'boolean'
													},
													can_see_other_account_national_identifier: {
														type: 'boolean'
													},
													can_delete_image: {
														type: 'boolean'
													},
													can_add_tag: {
														type: 'boolean'
													},
													can_add_open_corporates_url: {
														type: 'boolean'
													},
													can_delete_tag: {
														type: 'boolean'
													},
													can_see_transaction_description: {
														type: 'boolean'
													},
													can_see_bank_account_national_identifier: {
														type: 'boolean'
													},
													can_see_other_account_number: {
														type: 'boolean'
													},
													can_see_bank_account_bank_name: {
														type: 'boolean'
													},
													alias: {
														type: 'string'
													}
												}
											}
										},
										user: {
											type: 'object',
											properties: {
												display_name: {
													type: 'string'
												},
												provider: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions'
				},
				{
					operation_id: 'OBPv3.0.0-getAccountsHeld',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getAccountsHeld'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held',
					summary: 'Get Accounts Held',
					description: '<p>Get Accounts held by the current User if even the User has not been assigned the owner View yet.</p>\n<p>Can be used to onboard the account to the API - since all other account and transaction endpoints require views to be assigned.</p>\n<p>optional request parameters:</p>\n<ul>\n<li>account_type_filter: one or many accountType value, split by comma</li>\n<li>account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE</li>\n</ul>\n<p>whole url example:<br />\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held?account_type_filter=330,CURRENT+PLUS&amp;account_type_filter_operation=INCLUDE</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get Accounts held by the current User if even the User has not been assigned the owner View yet.\n\nCan be used to onboard the account to the API - since all other account and transaction endpoints require views to be assigned.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '12314',
							bank_id: '123',
							number: '123',
							account_routings: [{
								scheme: 'AccountNumber',
								address: '4930396'
							}]
						}]
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Account',
						'Account Information Service (AIS)',
						'View',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										account_routings: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													address: {
														type: 'string'
													},
													scheme: {
														type: 'string'
													}
												}
											}
										},
										number: {
											type: 'string'
										},
										bank_id: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held'
				},
				{
					operation_id: 'OBPv1.2.1-getImagesForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getImagesForViewOnTransaction'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images',
					summary: 'Get images.',
					description: '<p>Returns the transaction TRANSACTION_ID images made on a <a href="#1_2_1-getViewsForBankAccount">view</a> (VIEW_ID).<br />\nAuthentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Returns the transaction TRANSACTION_ID images made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n         Authentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						images: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							label: 'NONE',
							URL: 'www.openbankproject.com',
							date: '2017-09-19T00:00:00Z',
							user: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								provider: 'http://127.0.0.1:8080',
								display_name: 'OBP'
							}
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							images: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										date: {
											type: 'string',
											format: 'date-time'
										},
										URL: {
											type: 'string'
										},
										id: {
											type: 'string'
										},
										user: {
											type: 'object',
											properties: {
												display_name: {
													type: 'string'
												},
												provider: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										},
										label: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images'
				},
				{
					operation_id: 'OBPv3.1.0-createAccountWebhook',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createAccountWebhook'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
					summary: 'Create an Account Webhook',
					description: '<p>Create an Account Webhook</p>\n<p>Webhooks are used to call external URLs when certain events happen.</p>\n<p>Account Webhooks focus on events around accounts.</p>\n<p>For instance, a webhook could be used to notify an external service if a balance changes on an account.</p>\n<p>This functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange</p>\n',
					description_markdown: 'Create an Account Webhook\n\nWebhooks are used to call external URLs when certain events happen.\n\nAccount Webhooks focus on events around accounts.\n\nFor instance, a webhook could be used to notify an external service if a balance changes on an account.\n\nThis functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange\n',
					example_request_body: {
						account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						trigger_name: 'OnBalanceChange',
						url: 'https://localhost.openbankproject.com',
						http_method: 'POST',
						http_protocol: 'HTTP/1.1',
						is_active: 'true'
					},
					success_response_body: {
						account_webhook_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						bank_id: 'GENODEM1GLS',
						account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						trigger_name: 'OnBalanceChange',
						url: 'https://localhost.openbankproject.com',
						http_method: 'POST',
						http_protocol: 'HTTP/1.1',
						created_by_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						is_active: true
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Webhook',
						'Bank',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							http_method: {
								type: 'string'
							},
							is_active: {
								type: 'string'
							},
							http_protocol: {
								type: 'string'
							},
							trigger_name: {
								type: 'string'
							},
							account_id: {
								type: 'string'
							},
							url: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							created_by_user_id: {
								type: 'string'
							},
							http_method: {
								type: 'string'
							},
							is_active: {
								type: 'boolean'
							},
							http_protocol: {
								type: 'string'
							},
							account_webhook_id: {
								type: 'string'
							},
							trigger_name: {
								type: 'string'
							},
							account_id: {
								type: 'string'
							},
							url: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateWebhook',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyCorporateLocation',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyCorporateLocation'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
					summary: 'Add Corporate Location to Counterparty',
					description: '<p>Add the geolocation of the counterparty\'s registered address</p>\n',
					description_markdown: 'Add the geolocation of the counterparty\'s registered address',
					example_request_body: {
						corporate_location: {
							latitude: 1.532,
							longitude: 1.535
						}
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow adding a corporate location',
						'Coordinates not possible',
						'Corporate Location cannot be deleted',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							corporate_location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location'
				},
				{
					operation_id: 'OBPv3.1.0-getAllEntitlements',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getAllEntitlements'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/entitlements',
					summary: 'Get all Entitlements',
					description: '<p>Login is required.</p>\n<p>Possible filter on the role field:</p>\n<p>eg: /entitlements?role=CanGetCustomer</p>\n',
					description_markdown: '\n\nLogin is required.\n\nPossible filter on the role field:\n\neg: /entitlements?role=CanGetCustomer\n\n\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						list: [{
							entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
							role_name: 'CanQueryOtherUser',
							bank_id: 'GENODEM1GLS'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20050: Current User is not a Super Admin!',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							list: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										role_name: {
											type: 'string'
										},
										entitlement_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/entitlements'
				},
				{
					operation_id: 'OBPv2.1.0-getEntitlementsByBankAndUser',
					implemented_by: {
						version: 'OBPv2.1.0',
						'function': 'getEntitlementsByBankAndUser'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/USER_ID/entitlements',
					summary: 'Get Entitlements for User at Bank.',
					description: '<p>Get Entitlements specified by BANK_ID and USER_ID</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\nGet Entitlements specified by BANK_ID and USER_ID\n\nAuthentication is Mandatory\n\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						list: [{
							entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
							role_name: 'CanQueryOtherUser',
							bank_id: 'GENODEM1GLS'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							list: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										role_name: {
											type: 'string'
										},
										entitlement_id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					roles: [{
							role: 'CanGetEntitlementsForAnyUserAtOneBank',
							requires_bank_id: true
						},
						{
							role: 'CanGetEntitlementsForAnyUserAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/USER_ID/entitlements'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerIdentity',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerIdentity'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/identity',
					summary: 'Update the identity data of a Customer',
					description: '<p>Update the identity data of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the identity data of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						legal_name: 'Eveline Tripman',
						date_of_birth: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						name_suffix: 'Sr'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							name_suffix: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							legal_name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerIdentity',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/identity'
				},
				{
					operation_id: 'OBPv3.1.0-refreshUser',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'refreshUser'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/users/USER_ID/refresh',
					summary: 'Refresh User.',
					description: '<p>The endpoint is used for updating the accounts, views, account holders for the user.<br />\nAs to the Json body, you can leave it as Empty.<br />\nThis call will get data from backend, no need to prepare the json body in api side.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' The endpoint is used for updating the accounts, views, account holders for the user.\n As to the Json body, you can leave it as Empty. \n This call will get data from backend, no need to prepare the json body in api side.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						duration_time: '10 ms'
					},
					error_response_bodies: [
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							duration_time: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanRefreshUser',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/refresh'
				},
				{
					operation_id: 'OBPv3.1.0-createCardAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createCardAttribute'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attribute',
					summary: 'Create Card Attribute',
					description: '<p>Create Card Attribute</p>\n<p>Card Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Card Attribute is linked to its Card by CARD_ID</p>\n<p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Create Card Attribute\n\nCard Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Card Attribute is linked to its Card by CARD_ID\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'OVERDRAFT_START_DATE',
						type: 'DOUBLE',
						value: '2012-04-23'
					},
					success_response_body: {
						name: 'OVERDRAFT_START_DATE',
						card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
						attribute_type: {
							i: 2,
							name: 'DOUBLE'
						},
						bank_id: {
							value: 'GENODEM1GLS'
						},
						value: '2012-04-23',
						card_attribute_id: 'b4e0352a-9a0f-4bfa-b30b-9003aa467f50'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							attribute_type: {
								type: 'object',
								properties: {
									name: {
										type: 'string'
									},
									i: {
										type: 'integer'
									}
								}
							},
							card_id: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							card_attribute_id: {
								type: 'string'
							},
							bank_id: {
								type: 'object',
								properties: {
									value: {
										type: 'string'
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attribute'
				},
				{
					operation_id: 'OBPv3.1.0-getStatusOfCreditCardOrder',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getStatusOfCreditCardOrder'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/credit_cards/orders',
					summary: 'Get status of Credit Card order ',
					description: '<p><strong>NOTE: This endpoint currently only returns example data.</strong></p>\n<pre><code>  Get status of Credit Card orders\n</code></pre>\n<p>Get all orders</p>\n',
					description_markdown: '**NOTE: This endpoint currently only returns example data.**\n\n      Get status of Credit Card orders\nGet all orders\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						cards: [{
							card_type: '5',
							card_description: 'good',
							use_type: '3'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50212: Connector did not return the set of status of credit card.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Card',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							cards: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										use_type: {
											type: 'string'
										},
										card_description: {
											type: 'string'
										},
										card_type: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/credit_cards/orders'
				},
				{
					operation_id: 'OBPv3.0.0-addEntitlementRequest',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'addEntitlementRequest'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.0.0/entitlement-requests',
					summary: 'Add Entitlement Request for current User.',
					description: '<p>Create Entitlement Request.</p>\n<p>Any logged in User can use this endpoint to request an Entitlement</p>\n<p>Entitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)</p>\n<p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p>\n<p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create Entitlement Request.\n\nAny logged in User can use this endpoint to request an Entitlement\n\nEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\n\nFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. "bank_id":""\n\nFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. "bank_id":"my-bank-id"\n\n\n\nAuthentication is Mandatory\n\n        ',
					example_request_body: {
						bank_id: 'GENODEM1GLS',
						role_name: 'String'
					},
					success_response_body: {
						entitlement_request_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
						user: {
							user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							email: 'eveline@example.com',
							provider_id: 'Chris',
							provider: 'http://127.0.0.1:8080',
							username: 'felixsmith',
							entitlements: {
								list: [{
									entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
									role_name: 'CanQueryOtherUser',
									bank_id: 'GENODEM1GLS'
								}]
							}
						},
						role_name: 'CanQueryOtherUser',
						bank_id: 'GENODEM1GLS',
						created: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20005: User not found. Please specify a valid value for USER_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-10007: Incorrect Role name: ',
						'OBP-30205: This entitlement is a Bank Role. Please set bank_id to a valid bank id.',
						'OBP-30206: This entitlement is a System Role. Please set bank_id to empty string.',
						'OBP-30214: Entitlement Request already exists for the user.',
						'OBP-30217: Entitlement Request cannot be added.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							role_name: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							entitlement_request_id: {
								type: 'string'
							},
							created: {
								type: 'string',
								format: 'date-time'
							},
							user: {
								type: 'object',
								properties: {
									entitlements: {
										type: 'object',
										properties: {
											list: {
												type: 'array',
												items: {
													type: 'object',
													properties: {
														bank_id: {
															type: 'string'
														},
														role_name: {
															type: 'string'
														},
														entitlement_id: {
															type: 'string'
														}
													}
												}
											}
										}
									},
									provider: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									provider_id: {
										type: 'string'
									},
									username: {
										type: 'string'
									},
									user_id: {
										type: 'string'
									}
								}
							},
							role_name: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/entitlement-requests'
				},
				{
					operation_id: 'OBPv4.0.0-createTransactionRequestSepa',
					implemented_by: {
						version: 'OBPv4.0.0',
						'function': 'createTransactionRequestSepa'
					},
					request_verb: 'POST',
					request_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/SEPA/transaction-requests',
					summary: 'Create Transaction Request (SEPA)',
					description: '<p>Special instructions for SEPA:</p>\n<p>When using a SEPA Transaction Request, you specify the IBAN of a Counterparty in the body of the request.<br />\nThe routing details (IBAN) of the counterparty will be forwarded to the core banking system for the transfer.</p>\n<p>Initiate a Payment via creating a Transaction Request.</p>\n<p>In OBP, a <code>transaction request</code> may or may not result in a <code>transaction</code>. However, a <code>transaction</code> only has one possible state: completed.</p>\n<p>A <code>Transaction Request</code> can have one of several states.</p>\n<p><code>Transactions</code> are modeled on items in a bank statement that represent the movement of money.</p>\n<p><code>Transaction Requests</code> are requests to move money which may or may not succeeed and thus result in a <code>Transaction</code>.</p>\n<p>A <code>Transaction Request</code> might create a security challenge that needs to be answered before the <code>Transaction Request</code> proceeds.</p>\n<p>Transaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).</p>\n<p>Transaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.<br />\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.</p>\n<p>The payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.</p>\n<p>In sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.</p>\n<p>In sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.</p>\n<p>If a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.</p>\n<p>You can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.</p>\n<p>The following static FX rates are available in sandbox mode:</p>\n<p><a href="http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate">http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate</a></p>\n<p>Transaction Requests satisfy PSD2 requirements thus:</p>\n<p>1) A transaction can be initiated by a third party application.</p>\n<p>2) The customer is informed of the charge that will incurred.</p>\n<p>3) The call supports delegated authentication (OAuth)</p>\n<p>See <a href="https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py">this python code</a> for a complete example of this flow.</p>\n<p>There is further documentation <a href="https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests">here</a></p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\nSpecial instructions for SEPA:\n\nWhen using a SEPA Transaction Request, you specify the IBAN of a Counterparty in the body of the request.\nThe routing details (IBAN) of the counterparty will be forwarded to the core banking system for the transfer.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					example_request_body: {
						value: {
							currency: 'EUR',
							amount: '10'
						},
						to: {
							iban: '123'
						},
						description: 'This is a SEPA Transaction Request',
						charge_policy: 'SHARED',
						future_date: '20881230'
					},
					success_response_body: {
						id: '4050046c-63b3-4868-8a22-14b4181d33a6',
						type: 'SANDBOX_TAN',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						details: {
							to_sandbox_tan: {
								bank_id: 'String',
								account_id: 'String'
							},
							to_sepa: {
								iban: 'String'
							},
							to_counterparty: {
								counterparty_id: 'String'
							},
							to_transfer_to_phone: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									mobile_phone_number: '+44 07972 444 876'
								}
							},
							to_transfer_to_atm: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									legal_name: 'Eveline Tripman',
									date_of_birth: '20181230',
									mobile_phone_number: '+44 07972 444 876',
									kyc_document: {
										type: 'String',
										number: 'String'
									}
								}
							},
							to_transfer_to_account: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								transfer_type: 'String',
								future_date: '20181230',
								to: {
									name: 'String',
									bank_code: 'String',
									branch_number: 'String',
									account: {
										number: 'String',
										iban: 'String'
									}
								}
							},
							to_sepa_credit_transfers: {
								debtorAccount: {
									iban: '12345'
								},
								instructedAmount: {
									currency: 'EUR',
									amount: '10'
								},
								creditorAccount: {
									iban: '54321'
								},
								creditorName: 'John Miles'
							},
							value: {
								currency: 'EUR',
								amount: '100'
							},
							description: 'String'
						},
						transaction_ids: [
							'902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
						],
						status: 'COMPLETED',
						start_date: '2017-09-19T00:00:00Z',
						end_date: '2017-09-19T00:00:00Z',
						challenge: {
							id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
							allowed_attempts: 3,
							challenge_type: 'SANDBOX_TAN'
						},
						charge: {
							summary: 'Rent the flat',
							value: {
								currency: 'EUR',
								amount: '10'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-40002: Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-40001: Invalid value for TRANSACTION_REQUEST_TYPE',
						'OBP-10001: Incorrect json format.',
						'OBP-10002: Invalid Number. Could not convert value to a number.',
						'OBP-40008: Can\'t send a payment with a value of 0 or less.',
						'OBP-40003: Transaction Request Currency must be the same as From Account Currency.',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							to: {
								type: 'object',
								properties: {
									iban: {
										type: 'string'
									}
								}
							},
							description: {
								type: 'string'
							},
							charge_policy: {
								type: 'string'
							},
							future_date: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							challenge: {
								type: 'object',
								properties: {
									challenge_type: {
										type: 'string'
									},
									allowed_attempts: {
										type: 'integer'
									},
									id: {
										type: 'string'
									}
								}
							},
							status: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									summary: {
										type: 'string'
									}
								}
							},
							details: {
								type: 'object',
								properties: {
									to_sandbox_tan: {
										type: 'object',
										properties: {
											account_id: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											}
										}
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									to_sepa: {
										type: 'object',
										properties: {
											iban: {
												type: 'string'
											}
										}
									},
									description: {
										type: 'string'
									},
									to_transfer_to_atm: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													kyc_document: {
														type: 'object',
														properties: {
															number: {
																type: 'string'
															},
															type: {
																type: 'string'
															}
														}
													},
													mobile_phone_number: {
														type: 'string'
													},
													date_of_birth: {
														type: 'string'
													},
													legal_name: {
														type: 'string'
													}
												}
											}
										}
									},
									to_sepa_credit_transfers: {
										type: 'object',
										properties: {
											creditorName: {
												type: 'string'
											},
											creditorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											},
											instructedAmount: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											debtorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											}
										}
									},
									to_counterparty: {
										type: 'object',
										properties: {
											counterparty_id: {
												type: 'string'
											}
										}
									},
									to_transfer_to_phone: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													mobile_phone_number: {
														type: 'string'
													}
												}
											}
										}
									},
									to_transfer_to_account: {
										type: 'object',
										properties: {
											to: {
												type: 'object',
												properties: {
													account: {
														type: 'object',
														properties: {
															iban: {
																type: 'string'
															},
															number: {
																type: 'string'
															}
														}
													},
													branch_number: {
														type: 'string'
													},
													bank_code: {
														type: 'string'
													},
													name: {
														type: 'string'
													}
												}
											},
											transfer_type: {
												type: 'string'
											},
											description: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											future_date: {
												type: 'string'
											}
										}
									}
								}
							},
							end_date: {
								type: 'string',
								format: 'date-time'
							},
							start_date: {
								type: 'string',
								format: 'date-time'
							},
							transaction_ids: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/SEPA/transaction-requests'
				},
				{
					operation_id: 'OBPv3.1.0-createCreditLimitRequest',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createCreditLimitRequest'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests',
					summary: 'Create Credit Limit Order Request',
					description: '<p><strong>NOTE: This endpoint currently only returns example data.</strong></p>\n<p>Create credit limit order request</p>\n',
					description_markdown: '**NOTE: This endpoint currently only returns example data.**\n\n      \nCreate credit limit order request\n',
					example_request_body: {
						requested_current_rate_amount1: 'String',
						requested_current_rate_amount2: 'String',
						requested_current_valid_end_date: 'String',
						current_credit_documentation: 'String',
						temporary_requested_current_amount: 'String',
						requested_temporary_valid_end_date: 'String',
						temporary_credit_documentation: 'String'
					},
					success_response_body: {
						execution_time: 'String',
						execution_date: 'String',
						token: 'String',
						short_reference: 'String'
					},
					error_response_bodies: [
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							requested_temporary_valid_end_date: {
								type: 'string',
								format: 'date-time'
							},
							current_credit_documentation: {
								type: 'string'
							},
							temporary_requested_current_amount: {
								type: 'string'
							},
							requested_current_valid_end_date: {
								type: 'string',
								format: 'date-time'
							},
							requested_current_rate_amount1: {
								type: 'string'
							},
							requested_current_rate_amount2: {
								type: 'string'
							},
							temporary_credit_documentation: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							short_reference: {
								type: 'string'
							},
							token: {
								type: 'string'
							},
							execution_date: {
								type: 'string',
								format: 'date-time'
							},
							execution_time: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests'
				},
				{
					operation_id: 'OBPv2.1.0-getRoles',
					implemented_by: {
						version: 'OBPv2.1.0',
						'function': 'getRoles'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.1.0/roles',
					summary: 'Get Roles',
					description: '<p>Returns all available roles</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Returns all available roles\n\nAuthentication is Mandatory\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						roles: [{
							role: 'eBranch',
							requires_bank_id: true
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							roles: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										requires_bank_id: {
											type: 'boolean'
										},
										role: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/roles'
				},
				{
					operation_id: 'OBPv3.0.0-getTransactionsForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getTransactionsForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions',
					summary: 'Get Transactions for Account (Full)',
					description: '<p>Returns transactions list of the account specified by ACCOUNT_ID and <a href="#1_2_1-getViewsForBankAccount">moderated</a> by the view (VIEW_ID).</p>\n<p>Authentication is Optional</p>\n<p>Authentication is required if the view is not public.</p>\n<p>Possible custom headers for pagination:</p>\n<ul>\n<li>sort_direction=ASC/DESC ==&gt; default value: DESC. The sort field is the completed date.</li>\n<li>limit=NUMBER ==&gt; default value: 50</li>\n<li>offset=NUMBER ==&gt; default value: 0</li>\n<li>from_date=DATE =&gt; default value: 0000-00-00T00:00:00.000Z</li>\n<li>to_date=DATE =&gt; default value: 3049-01-01T00:00:00.000Z</li>\n</ul>\n<p><strong>Date format parameter</strong>: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==&gt; time zone is UTC.</p>\n',
					description_markdown: 'Returns transactions list of the account specified by ACCOUNT_ID and [moderated](#1_2_1-getViewsForBankAccount) by the view (VIEW_ID).\n\nAuthentication is Optional\n\nAuthentication is required if the view is not public.\n\nPossible custom headers for pagination:\n\n* sort_direction=ASC/DESC ==> default value: DESC. The sort field is the completed date.\n* limit=NUMBER ==> default value: 50\n* offset=NUMBER ==> default value: 0\n* from_date=DATE => default value: 0000-00-00T00:00:00.000Z\n* to_date=DATE => default value: 3049-01-01T00:00:00.000Z\n\n**Date format parameter**: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==> time zone is UTC.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						transactions: [{
							id: 'String',
							this_account: {
								id: 'String',
								bank_routing: {
									scheme: 'Bank_ID',
									address: 'gh.29.uk'
								},
								account_routings: [{
									scheme: 'AccountNumber',
									address: '4930396'
								}],
								holders: [{
									name: 'OBP',
									is_alias: true
								}]
							},
							other_account: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								holder: {
									name: 'OBP',
									is_alias: true
								},
								bank_routing: {
									scheme: 'Bank_ID',
									address: 'gh.29.uk'
								},
								account_routings: [{
									scheme: 'AccountNumber',
									address: '4930396'
								}],
								metadata: {
									public_alias: 'NONE',
									private_alias: 'NONE',
									more_info: 'www.openbankproject.com',
									URL: 'www.openbankproject.com',
									image_URL: 'www.openbankproject.com',
									open_corporates_URL: 'www.openbankproject.com',
									corporate_location: {
										latitude: 1.231,
										longitude: 1.231,
										date: '2017-09-19T00:00:00Z',
										user: {
											id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
											provider: 'http://127.0.0.1:8080',
											display_name: 'OBP'
										}
									},
									physical_location: {
										latitude: 1.231,
										longitude: 1.231,
										date: '2017-09-19T00:00:00Z',
										user: {
											id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
											provider: 'http://127.0.0.1:8080',
											display_name: 'OBP'
										}
									}
								}
							},
							details: {
								type: 'AC',
								description: 'this is for family',
								posted: '2017-09-19T00:00:00Z',
								completed: '2017-09-19T00:00:00Z',
								new_balance: {
									currency: 'EUR',
									amount: '10'
								},
								value: {
									currency: 'EUR',
									amount: '10'
								}
							},
							metadata: {
								narrative: 'NONE',
								comments: [{
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									value: 'OBP',
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								}],
								tags: [{
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									value: 'OBP',
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								}],
								images: [{
									id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
									label: 'NONE',
									URL: 'www.openbankproject.com',
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								}],
								where: {
									latitude: 1.231,
									longitude: 1.231,
									date: '2017-09-19T00:00:00Z',
									user: {
										id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
										provider: 'http://127.0.0.1:8080',
										display_name: 'OBP'
									}
								}
							}
						}]
					},
					error_response_bodies: [
						'OBP-10023: obp_sort_direction parameter can only take two values: DESC or ASC!',
						'OBP-10024: wrong value for obp_offset parameter. Please send a positive integer (=>0)!',
						'OBP-10025: wrong value for obp_limit parameter. Please send a positive integer (=>1)!',
						'OBP-10026: Failed to parse date string. Please use this format yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							transactions: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										this_account: {
											type: 'object',
											properties: {
												holders: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															is_alias: {
																type: 'boolean'
															},
															name: {
																type: 'string'
															}
														}
													}
												},
												account_routings: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															address: {
																type: 'string'
															},
															scheme: {
																type: 'string'
															}
														}
													}
												},
												bank_routing: {
													type: 'object',
													properties: {
														address: {
															type: 'string'
														},
														scheme: {
															type: 'string'
														}
													}
												},
												id: {
													type: 'string'
												}
											}
										},
										details: {
											type: 'object',
											properties: {
												type: {
													type: 'string'
												},
												description: {
													type: 'string'
												},
												completed: {
													type: 'string',
													format: 'date-time'
												},
												value: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												new_balance: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												posted: {
													type: 'string',
													format: 'date-time'
												}
											}
										},
										id: {
											type: 'string'
										},
										metadata: {
											type: 'object',
											properties: {
												narrative: {
													type: 'string'
												},
												tags: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															user: {
																type: 'object',
																properties: {
																	display_name: {
																		type: 'string'
																	},
																	provider: {
																		type: 'string'
																	},
																	id: {
																		type: 'string'
																	}
																}
															},
															date: {
																type: 'string',
																format: 'date-time'
															},
															value: {
																type: 'string'
															},
															id: {
																type: 'string'
															}
														}
													}
												},
												images: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															date: {
																type: 'string',
																format: 'date-time'
															},
															URL: {
																type: 'string'
															},
															id: {
																type: 'string'
															},
															user: {
																type: 'object',
																properties: {
																	display_name: {
																		type: 'string'
																	},
																	provider: {
																		type: 'string'
																	},
																	id: {
																		type: 'string'
																	}
																}
															},
															label: {
																type: 'string'
															}
														}
													}
												},
												comments: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															user: {
																type: 'object',
																properties: {
																	display_name: {
																		type: 'string'
																	},
																	provider: {
																		type: 'string'
																	},
																	id: {
																		type: 'string'
																	}
																}
															},
															date: {
																type: 'string',
																format: 'date-time'
															},
															value: {
																type: 'string'
															},
															id: {
																type: 'string'
															}
														}
													}
												},
												where: {
													type: 'object',
													properties: {
														user: {
															type: 'object',
															properties: {
																display_name: {
																	type: 'string'
																},
																provider: {
																	type: 'string'
																},
																id: {
																	type: 'string'
																}
															}
														},
														date: {
															type: 'string',
															format: 'date-time'
														},
														longitude: {
															type: 'number'
														},
														latitude: {
															type: 'number'
														}
													}
												}
											}
										},
										other_account: {
											type: 'object',
											properties: {
												holder: {
													type: 'object',
													properties: {
														is_alias: {
															type: 'boolean'
														},
														name: {
															type: 'string'
														}
													}
												},
												id: {
													type: 'string'
												},
												metadata: {
													type: 'object',
													properties: {
														image_URL: {
															type: 'string'
														},
														URL: {
															type: 'string'
														},
														open_corporates_URL: {
															type: 'string'
														},
														physical_location: {
															type: 'object',
															properties: {
																user: {
																	type: 'object',
																	properties: {
																		display_name: {
																			type: 'string'
																		},
																		provider: {
																			type: 'string'
																		},
																		id: {
																			type: 'string'
																		}
																	}
																},
																date: {
																	type: 'string',
																	format: 'date-time'
																},
																longitude: {
																	type: 'number'
																},
																latitude: {
																	type: 'number'
																}
															}
														},
														public_alias: {
															type: 'string'
														},
														corporate_location: {
															type: 'object',
															properties: {
																user: {
																	type: 'object',
																	properties: {
																		display_name: {
																			type: 'string'
																		},
																		provider: {
																			type: 'string'
																		},
																		id: {
																			type: 'string'
																		}
																	}
																},
																date: {
																	type: 'string',
																	format: 'date-time'
																},
																longitude: {
																	type: 'number'
																},
																latitude: {
																	type: 'number'
																}
															}
														},
														private_alias: {
															type: 'string'
														},
														more_info: {
															type: 'string'
														}
													}
												},
												account_routings: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															address: {
																type: 'string'
															},
															scheme: {
																type: 'string'
															}
														}
													}
												},
												bank_routing: {
													type: 'object',
													properties: {
														address: {
															type: 'string'
														},
														scheme: {
															type: 'string'
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions'
				},
				{
					operation_id: 'OBPv1.2.1-addWhereTagForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addWhereTagForViewOnTransaction'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					summary: 'Add where tag.',
					description: '<p>Creates a &quot;where&quot; Geo tag on a transaction TRANSACTION_ID in a <a href="#1_2_1-getViewsForBankAccount">view</a>.</p>\n<p>Authentication is Mandatory</p>\n<p>The geo tag is linked with the user.</p>\n',
					description_markdown: 'Creates a "where" Geo tag on a transaction TRANSACTION_ID in a [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe geo tag is linked with the user.',
					example_request_body: {
						where: {
							latitude: 1.532,
							longitude: 1.535
						}
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-30022: The current view does not have the permission: ',
						'Coordinates not possible',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							where: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where'
				},
				{
					operation_id: 'OBPv3.1.0-createSystemView',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createSystemView'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/system-views',
					summary: 'Create System View.',
					description: '<p>Create a system view</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.<br />\nThe \'alias\' field in the JSON can take one of three values:</p>\n<ul>\n<li><em>public</em>: to use the public alias if there is one specified for the other account.</li>\n<li><em>private</em>: to use the public alias if there is one specified for the other account.</li>\n<li>\n<p><em>\'\'(empty string)</em>: to use no alias; the view shows the real name of the other account.</p>\n</li>\n</ul>\n<p>The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to <code>true</code> and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.</p>\n<p>The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to <code>true</code> on the view creation, the rest will be set to <code>false</code>.</p>\n',
					description_markdown: 'Create a system view\n\n Authentication is Mandatory and the user needs to have access to the owner view.\n The \'alias\' field in the JSON can take one of three values:\n\n * _public_: to use the public alias if there is one specified for the other account.\n * _private_: to use the public alias if there is one specified for the other account.\n\n * _\'\'(empty string)_: to use no alias; the view shows the real name of the other account.\n\n The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to `true` and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\n\n The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to `true` on the view creation, the rest will be set to `false`.\n ',
					example_request_body: {
						name: '_test',
						description: 'This view is for family',
						metadata_view: '_test',
						is_public: true,
						which_alias_to_use: 'family',
						hide_metadata_if_alias_used: false,
						allowed_actions: [
							'can_see_transaction_this_bank_account',
							'can_see_transaction_other_bank_account',
							'can_see_transaction_metadata',
							'can_see_transaction_label',
							'can_see_transaction_amount',
							'can_see_transaction_type',
							'can_see_transaction_currency',
							'can_see_transaction_start_date',
							'can_see_transaction_finish_date',
							'can_see_transaction_balance',
							'can_see_comments',
							'can_see_narrative',
							'can_see_tags',
							'can_see_images',
							'can_see_bank_account_owners',
							'can_see_bank_account_type',
							'can_see_bank_account_balance',
							'can_see_bank_account_currency',
							'can_see_bank_account_label',
							'can_see_bank_account_national_identifier',
							'can_see_bank_account_swift_bic',
							'can_see_bank_account_iban',
							'can_see_bank_account_number',
							'can_see_bank_account_bank_name',
							'can_see_other_account_national_identifier',
							'can_see_other_account_swift_bic',
							'can_see_other_account_iban',
							'can_see_other_account_bank_name',
							'can_see_other_account_number',
							'can_see_other_account_metadata',
							'can_see_other_account_kind',
							'can_see_more_info',
							'can_see_url',
							'can_see_image_url',
							'can_see_open_corporates_url',
							'can_see_corporate_location',
							'can_see_physical_location',
							'can_see_public_alias',
							'can_see_private_alias',
							'can_add_more_info',
							'can_add_url',
							'can_add_image_url',
							'can_add_open_corporates_url',
							'can_add_corporate_location',
							'can_add_physical_location',
							'can_add_public_alias',
							'can_add_private_alias',
							'can_delete_corporate_location',
							'can_delete_physical_location',
							'can_edit_narrative',
							'can_add_comment',
							'can_delete_comment',
							'can_add_tag',
							'can_delete_tag',
							'can_add_image',
							'can_delete_image',
							'can_add_where_tag',
							'can_see_where_tag',
							'can_delete_where_tag',
							'can_create_counterparty',
							'can_see_bank_routing_scheme',
							'can_see_bank_routing_address',
							'can_see_bank_account_routing_scheme',
							'can_see_bank_account_routing_address',
							'can_see_other_bank_routing_scheme',
							'can_see_other_bank_routing_address',
							'can_see_other_account_routing_scheme',
							'can_see_other_account_routing_address',
							'can_query_available_funds'
						]
					},
					success_response_body: {
						id: '1234',
						short_name: 'short_name',
						description: 'description',
						metadata_view: 'owner',
						is_public: true,
						alias: 'No',
						hide_metadata_if_alias_used: true,
						can_add_comment: true,
						can_add_corporate_location: true,
						can_add_image: true,
						can_add_image_url: true,
						can_add_more_info: true,
						can_add_open_corporates_url: true,
						can_add_physical_location: true,
						can_add_private_alias: true,
						can_add_public_alias: true,
						can_add_tag: true,
						can_add_url: true,
						can_add_where_tag: true,
						can_delete_comment: true,
						can_add_counterparty: true,
						can_delete_corporate_location: true,
						can_delete_image: true,
						can_delete_physical_location: true,
						can_delete_tag: true,
						can_delete_where_tag: true,
						can_edit_owner_comment: true,
						can_see_bank_account_balance: true,
						can_query_available_funds: true,
						can_see_bank_account_bank_name: true,
						can_see_bank_account_currency: true,
						can_see_bank_account_iban: true,
						can_see_bank_account_label: true,
						can_see_bank_account_national_identifier: true,
						can_see_bank_account_number: true,
						can_see_bank_account_owners: true,
						can_see_bank_account_swift_bic: true,
						can_see_bank_account_type: true,
						can_see_comments: true,
						can_see_corporate_location: true,
						can_see_image_url: true,
						can_see_images: true,
						can_see_more_info: true,
						can_see_open_corporates_url: true,
						can_see_other_account_bank_name: true,
						can_see_other_account_iban: true,
						can_see_other_account_kind: true,
						can_see_other_account_metadata: true,
						can_see_other_account_national_identifier: true,
						can_see_other_account_number: true,
						can_see_other_account_swift_bic: true,
						can_see_owner_comment: true,
						can_see_physical_location: true,
						can_see_private_alias: true,
						can_see_public_alias: true,
						can_see_tags: true,
						can_see_transaction_amount: true,
						can_see_transaction_balance: true,
						can_see_transaction_currency: true,
						can_see_transaction_description: true,
						can_see_transaction_finish_date: true,
						can_see_transaction_metadata: true,
						can_see_transaction_other_bank_account: true,
						can_see_transaction_start_date: true,
						can_see_transaction_this_bank_account: true,
						can_see_transaction_type: true,
						can_see_url: true,
						can_see_where_tag: true,
						can_see_bank_routing_scheme: true,
						can_see_bank_routing_address: true,
						can_see_bank_account_routing_scheme: true,
						can_see_bank_account_routing_address: true,
						can_see_other_bank_routing_scheme: true,
						can_see_other_bank_routing_address: true,
						can_see_other_account_routing_scheme: true,
						can_see_other_account_routing_address: true,
						can_add_transaction_request_to_own_account: true,
						can_add_transaction_request_to_any_account: true,
						can_see_bank_account_credit_limit: true
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'System-View',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							allowed_actions: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							name: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							is_public: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							which_alias_to_use: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							can_see_other_account_swift_bic: {
								type: 'boolean'
							},
							can_see_where_tag: {
								type: 'boolean'
							},
							can_see_url: {
								type: 'boolean'
							},
							can_see_bank_account_swift_bic: {
								type: 'boolean'
							},
							can_see_bank_account_routing_address: {
								type: 'boolean'
							},
							can_see_tags: {
								type: 'boolean'
							},
							can_see_transaction_balance: {
								type: 'boolean'
							},
							can_delete_corporate_location: {
								type: 'boolean'
							},
							can_add_image_url: {
								type: 'boolean'
							},
							can_see_public_alias: {
								type: 'boolean'
							},
							can_add_transaction_request_to_own_account: {
								type: 'boolean'
							},
							can_add_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_scheme: {
								type: 'boolean'
							},
							description: {
								type: 'string'
							},
							can_see_corporate_location: {
								type: 'boolean'
							},
							can_see_other_account_bank_name: {
								type: 'boolean'
							},
							can_see_more_info: {
								type: 'boolean'
							},
							can_add_counterparty: {
								type: 'boolean'
							},
							can_see_physical_location: {
								type: 'boolean'
							},
							can_query_available_funds: {
								type: 'boolean'
							},
							can_edit_owner_comment: {
								type: 'boolean'
							},
							can_see_private_alias: {
								type: 'boolean'
							},
							can_see_bank_account_credit_limit: {
								type: 'boolean'
							},
							can_see_other_account_routing_address: {
								type: 'boolean'
							},
							can_see_bank_account_balance: {
								type: 'boolean'
							},
							can_add_public_alias: {
								type: 'boolean'
							},
							can_see_bank_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_owners: {
								type: 'boolean'
							},
							can_see_other_account_metadata: {
								type: 'boolean'
							},
							can_delete_physical_location: {
								type: 'boolean'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							can_see_transaction_this_bank_account: {
								type: 'boolean'
							},
							can_see_image_url: {
								type: 'boolean'
							},
							can_see_transaction_type: {
								type: 'boolean'
							},
							can_see_images: {
								type: 'boolean'
							},
							can_see_transaction_amount: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							can_see_transaction_metadata: {
								type: 'boolean'
							},
							can_see_comments: {
								type: 'boolean'
							},
							can_see_other_account_iban: {
								type: 'boolean'
							},
							can_add_image: {
								type: 'boolean'
							},
							can_see_bank_account_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_type: {
								type: 'boolean'
							},
							can_see_other_account_kind: {
								type: 'boolean'
							},
							can_see_bank_account_currency: {
								type: 'boolean'
							},
							can_add_where_tag: {
								type: 'boolean'
							},
							can_see_transaction_start_date: {
								type: 'boolean'
							},
							can_see_bank_account_label: {
								type: 'boolean'
							},
							can_add_private_alias: {
								type: 'boolean'
							},
							can_see_transaction_currency: {
								type: 'boolean'
							},
							can_add_more_info: {
								type: 'boolean'
							},
							can_delete_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_address: {
								type: 'boolean'
							},
							can_see_transaction_other_bank_account: {
								type: 'boolean'
							},
							can_see_bank_account_number: {
								type: 'boolean'
							},
							can_add_corporate_location: {
								type: 'boolean'
							},
							alias: {
								type: 'string'
							},
							can_add_url: {
								type: 'boolean'
							},
							short_name: {
								type: 'string'
							},
							can_delete_where_tag: {
								type: 'boolean'
							},
							is_public: {
								type: 'boolean'
							},
							can_see_owner_comment: {
								type: 'boolean'
							},
							can_see_transaction_finish_date: {
								type: 'boolean'
							},
							can_see_open_corporates_url: {
								type: 'boolean'
							},
							can_add_physical_location: {
								type: 'boolean'
							},
							can_see_bank_account_iban: {
								type: 'boolean'
							},
							can_see_other_account_national_identifier: {
								type: 'boolean'
							},
							can_see_bank_routing_address: {
								type: 'boolean'
							},
							can_delete_image: {
								type: 'boolean'
							},
							can_add_transaction_request_to_any_account: {
								type: 'boolean'
							},
							can_add_tag: {
								type: 'boolean'
							},
							id: {
								type: 'string'
							},
							can_see_other_account_routing_scheme: {
								type: 'boolean'
							},
							can_add_open_corporates_url: {
								type: 'boolean'
							},
							can_delete_tag: {
								type: 'boolean'
							},
							can_see_transaction_description: {
								type: 'boolean'
							},
							can_see_bank_account_national_identifier: {
								type: 'boolean'
							},
							can_see_other_account_number: {
								type: 'boolean'
							},
							can_see_bank_account_bank_name: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanCreateSystemView',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/system-views'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerAddress',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerAddress'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID',
					summary: 'Update the Address of a Customer',
					description: '<p>Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						line_1: 'No 1 the Road',
						line_2: 'The Place',
						line_3: 'The Hill',
						city: 'Berlin',
						county: '',
						state: 'Brandenburg',
						postcode: '13359',
						country_code: 'DE',
						tags: [
							'mailing',
							'home'
						],
						status: 'OK'
					},
					success_response_body: {
						customer_address_id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						line_1: 'No 1 the Road',
						line_2: 'The Place',
						line_3: 'The Hill',
						city: 'Berlin',
						county: '',
						state: 'Brandenburg',
						postcode: '13359',
						country_code: 'DE',
						tags: [
							'mailing',
							'home'
						],
						status: 'OK',
						insert_date: '2017-09-19T00:00:00Z'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							city: {
								type: 'string'
							},
							tags: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							postcode: {
								type: 'string'
							},
							line_1: {
								type: 'string'
							},
							line_2: {
								type: 'string'
							},
							line_3: {
								type: 'string'
							},
							state: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							country_code: {
								type: 'string'
							},
							county: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							city: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							tags: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							postcode: {
								type: 'string'
							},
							line_1: {
								type: 'string'
							},
							line_2: {
								type: 'string'
							},
							line_3: {
								type: 'string'
							},
							insert_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_address_id: {
								type: 'string'
							},
							state: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							country_code: {
								type: 'string'
							},
							county: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID'
				},
				{
					operation_id: 'OBPv3.0.0-getViewsForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getViewsForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views',
					summary: 'Get Views for Account.',
					description: '<h1><a href="#views" id="views">Views</a></h1>\n<p>Views in Open Bank Project provide a mechanism for fine grained access control and delegation to Accounts and Transactions. Account holders use the \'owner\' view by default. Delegated access is made through other views for example \'accountants\', \'share-holders\' or \'tagging-application\'. Views can be created via the API and each view has a list of entitlements.</p>\n<p>Views on accounts and transactions filter the underlying data to redact certain fields for certain users. For instance the balance on an account may be hidden from the public. The way to know what is possible on a view is determined in the following JSON.</p>\n<p><strong>Data:</strong> When a view moderates a set of data, some fields my contain the value <code>null</code> rather than the original value. This indicates either that the user is not allowed to see the original data or the field is empty.</p>\n<p>There is currently one exception to this rule; the \'holder\' field in the JSON contains always a value which is either an alias or the real name - indicated by the \'is_alias\' field.</p>\n<p><strong>Action:</strong> When a user performs an action like trying to post a comment (with POST API call), if he is not allowed, the body response will contain an error message.</p>\n<p><strong>Metadata:</strong><br />\nTransaction metadata (like images, tags, comments, etc.) will appears <em>ONLY</em> on the view where they have been created e.g. comments posted to the public view only appear on the public view.</p>\n<p>The other account metadata fields (like image_URL, more_info, etc.) are unique through all the views. Example, if a user edits the \'more_info\' field in the \'team\' view, then the view \'authorities\' will show the new value (if it is allowed to do it).</p>\n<h1><a href="#all" id="all">All</a></h1>\n<p><em>Optional</em></p>\n<p>Returns the list of the views created for account ACCOUNT_ID at BANK_ID.</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.</p>\n',
					description_markdown: '#Views\n\n\nViews in Open Bank Project provide a mechanism for fine grained access control and delegation to Accounts and Transactions. Account holders use the \'owner\' view by default. Delegated access is made through other views for example \'accountants\', \'share-holders\' or \'tagging-application\'. Views can be created via the API and each view has a list of entitlements.\n\nViews on accounts and transactions filter the underlying data to redact certain fields for certain users. For instance the balance on an account may be hidden from the public. The way to know what is possible on a view is determined in the following JSON.\n\n**Data:** When a view moderates a set of data, some fields my contain the value `null` rather than the original value. This indicates either that the user is not allowed to see the original data or the field is empty.\n\nThere is currently one exception to this rule; the \'holder\' field in the JSON contains always a value which is either an alias or the real name - indicated by the \'is_alias\' field.\n\n**Action:** When a user performs an action like trying to post a comment (with POST API call), if he is not allowed, the body response will contain an error message.\n\n**Metadata:**\nTransaction metadata (like images, tags, comments, etc.) will appears *ONLY* on the view where they have been created e.g. comments posted to the public view only appear on the public view.\n\nThe other account metadata fields (like image_URL, more_info, etc.) are unique through all the views. Example, if a user edits the \'more_info\' field in the \'team\' view, then the view \'authorities\' will show the new value (if it is allowed to do it).\n\n# All\n*Optional*\n\nReturns the list of the views created for account ACCOUNT_ID at BANK_ID.\n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						views: [{
							id: '1234',
							short_name: 'short_name',
							description: 'description',
							metadata_view: 'owner',
							is_public: true,
							alias: 'No',
							hide_metadata_if_alias_used: true,
							can_add_comment: true,
							can_add_corporate_location: true,
							can_add_image: true,
							can_add_image_url: true,
							can_add_more_info: true,
							can_add_open_corporates_url: true,
							can_add_physical_location: true,
							can_add_private_alias: true,
							can_add_public_alias: true,
							can_add_tag: true,
							can_add_url: true,
							can_add_where_tag: true,
							can_delete_comment: true,
							can_add_counterparty: true,
							can_delete_corporate_location: true,
							can_delete_image: true,
							can_delete_physical_location: true,
							can_delete_tag: true,
							can_delete_where_tag: true,
							can_edit_owner_comment: true,
							can_see_bank_account_balance: true,
							can_query_available_funds: true,
							can_see_bank_account_bank_name: true,
							can_see_bank_account_currency: true,
							can_see_bank_account_iban: true,
							can_see_bank_account_label: true,
							can_see_bank_account_national_identifier: true,
							can_see_bank_account_number: true,
							can_see_bank_account_owners: true,
							can_see_bank_account_swift_bic: true,
							can_see_bank_account_type: true,
							can_see_comments: true,
							can_see_corporate_location: true,
							can_see_image_url: true,
							can_see_images: true,
							can_see_more_info: true,
							can_see_open_corporates_url: true,
							can_see_other_account_bank_name: true,
							can_see_other_account_iban: true,
							can_see_other_account_kind: true,
							can_see_other_account_metadata: true,
							can_see_other_account_national_identifier: true,
							can_see_other_account_number: true,
							can_see_other_account_swift_bic: true,
							can_see_owner_comment: true,
							can_see_physical_location: true,
							can_see_private_alias: true,
							can_see_public_alias: true,
							can_see_tags: true,
							can_see_transaction_amount: true,
							can_see_transaction_balance: true,
							can_see_transaction_currency: true,
							can_see_transaction_description: true,
							can_see_transaction_finish_date: true,
							can_see_transaction_metadata: true,
							can_see_transaction_other_bank_account: true,
							can_see_transaction_start_date: true,
							can_see_transaction_this_bank_account: true,
							can_see_transaction_type: true,
							can_see_url: true,
							can_see_where_tag: true,
							can_see_bank_routing_scheme: true,
							can_see_bank_routing_address: true,
							can_see_bank_account_routing_scheme: true,
							can_see_bank_account_routing_address: true,
							can_see_other_bank_routing_scheme: true,
							can_see_other_bank_routing_address: true,
							can_see_other_account_routing_scheme: true,
							can_see_other_account_routing_address: true,
							can_add_transaction_request_to_own_account: true,
							can_add_transaction_request_to_any_account: true,
							can_see_bank_account_credit_limit: true
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							views: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										can_see_other_account_swift_bic: {
											type: 'boolean'
										},
										can_see_where_tag: {
											type: 'boolean'
										},
										can_see_url: {
											type: 'boolean'
										},
										can_see_bank_account_swift_bic: {
											type: 'boolean'
										},
										can_see_bank_account_routing_address: {
											type: 'boolean'
										},
										can_see_tags: {
											type: 'boolean'
										},
										can_see_transaction_balance: {
											type: 'boolean'
										},
										can_delete_corporate_location: {
											type: 'boolean'
										},
										can_add_image_url: {
											type: 'boolean'
										},
										can_see_public_alias: {
											type: 'boolean'
										},
										can_add_transaction_request_to_own_account: {
											type: 'boolean'
										},
										can_add_comment: {
											type: 'boolean'
										},
										can_see_other_bank_routing_scheme: {
											type: 'boolean'
										},
										description: {
											type: 'string'
										},
										can_see_corporate_location: {
											type: 'boolean'
										},
										can_see_other_account_bank_name: {
											type: 'boolean'
										},
										can_see_more_info: {
											type: 'boolean'
										},
										can_add_counterparty: {
											type: 'boolean'
										},
										can_see_physical_location: {
											type: 'boolean'
										},
										can_query_available_funds: {
											type: 'boolean'
										},
										can_edit_owner_comment: {
											type: 'boolean'
										},
										can_see_private_alias: {
											type: 'boolean'
										},
										can_see_bank_account_credit_limit: {
											type: 'boolean'
										},
										can_see_other_account_routing_address: {
											type: 'boolean'
										},
										can_see_bank_account_balance: {
											type: 'boolean'
										},
										can_add_public_alias: {
											type: 'boolean'
										},
										can_see_bank_routing_scheme: {
											type: 'boolean'
										},
										can_see_bank_account_owners: {
											type: 'boolean'
										},
										can_see_other_account_metadata: {
											type: 'boolean'
										},
										can_delete_physical_location: {
											type: 'boolean'
										},
										hide_metadata_if_alias_used: {
											type: 'boolean'
										},
										can_see_transaction_this_bank_account: {
											type: 'boolean'
										},
										can_see_image_url: {
											type: 'boolean'
										},
										can_see_transaction_type: {
											type: 'boolean'
										},
										can_see_images: {
											type: 'boolean'
										},
										can_see_transaction_amount: {
											type: 'boolean'
										},
										metadata_view: {
											type: 'string'
										},
										can_see_transaction_metadata: {
											type: 'boolean'
										},
										can_see_comments: {
											type: 'boolean'
										},
										can_see_other_account_iban: {
											type: 'boolean'
										},
										can_add_image: {
											type: 'boolean'
										},
										can_see_bank_account_routing_scheme: {
											type: 'boolean'
										},
										can_see_bank_account_type: {
											type: 'boolean'
										},
										can_see_other_account_kind: {
											type: 'boolean'
										},
										can_see_bank_account_currency: {
											type: 'boolean'
										},
										can_add_where_tag: {
											type: 'boolean'
										},
										can_see_transaction_start_date: {
											type: 'boolean'
										},
										can_see_bank_account_label: {
											type: 'boolean'
										},
										can_add_private_alias: {
											type: 'boolean'
										},
										can_see_transaction_currency: {
											type: 'boolean'
										},
										can_add_more_info: {
											type: 'boolean'
										},
										can_delete_comment: {
											type: 'boolean'
										},
										can_see_other_bank_routing_address: {
											type: 'boolean'
										},
										can_see_transaction_other_bank_account: {
											type: 'boolean'
										},
										can_see_bank_account_number: {
											type: 'boolean'
										},
										can_add_corporate_location: {
											type: 'boolean'
										},
										alias: {
											type: 'string'
										},
										can_add_url: {
											type: 'boolean'
										},
										short_name: {
											type: 'string'
										},
										can_delete_where_tag: {
											type: 'boolean'
										},
										is_public: {
											type: 'boolean'
										},
										can_see_owner_comment: {
											type: 'boolean'
										},
										can_see_transaction_finish_date: {
											type: 'boolean'
										},
										can_see_open_corporates_url: {
											type: 'boolean'
										},
										can_add_physical_location: {
											type: 'boolean'
										},
										can_see_bank_account_iban: {
											type: 'boolean'
										},
										can_see_other_account_national_identifier: {
											type: 'boolean'
										},
										can_see_bank_routing_address: {
											type: 'boolean'
										},
										can_delete_image: {
											type: 'boolean'
										},
										can_add_transaction_request_to_any_account: {
											type: 'boolean'
										},
										can_add_tag: {
											type: 'boolean'
										},
										id: {
											type: 'string'
										},
										can_see_other_account_routing_scheme: {
											type: 'boolean'
										},
										can_add_open_corporates_url: {
											type: 'boolean'
										},
										can_delete_tag: {
											type: 'boolean'
										},
										can_see_transaction_description: {
											type: 'boolean'
										},
										can_see_bank_account_national_identifier: {
											type: 'boolean'
										},
										can_see_other_account_number: {
											type: 'boolean'
										},
										can_see_bank_account_bank_name: {
											type: 'boolean'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views'
				},
				{
					operation_id: 'OBPv1.2.1-updateTransactionNarrative',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateTransactionNarrative'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					summary: 'Update narrative.',
					description: '<p>Updates the description of the transaction TRANSACTION_ID.</p>\n<p>Authentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Updates the description of the transaction TRANSACTION_ID.\n\nAuthentication via OAuth is required if the view is not public.',
					example_request_body: {
						narrative: 'narative'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							narrative: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative'
				},
				{
					operation_id: 'OBPv4.0.0-answerTransactionRequestChallenge',
					implemented_by: {
						version: 'OBPv4.0.0',
						'function': 'answerTransactionRequestChallenge'
					},
					request_verb: 'POST',
					request_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/TRANSACTION_REQUEST_TYPE/transaction-requests/TRANSACTION_REQUEST_ID/challenge',
					summary: 'Answer Transaction Request Challenge.',
					description: '<p>In Sandbox mode, any string that can be converted to a positive integer will be accepted as an answer.</p>\n<p>This endpoint totally depends on createTransactionRequest, it need get the following data from createTransactionRequest response body.</p>\n<p>1)<code>TRANSACTION_REQUEST_TYPE</code> : is the same as createTransactionRequest request URL .</p>\n<p>2)<code>TRANSACTION_REQUEST_ID</code> : is the <code>id</code> field in createTransactionRequest response body.</p>\n<p>3) <code>id</code> :  is <code>challenge.id</code> field in createTransactionRequest response body.</p>\n<p>4) <code>answer</code> : must be <code>123</code>. if it is in sandbox mode. If it kafka mode, the answer can be got by phone message or other security ways.</p>\n',
					description_markdown: 'In Sandbox mode, any string that can be converted to a positive integer will be accepted as an answer.\n\nThis endpoint totally depends on createTransactionRequest, it need get the following data from createTransactionRequest response body.\n\n1)`TRANSACTION_REQUEST_TYPE` : is the same as createTransactionRequest request URL .\n\n2)`TRANSACTION_REQUEST_ID` : is the `id` field in createTransactionRequest response body.\n\n3) `id` :  is `challenge.id` field in createTransactionRequest response body.\n\n4) `answer` : must be `123`. if it is in sandbox mode. If it kafka mode, the answer can be got by phone message or other security ways.\n\n      ',
					example_request_body: {
						id: 'This is challenge.id, you can get it from `Create Transaction Request.` response, only is useful if status ==`INITIATED` there.',
						answer: '123'
					},
					success_response_body: {
						id: '82f92531-9c63-4246-abfc-96c20ec46188',
						type: 'SANDBOX_TAN',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						details: {
							to: {
								bank_id: 'String',
								account_id: 'String'
							},
							value: {
								currency: 'EUR',
								amount: '100'
							},
							description: 'String'
						},
						transaction_ids: '666666-9c63-4246-abfc-96c20ec46188',
						status: 'COMPLETED',
						start_date: '2017-09-19T00:00:00Z',
						end_date: '2017-09-19T00:00:00Z',
						challenge: {
							id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
							allowed_attempts: 3,
							challenge_type: 'SANDBOX_TAN'
						},
						charge: {
							summary: 'Rent the flat',
							value: {
								currency: 'EUR',
								amount: '10'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-40011: Transaction Request Status is not INITIATED.',
						'OBP-40009: The TRANSACTION_REQUEST_TYPE has changed.',
						'OBP-40010: Invalid Challenge Id. Please specify a valid value for CHALLENGE_ID.',
						'OBP-40014: Sorry, you\'ve used up your allowed attempts. ',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							answer: {
								type: 'string'
							},
							id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							challenge: {
								type: 'object',
								properties: {
									challenge_type: {
										type: 'string'
									},
									allowed_attempts: {
										type: 'integer'
									},
									id: {
										type: 'string'
									}
								}
							},
							status: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									summary: {
										type: 'string'
									}
								}
							},
							end_date: {
								type: 'string',
								format: 'date-time'
							},
							details: {
								type: 'object',
								properties: {
									description: {
										type: 'string'
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									to: {
										type: 'object',
										properties: {
											account_id: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											}
										}
									}
								}
							},
							id: {
								type: 'string'
							},
							start_date: {
								type: 'string',
								format: 'date-time'
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							transaction_ids: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/TRANSACTION_REQUEST_TYPE/transaction-requests/TRANSACTION_REQUEST_ID/challenge'
				},
				{
					operation_id: 'OBPv3.1.0-createCustomer',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createCustomer'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers',
					summary: 'Create Customer.',
					description: '<p>The Customer resource stores the customer number, legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.<br />\nDates need to be in the format 2013-01-21T23:08:00Z</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\nThe Customer resource stores the customer number, legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.\nDates need to be in the format 2013-01-21T23:08:00Z\n\nAuthentication is Mandatory\n',
					example_request_body: {
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-30006: Customer Number already exists. Please specify a different value for BANK_ID or CUSTOMER_NUMBER.',
						'OBP-20005: User not found. Please specify a valid value for USER_ID.',
						'OBP-30007: The User is already linked to a Customer at the bank specified by BANK_ID',
						'OBP-30024: Could not create Consumer ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'Person',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
							role: 'CanCreateCustomer',
							requires_bank_id: true
						},
						{
							role: 'CanCreateUserCustomerLink',
							requires_bank_id: true
						},
						{
							role: 'CanCreateCustomerAtAnyBank',
							requires_bank_id: false
						},
						{
							role: 'CanCreateUserCustomerLinkAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers'
				},
				{
					operation_id: 'OBPv1.2.1-addOtherAccountPrivateAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addOtherAccountPrivateAlias'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					summary: 'Create Other Account Private Alias',
					description: '<p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Creates a private alias for the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					example_request_body: {
						alias: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow adding a private alias',
						'Alias cannot be added',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							alias: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias'
				},
				{
					operation_id: 'OBPv1.2.1-addPermissionForUserForBankAccountForOneView',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addPermissionForUserForBankAccountForOneView'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID',
					summary: 'Grant User access to View.',
					description: '<p>Grants the User identified by PROVIDER_ID at PROVIDER access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.</p>\n<p>All url parameters must be <a href="http://en.wikipedia.org/wiki/Percent-encoding">%-encoded</a>, which is often especially relevant for PROVIDER and PROVIDER_ID.</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.</p>\n<p>Granting access to a public view will return an error message, as the user already has access.</p>\n',
					description_markdown: 'Grants the User identified by PROVIDER_ID at PROVIDER access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.\n\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for PROVIDER and PROVIDER_ID.\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nGranting access to a public view will return an error message, as the user already has access.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '123',
						short_name: 'short_name',
						description: 'description',
						is_public: true,
						alias: 'None',
						hide_metadata_if_alias_used: true,
						can_add_comment: true,
						can_add_corporate_location: true,
						can_add_image: true,
						can_add_image_url: true,
						can_add_more_info: true,
						can_add_open_corporates_url: true,
						can_add_physical_location: true,
						can_add_private_alias: true,
						can_add_public_alias: true,
						can_add_tag: true,
						can_add_url: true,
						can_add_where_tag: true,
						can_delete_comment: true,
						can_delete_corporate_location: true,
						can_delete_image: true,
						can_delete_physical_location: true,
						can_delete_tag: true,
						can_delete_where_tag: true,
						can_edit_owner_comment: true,
						can_see_bank_account_balance: true,
						can_see_bank_account_bank_name: true,
						can_see_bank_account_currency: true,
						can_see_bank_account_iban: true,
						can_see_bank_account_label: true,
						can_see_bank_account_national_identifier: true,
						can_see_bank_account_number: true,
						can_see_bank_account_owners: true,
						can_see_bank_account_swift_bic: true,
						can_see_bank_account_type: true,
						can_see_comments: true,
						can_see_corporate_location: true,
						can_see_image_url: true,
						can_see_images: true,
						can_see_more_info: true,
						can_see_open_corporates_url: true,
						can_see_other_account_bank_name: true,
						can_see_other_account_iban: true,
						can_see_other_account_kind: true,
						can_see_other_account_metadata: true,
						can_see_other_account_national_identifier: true,
						can_see_other_account_number: true,
						can_see_other_account_swift_bic: true,
						can_see_owner_comment: true,
						can_see_physical_location: true,
						can_see_private_alias: true,
						can_see_public_alias: true,
						can_see_tags: true,
						can_see_transaction_amount: true,
						can_see_transaction_balance: true,
						can_see_transaction_currency: true,
						can_see_transaction_description: true,
						can_see_transaction_finish_date: true,
						can_see_transaction_metadata: true,
						can_see_transaction_other_bank_account: true,
						can_see_transaction_start_date: true,
						can_see_transaction_this_bank_account: true,
						can_see_transaction_type: true,
						can_see_url: true,
						can_see_where_tag: true
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.',
						'could not save the privilege',
						'user does not have access to owner view on account'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'User',
						'OwnerViewRequired'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							can_see_other_account_swift_bic: {
								type: 'boolean'
							},
							can_see_where_tag: {
								type: 'boolean'
							},
							can_see_url: {
								type: 'boolean'
							},
							can_see_bank_account_swift_bic: {
								type: 'boolean'
							},
							can_see_tags: {
								type: 'boolean'
							},
							can_see_transaction_balance: {
								type: 'boolean'
							},
							can_delete_corporate_location: {
								type: 'boolean'
							},
							can_add_image_url: {
								type: 'boolean'
							},
							can_see_public_alias: {
								type: 'boolean'
							},
							can_add_comment: {
								type: 'boolean'
							},
							description: {
								type: 'string'
							},
							can_see_corporate_location: {
								type: 'boolean'
							},
							can_see_other_account_bank_name: {
								type: 'boolean'
							},
							can_see_more_info: {
								type: 'boolean'
							},
							can_see_physical_location: {
								type: 'boolean'
							},
							can_edit_owner_comment: {
								type: 'boolean'
							},
							can_see_private_alias: {
								type: 'boolean'
							},
							can_see_bank_account_balance: {
								type: 'boolean'
							},
							can_add_public_alias: {
								type: 'boolean'
							},
							can_see_bank_account_owners: {
								type: 'boolean'
							},
							can_see_other_account_metadata: {
								type: 'boolean'
							},
							can_delete_physical_location: {
								type: 'boolean'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							can_see_transaction_this_bank_account: {
								type: 'boolean'
							},
							can_see_image_url: {
								type: 'boolean'
							},
							can_see_transaction_type: {
								type: 'boolean'
							},
							can_see_images: {
								type: 'boolean'
							},
							can_see_transaction_amount: {
								type: 'boolean'
							},
							can_see_transaction_metadata: {
								type: 'boolean'
							},
							id: {
								type: 'string'
							},
							can_see_comments: {
								type: 'boolean'
							},
							can_see_other_account_iban: {
								type: 'boolean'
							},
							can_add_image: {
								type: 'boolean'
							},
							can_see_bank_account_type: {
								type: 'boolean'
							},
							can_see_other_account_kind: {
								type: 'boolean'
							},
							can_see_bank_account_currency: {
								type: 'boolean'
							},
							can_add_where_tag: {
								type: 'boolean'
							},
							can_see_transaction_start_date: {
								type: 'boolean'
							},
							can_see_bank_account_label: {
								type: 'boolean'
							},
							can_add_private_alias: {
								type: 'boolean'
							},
							can_see_transaction_currency: {
								type: 'boolean'
							},
							can_add_more_info: {
								type: 'boolean'
							},
							can_delete_comment: {
								type: 'boolean'
							},
							can_see_transaction_other_bank_account: {
								type: 'boolean'
							},
							can_see_bank_account_number: {
								type: 'boolean'
							},
							can_add_corporate_location: {
								type: 'boolean'
							},
							can_add_url: {
								type: 'boolean'
							},
							short_name: {
								type: 'string'
							},
							can_delete_where_tag: {
								type: 'boolean'
							},
							is_public: {
								type: 'boolean'
							},
							can_see_owner_comment: {
								type: 'boolean'
							},
							can_see_transaction_finish_date: {
								type: 'boolean'
							},
							can_see_open_corporates_url: {
								type: 'boolean'
							},
							can_add_physical_location: {
								type: 'boolean'
							},
							can_see_bank_account_iban: {
								type: 'boolean'
							},
							can_see_other_account_national_identifier: {
								type: 'boolean'
							},
							can_delete_image: {
								type: 'boolean'
							},
							can_add_tag: {
								type: 'boolean'
							},
							can_add_open_corporates_url: {
								type: 'boolean'
							},
							can_delete_tag: {
								type: 'boolean'
							},
							can_see_transaction_description: {
								type: 'boolean'
							},
							can_see_bank_account_national_identifier: {
								type: 'boolean'
							},
							can_see_other_account_number: {
								type: 'boolean'
							},
							can_see_bank_account_bank_name: {
								type: 'boolean'
							},
							alias: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID'
				},
				{
					operation_id: 'OBPv3.0.0-bankById',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'bankById'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/BANK_ID',
					summary: 'Get Bank',
					description: '<p>Get the bank specified by BANK_ID<br />\nReturns information about a single bank specified by BANK_ID including:</p>\n<ul>\n<li>Short and full name of bank</li>\n<li>Logo URL</li>\n<li>Website</li>\n</ul>\n',
					description_markdown: 'Get the bank specified by BANK_ID\nReturns information about a single bank specified by BANK_ID including:\n\n* Short and full name of bank\n* Logo URL\n* Website',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: 'gh.29.uk',
						short_name: 'short_name ',
						full_name: 'full_name',
						logo: 'logo',
						website: 'www.openbankproject.com',
						bank_routing: {
							scheme: 'Bank_ID',
							address: 'gh.29.uk'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-50000: Unknown Error.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Bank',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							website: {
								type: 'string'
							},
							logo: {
								type: 'string'
							},
							short_name: {
								type: 'string'
							},
							id: {
								type: 'string'
							},
							full_name: {
								type: 'string'
							},
							bank_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/BANK_ID'
				},
				{
					operation_id: 'OBPv1.2.1-addTransactionNarrative',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addTransactionNarrative'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					summary: 'Add narrative.',
					description: '<p>Creates a description of the transaction TRANSACTION_ID.</p>\n<p>Note: Unlike other items of metadata, there is only one &quot;narrative&quot; per transaction accross all views.<br />\nIf you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Creates a description of the transaction TRANSACTION_ID.\n\nNote: Unlike other items of metadata, there is only one "narrative" per transaction accross all views.\nIf you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n',
					example_request_body: {
						narrative: 'narative'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							narrative: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative'
				},
				{
					operation_id: 'OBPv2.0.0-addKycCheck',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'addKycCheck'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_check/KYC_CHECK_ID',
					summary: 'Add KYC Check',
					description: '<p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.</p>\n',
					description_markdown: 'Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.',
					example_request_body: {
						customer_number: '5987953',
						date: '2017-09-19T00:00:00Z',
						how: 'online_meeting',
						staff_user_id: '67876',
						staff_name: 'Simon',
						satisfied: true,
						comments: 'String'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						id: 'PlaceholderString',
						customer_number: '5987953',
						date: '2017-09-19T00:00:00Z',
						how: 'PlaceholderString',
						staff_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						staff_name: 'PlaceholderString',
						satisfied: true,
						comments: 'PlaceholderString'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-00004: Server error: could not add message',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							date: {
								type: 'string',
								format: 'date-time'
							},
							customer_number: {
								type: 'string'
							},
							staff_user_id: {
								type: 'string'
							},
							staff_name: {
								type: 'string'
							},
							comments: {
								type: 'string'
							},
							how: {
								type: 'string'
							},
							satisfied: {
								type: 'boolean'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							date: {
								type: 'string',
								format: 'date-time'
							},
							comments: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							staff_user_id: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							id: {
								type: 'string'
							},
							satisfied: {
								type: 'boolean'
							},
							how: {
								type: 'string'
							},
							staff_name: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_check/KYC_CHECK_ID'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyCorporateLocation',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyCorporateLocation'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
					summary: 'Update Counterparty Corporate Location',
					description: '<p>Update the geolocation of the counterparty\'s registered address</p>\n',
					description_markdown: 'Update the geolocation of the counterparty\'s registered address',
					example_request_body: {
						corporate_location: {
							latitude: 1.532,
							longitude: 1.535
						}
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow updating a corporate location',
						'Coordinates not possible',
						'Corporate Location cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							corporate_location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location'
				},
				{
					operation_id: 'OBPv3.1.0-createConsentSms',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createConsentSms'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/SMS',
					summary: 'Create Consent (SMS)',
					description: '<p>An OBP Consent allows the holder of the Consent to call one or more endpoints.</p>\n<p>Consents must be created and authorisied using SCA (Strong Customer Authentication).</p>\n<p>That is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.</p>\n<p>Each Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.</p>\n<p>This endpoint starts the process of creating a Consent.</p>\n<p>The Consent is created in an INITIATED state.</p>\n<p>A One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD<br />\nSCA_METHOD is typically &quot;SMS&quot; or &quot;EMAIL&quot;. &quot;EMAIL&quot; is used for testing purposes.</p>\n<p>When the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\nThis endpoint starts the process of creating a Consent.\n\nThe Consent is created in an INITIATED state.\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\nWhen the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						'for': 'ALL_MY_ACCOUNTS',
						view: 'owner',
						phone_number: '493081453994'
					},
					success_response_body: {
						consent_id: '9d429899-24f5-42c8-8565-943ffa6a7945',
						jwt: 'eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4',
						status: 'INITIATED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Consent',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							phone_number: {
								type: 'string'
							},
							view: {
								type: 'string'
							},
							'for': {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							status: {
								type: 'string'
							},
							jwt: {
								type: 'string'
							},
							consent_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/SMS'
				},
				{
					operation_id: 'OBPv3.0.0-getPublicAccountById',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getPublicAccountById'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/public/accounts/ACCOUNT_ID/VIEW_ID/account',
					summary: 'Get Public Account by Id',
					description: '<p>Returns information about an account that has a public view.</p>\n<p>The account is specified by ACCOUNT_ID. The information is moderated by the view specified by VIEW_ID.</p>\n<ul>\n<li>Number</li>\n<li>Owners</li>\n<li>Type</li>\n<li>Balance</li>\n<li>Routing</li>\n</ul>\n<p>PSD2 Context: PSD2 requires customers to have access to their account information via third party applications.<br />\nThis call provides balance and other account information via delegated authentication using OAuth.</p>\n<p>Authentication is Optional</p>\n',
					description_markdown: '\nReturns information about an account that has a public view.\n\nThe account is specified by ACCOUNT_ID. The information is moderated by the view specified by VIEW_ID.\n\n* Number\n* Owners\n* Type\n* Balance\n* Routing\n\n\nPSD2 Context: PSD2 requires customers to have access to their account information via third party applications.\nThis call provides balance and other account information via delegated authentication using OAuth.\n\nAuthentication is Optional\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						bank_id: 'String',
						label: 'String',
						number: 'String',
						owners: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}],
						type: 'String',
						balance: {
							currency: 'EUR',
							amount: '10'
						},
						account_routings: [{
							scheme: 'AccountNumber',
							address: '4930396'
						}],
						account_rules: [{
							scheme: 'OVERDRAFT',
							value: '10'
						}]
					},
					error_response_bodies: [
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Public',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							number: {
								type: 'string'
							},
							account_rules: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										scheme: {
											type: 'string'
										}
									}
								}
							},
							owners: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										display_name: {
											type: 'string'
										},
										provider: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							},
							id: {
								type: 'string'
							},
							balance: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							label: {
								type: 'string'
							},
							account_routings: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										address: {
											type: 'string'
										},
										scheme: {
											type: 'string'
										}
									}
								}
							},
							bank_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/public/accounts/ACCOUNT_ID/VIEW_ID/account'
				},
				{
					operation_id: 'OBPv3.0.0-getEntitlementRequestsForCurrentUser',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getEntitlementRequestsForCurrentUser'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/my/entitlement-requests',
					summary: 'Get Entitlement Requests for the current User.',
					description: '<p>Get Entitlement Requests for the current User.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get Entitlement Requests for the current User.\n\n\nAuthentication is Mandatory\n\n        ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						entitlement_requests: [{
							entitlement_request_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
							user: {
								user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
								email: 'eveline@example.com',
								provider_id: 'Chris',
								provider: 'http://127.0.0.1:8080',
								username: 'felixsmith',
								entitlements: {
									list: [{
										entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
										role_name: 'CanQueryOtherUser',
										bank_id: 'GENODEM1GLS'
									}]
								}
							},
							role_name: 'CanQueryOtherUser',
							bank_id: 'GENODEM1GLS',
							created: '2017-09-19T00:00:00Z'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20050: Current User is not a Super Admin!',
						'OBP-50200: Connector cannot return the data we requested.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							entitlement_requests: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										entitlement_request_id: {
											type: 'string'
										},
										created: {
											type: 'string',
											format: 'date-time'
										},
										user: {
											type: 'object',
											properties: {
												entitlements: {
													type: 'object',
													properties: {
														list: {
															type: 'array',
															items: {
																type: 'object',
																properties: {
																	bank_id: {
																		type: 'string'
																	},
																	role_name: {
																		type: 'string'
																	},
																	entitlement_id: {
																		type: 'string'
																	}
																}
															}
														}
													}
												},
												provider: {
													type: 'string'
												},
												email: {
													type: 'string'
												},
												provider_id: {
													type: 'string'
												},
												username: {
													type: 'string'
												},
												user_id: {
													type: 'string'
												}
											}
										},
										role_name: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/my/entitlement-requests'
				},
				{
					operation_id: 'OBPv2.0.0-addKycMedia',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'addKycMedia'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_media/KYC_MEDIA_ID',
					summary: 'Add KYC Media.',
					description: '<p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.</p>\n',
					description_markdown: 'Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.',
					example_request_body: {
						customer_number: '5987953',
						type: 'image',
						url: 'http://www.example.com/id-docs/123/image.png',
						date: '2017-09-19T00:00:00Z',
						relates_to_kyc_document_id: '123',
						relates_to_kyc_check_id: '123'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: 'PlaceholderString',
						id: 'PlaceholderString',
						customer_number: '5987953',
						type: 'PlaceholderString',
						url: 'PlaceholderString',
						date: '2017-09-19T00:00:00Z',
						relates_to_kyc_document_id: 'PlaceholderString',
						relates_to_kyc_check_id: 'PlaceholderString'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-00004: Server error: could not add message',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							date: {
								type: 'string',
								format: 'date-time'
							},
							url: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							relates_to_kyc_check_id: {
								type: 'string'
							},
							relates_to_kyc_document_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							relates_to_kyc_document_id: {
								type: 'string'
							},
							id: {
								type: 'string'
							},
							relates_to_kyc_check_id: {
								type: 'string'
							},
							url: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_media/KYC_MEDIA_ID'
				},
				{
					operation_id: 'OBPv1.2.1-addCounterpartyPhysicalLocation',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addCounterpartyPhysicalLocation'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
					summary: 'Add physical location to other bank account.',
					description: '<p>Add geocoordinates of the counterparty\'s main location</p>\n',
					description_markdown: 'Add geocoordinates of the counterparty\'s main location',
					example_request_body: {
						physical_location: {
							latitude: 1.532,
							longitude: 1.535
						}
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow adding a physical location',
						'Coordinates not possible',
						'Physical Location cannot be added',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							physical_location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location'
				},
				{
					operation_id: 'OBPv3.1.0-updatedCardForBank',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updatedCardForBank'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
					summary: 'Update Card',
					description: '<p>Update Card at bank specified by CARD_ID .<br />\nAuthentication is Mandatory</p>\n',
					description_markdown: 'Update Card at bank specified by CARD_ID .\nAuthentication is Mandatory\n',
					example_request_body: {
						card_type: 'Credit',
						name_on_card: 'SusanSmith',
						issue_number: '1',
						serial_number: '1324234',
						valid_from_date: '2017-09-19T00:00:00Z',
						expires_date: '2017-09-19T00:00:00Z',
						enabled: true,
						technology: 'technology1',
						networks: [
							'network1',
							'network2'
						],
						allows: [
							'credit',
							'debit'
						],
						account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						replacement: {
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'RENEW'
						},
						pin_reset: [{
								requested_date: '2017-09-19T00:00:00Z',
								reason_requested: 'FORGOT'
							},
							{
								requested_date: '2019-09-03T17:59:14Z',
								reason_requested: 'GOOD_SECURITY_PRACTICE'
							}
						],
						collected: '2017-09-19T00:00:00Z',
						posted: '2017-09-19T00:00:00Z',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
					},
					success_response_body: {
						card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
						bank_id: 'GENODEM1GLS',
						card_number: '364435172576215',
						card_type: 'Credit',
						name_on_card: 'SusanSmith',
						issue_number: '1',
						serial_number: '1324234',
						valid_from_date: '2017-09-19T00:00:00Z',
						expires_date: '2017-09-19T00:00:00Z',
						enabled: true,
						cancelled: true,
						on_hot_list: true,
						technology: 'technologyString1',
						networks: [
							'networks1'
						],
						allows: [
							'credit',
							'debit'
						],
						account: {
							id: '123',
							label: 'OBP',
							views_available: [{
								id: '123',
								short_name: 'short_name',
								description: 'description',
								is_public: true,
								alias: 'None',
								hide_metadata_if_alias_used: true,
								can_add_comment: true,
								can_add_corporate_location: true,
								can_add_image: true,
								can_add_image_url: true,
								can_add_more_info: true,
								can_add_open_corporates_url: true,
								can_add_physical_location: true,
								can_add_private_alias: true,
								can_add_public_alias: true,
								can_add_tag: true,
								can_add_url: true,
								can_add_where_tag: true,
								can_delete_comment: true,
								can_delete_corporate_location: true,
								can_delete_image: true,
								can_delete_physical_location: true,
								can_delete_tag: true,
								can_delete_where_tag: true,
								can_edit_owner_comment: true,
								can_see_bank_account_balance: true,
								can_see_bank_account_bank_name: true,
								can_see_bank_account_currency: true,
								can_see_bank_account_iban: true,
								can_see_bank_account_label: true,
								can_see_bank_account_national_identifier: true,
								can_see_bank_account_number: true,
								can_see_bank_account_owners: true,
								can_see_bank_account_swift_bic: true,
								can_see_bank_account_type: true,
								can_see_comments: true,
								can_see_corporate_location: true,
								can_see_image_url: true,
								can_see_images: true,
								can_see_more_info: true,
								can_see_open_corporates_url: true,
								can_see_other_account_bank_name: true,
								can_see_other_account_iban: true,
								can_see_other_account_kind: true,
								can_see_other_account_metadata: true,
								can_see_other_account_national_identifier: true,
								can_see_other_account_number: true,
								can_see_other_account_swift_bic: true,
								can_see_owner_comment: true,
								can_see_physical_location: true,
								can_see_private_alias: true,
								can_see_public_alias: true,
								can_see_tags: true,
								can_see_transaction_amount: true,
								can_see_transaction_balance: true,
								can_see_transaction_currency: true,
								can_see_transaction_description: true,
								can_see_transaction_finish_date: true,
								can_see_transaction_metadata: true,
								can_see_transaction_other_bank_account: true,
								can_see_transaction_start_date: true,
								can_see_transaction_this_bank_account: true,
								can_see_transaction_type: true,
								can_see_url: true,
								can_see_where_tag: true
							}],
							bank_id: 'GENODEM1GLS'
						},
						replacement: {
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'RENEW'
						},
						pin_reset: [{
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'FORGOT'
						}],
						collected: '2017-09-19T00:00:00Z',
						posted: '2017-09-19T00:00:00Z',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10015: Allowed values are: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							enabled: {
								type: 'boolean'
							},
							allows: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							technology: {
								type: 'string'
							},
							card_type: {
								type: 'string'
							},
							name_on_card: {
								type: 'string'
							},
							pin_reset: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										reason_requested: {
											type: 'string'
										},
										requested_date: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							},
							customer_id: {
								type: 'string'
							},
							replacement: {
								type: 'object',
								properties: {
									reason_requested: {
										type: 'string'
									},
									requested_date: {
										type: 'string',
										format: 'date-time'
									}
								}
							},
							valid_from_date: {
								type: 'string',
								format: 'date-time'
							},
							networks: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							issue_number: {
								type: 'string'
							},
							serial_number: {
								type: 'string'
							},
							posted: {
								type: 'string',
								format: 'date-time'
							},
							collected: {
								type: 'string',
								format: 'date-time'
							},
							expires_date: {
								type: 'string',
								format: 'date-time'
							},
							account_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							card_number: {
								type: 'string'
							},
							enabled: {
								type: 'boolean'
							},
							allows: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							on_hot_list: {
								type: 'boolean'
							},
							card_type: {
								type: 'string'
							},
							name_on_card: {
								type: 'string'
							},
							technology: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							replacement: {
								type: 'object',
								properties: {
									reason_requested: {
										type: 'string'
									},
									requested_date: {
										type: 'string',
										format: 'date-time'
									}
								}
							},
							pin_reset: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										reason_requested: {
											type: 'string'
										},
										requested_date: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							},
							valid_from_date: {
								type: 'string',
								format: 'date-time'
							},
							card_id: {
								type: 'string'
							},
							issue_number: {
								type: 'string'
							},
							serial_number: {
								type: 'string'
							},
							posted: {
								type: 'string',
								format: 'date-time'
							},
							cancelled: {
								type: 'boolean'
							},
							collected: {
								type: 'string',
								format: 'date-time'
							},
							expires_date: {
								type: 'string',
								format: 'date-time'
							},
							account: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									views_available: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												can_see_other_account_swift_bic: {
													type: 'boolean'
												},
												can_see_where_tag: {
													type: 'boolean'
												},
												can_see_url: {
													type: 'boolean'
												},
												can_see_bank_account_swift_bic: {
													type: 'boolean'
												},
												can_see_tags: {
													type: 'boolean'
												},
												can_see_transaction_balance: {
													type: 'boolean'
												},
												can_delete_corporate_location: {
													type: 'boolean'
												},
												can_add_image_url: {
													type: 'boolean'
												},
												can_see_public_alias: {
													type: 'boolean'
												},
												can_add_comment: {
													type: 'boolean'
												},
												description: {
													type: 'string'
												},
												can_see_corporate_location: {
													type: 'boolean'
												},
												can_see_other_account_bank_name: {
													type: 'boolean'
												},
												can_see_more_info: {
													type: 'boolean'
												},
												can_see_physical_location: {
													type: 'boolean'
												},
												can_edit_owner_comment: {
													type: 'boolean'
												},
												can_see_private_alias: {
													type: 'boolean'
												},
												can_see_bank_account_balance: {
													type: 'boolean'
												},
												can_add_public_alias: {
													type: 'boolean'
												},
												can_see_bank_account_owners: {
													type: 'boolean'
												},
												can_see_other_account_metadata: {
													type: 'boolean'
												},
												can_delete_physical_location: {
													type: 'boolean'
												},
												hide_metadata_if_alias_used: {
													type: 'boolean'
												},
												can_see_transaction_this_bank_account: {
													type: 'boolean'
												},
												can_see_image_url: {
													type: 'boolean'
												},
												can_see_transaction_type: {
													type: 'boolean'
												},
												can_see_images: {
													type: 'boolean'
												},
												can_see_transaction_amount: {
													type: 'boolean'
												},
												can_see_transaction_metadata: {
													type: 'boolean'
												},
												id: {
													type: 'string'
												},
												can_see_comments: {
													type: 'boolean'
												},
												can_see_other_account_iban: {
													type: 'boolean'
												},
												can_add_image: {
													type: 'boolean'
												},
												can_see_bank_account_type: {
													type: 'boolean'
												},
												can_see_other_account_kind: {
													type: 'boolean'
												},
												can_see_bank_account_currency: {
													type: 'boolean'
												},
												can_add_where_tag: {
													type: 'boolean'
												},
												can_see_transaction_start_date: {
													type: 'boolean'
												},
												can_see_bank_account_label: {
													type: 'boolean'
												},
												can_add_private_alias: {
													type: 'boolean'
												},
												can_see_transaction_currency: {
													type: 'boolean'
												},
												can_add_more_info: {
													type: 'boolean'
												},
												can_delete_comment: {
													type: 'boolean'
												},
												can_see_transaction_other_bank_account: {
													type: 'boolean'
												},
												can_see_bank_account_number: {
													type: 'boolean'
												},
												can_add_corporate_location: {
													type: 'boolean'
												},
												can_add_url: {
													type: 'boolean'
												},
												short_name: {
													type: 'string'
												},
												can_delete_where_tag: {
													type: 'boolean'
												},
												is_public: {
													type: 'boolean'
												},
												can_see_owner_comment: {
													type: 'boolean'
												},
												can_see_transaction_finish_date: {
													type: 'boolean'
												},
												can_see_open_corporates_url: {
													type: 'boolean'
												},
												can_add_physical_location: {
													type: 'boolean'
												},
												can_see_bank_account_iban: {
													type: 'boolean'
												},
												can_see_other_account_national_identifier: {
													type: 'boolean'
												},
												can_delete_image: {
													type: 'boolean'
												},
												can_add_tag: {
													type: 'boolean'
												},
												can_add_open_corporates_url: {
													type: 'boolean'
												},
												can_delete_tag: {
													type: 'boolean'
												},
												can_see_transaction_description: {
													type: 'boolean'
												},
												can_see_bank_account_national_identifier: {
													type: 'boolean'
												},
												can_see_other_account_number: {
													type: 'boolean'
												},
												can_see_bank_account_bank_name: {
													type: 'boolean'
												},
												alias: {
													type: 'string'
												}
											}
										}
									},
									label: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							networks: {
								type: 'array',
								items: {
									type: 'string'
								}
							}
						}
					},
					roles: [{
						role: 'CanCreateCardsForBank',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID'
				},
				{
					operation_id: 'OBPv3.1.0-getCheckbookOrders',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCheckbookOrders'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/checkbook/orders',
					summary: 'Get Checkbook orders',
					description: '<p><strong>NOTE: This endpoint currently only returns example data.</strong></p>\n<pre><code>  Get all checkbook orders\n</code></pre>\n',
					description_markdown: '**NOTE: This endpoint currently only returns example data.**\n\n      Get all checkbook orders',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						account: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
							account_type: '330',
							account_routings: [{
								scheme: 'AccountNumber',
								address: '4930396'
							}],
							branch_routings: [{
								scheme: 'BranchNumber',
								address: '678'
							}]
						},
						orders: [{
							order: {
								order_id: 'xjksajfkj',
								order_date: '07082013',
								number_of_checkbooks: '4',
								distribution_channel: '1201',
								status: '2',
								first_check_number: '5165276',
								shipping_code: '1'
							}
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50211: Connector did not return the set of check book.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							orders: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										order: {
											type: 'object',
											properties: {
												shipping_code: {
													type: 'string'
												},
												number_of_checkbooks: {
													type: 'string'
												},
												status: {
													type: 'string'
												},
												order_id: {
													type: 'string'
												},
												distribution_channel: {
													type: 'string'
												},
												first_check_number: {
													type: 'string'
												},
												order_date: {
													type: 'string'
												}
											}
										}
									}
								}
							},
							account: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									account_type: {
										type: 'string'
									},
									branch_routings: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												address: {
													type: 'string'
												},
												scheme: {
													type: 'string'
												}
											}
										}
									},
									account_routings: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												address: {
													type: 'string'
												},
												scheme: {
													type: 'string'
												}
											}
										}
									},
									account_id: {
										type: 'string'
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/checkbook/orders'
				},
				{
					operation_id: 'OBPv1.2.1-deleteImageForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteImageForViewOnTransaction'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images/IMAGE_ID',
					summary: 'Delete an image',
					description: '<p>Deletes the image IMAGE_ID about the transaction TRANSACTION_ID made on <a href="#1_2_1-getViewsForBankAccount">view</a>.</p>\n<p>Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.</p>\n',
					description_markdown: 'Deletes the image IMAGE_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-20001: User not logged in. Authentication is required!',
						'You must be able to see images in order to delete them',
						'Image not found for this transaction',
						'Deleting images not permitted for this view',
						'Deleting images not permitted for the current user',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images/IMAGE_ID'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerMobileNumber',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerMobileNumber'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/mobile-number',
					summary: 'Update the mobile number of a Customer',
					description: '<p>Update the mobile number of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the mobile number of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						mobile_phone_number: '+381631954907'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							mobile_phone_number: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerMobilePhoneNumber',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/mobile-number'
				},
				{
					operation_id: 'OBPv3.1.0-getTransactionRequests',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getTransactionRequests'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-requests',
					summary: 'Get Transaction Requests.',
					description: '<p>Returns transaction requests for account specified by ACCOUNT_ID at bank specified by BANK_ID.</p>\n<p>The VIEW_ID specified must be \'owner\' and the user must have access to this view.</p>\n<p>Version 2.0.0 now returns charge information.</p>\n<p>Transaction Requests serve to initiate transactions that may or may not proceed. They contain information including:</p>\n<ul>\n<li>Transaction Request Id</li>\n<li>Type</li>\n<li>Status (INITIATED, COMPLETED)</li>\n<li>Challenge (in order to confirm the request)</li>\n<li>From Bank / Account</li>\n<li>Details including Currency, Value, Description and other initiation information specific to each type. (Could potentialy include a list of future transactions.)</li>\n<li>Related Transactions</li>\n</ul>\n<p>PSD2 Context: PSD2 requires transparency of charges to the customer.<br />\nThis endpoint provides the charge that would be applied if the Transaction Request proceeds - and a record of that charge there after.<br />\nThe customer can proceed with the Transaction by answering the security challenge.</p>\n',
					description_markdown: 'Returns transaction requests for account specified by ACCOUNT_ID at bank specified by BANK_ID.\n\nThe VIEW_ID specified must be \'owner\' and the user must have access to this view.\n\nVersion 2.0.0 now returns charge information.\n\nTransaction Requests serve to initiate transactions that may or may not proceed. They contain information including:\n\n* Transaction Request Id\n* Type\n* Status (INITIATED, COMPLETED)\n* Challenge (in order to confirm the request)\n* From Bank / Account\n* Details including Currency, Value, Description and other initiation information specific to each type. (Could potentialy include a list of future transactions.)\n* Related Transactions\n\nPSD2 Context: PSD2 requires transparency of charges to the customer.\nThis endpoint provides the charge that would be applied if the Transaction Request proceeds - and a record of that charge there after.\nThe customer can proceed with the Transaction by answering the security challenge.\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						transaction_requests_with_charges: [{
							id: '4050046c-63b3-4868-8a22-14b4181d33a6',
							type: 'SANDBOX_TAN',
							from: {
								bank_id: 'GENODEM1GLS',
								account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
							},
							details: {
								to_sandbox_tan: {
									bank_id: 'String',
									account_id: 'String'
								},
								to_sepa: {
									iban: 'String'
								},
								to_counterparty: {
									counterparty_id: 'String'
								},
								to_transfer_to_phone: {
									value: {
										currency: 'EUR',
										amount: '10'
									},
									description: 'String',
									message: 'String',
									from: {
										mobile_phone_number: '+44 07972 444 876',
										nickname: 'String'
									},
									to: {
										mobile_phone_number: '+44 07972 444 876'
									}
								},
								to_transfer_to_atm: {
									value: {
										currency: 'EUR',
										amount: '10'
									},
									description: 'String',
									message: 'String',
									from: {
										mobile_phone_number: '+44 07972 444 876',
										nickname: 'String'
									},
									to: {
										legal_name: 'Eveline Tripman',
										date_of_birth: '20181230',
										mobile_phone_number: '+44 07972 444 876',
										kyc_document: {
											type: 'String',
											number: 'String'
										}
									}
								},
								to_transfer_to_account: {
									value: {
										currency: 'EUR',
										amount: '10'
									},
									description: 'String',
									transfer_type: 'String',
									future_date: '20181230',
									to: {
										name: 'String',
										bank_code: 'String',
										branch_number: 'String',
										account: {
											number: 'String',
											iban: 'String'
										}
									}
								},
								to_sepa_credit_transfers: {
									debtorAccount: {
										iban: '12345'
									},
									instructedAmount: {
										currency: 'EUR',
										amount: '10'
									},
									creditorAccount: {
										iban: '54321'
									},
									creditorName: 'John Miles'
								},
								value: {
									currency: 'EUR',
									amount: '100'
								},
								description: 'String'
							},
							transaction_ids: [
								'902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
							],
							status: 'COMPLETED',
							start_date: '2017-09-19T00:00:00Z',
							end_date: '2017-09-19T00:00:00Z',
							challenge: {
								id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
								allowed_attempts: 3,
								challenge_type: 'SANDBOX_TAN'
							},
							charge: {
								summary: 'Rent the flat',
								value: {
									currency: 'EUR',
									amount: '10'
								}
							}
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-20019: User does not have access to owner view. ',
						'OBP-60010: Get Transaction Requests Exception. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							transaction_requests_with_charges: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										type: {
											type: 'string'
										},
										challenge: {
											type: 'object',
											properties: {
												challenge_type: {
													type: 'string'
												},
												allowed_attempts: {
													type: 'integer'
												},
												id: {
													type: 'string'
												}
											}
										},
										status: {
											type: 'string'
										},
										charge: {
											type: 'object',
											properties: {
												value: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												summary: {
													type: 'string'
												}
											}
										},
										details: {
											type: 'object',
											properties: {
												to_sandbox_tan: {
													type: 'object',
													properties: {
														account_id: {
															type: 'string'
														},
														bank_id: {
															type: 'string'
														}
													}
												},
												value: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												to_sepa: {
													type: 'object',
													properties: {
														iban: {
															type: 'string'
														}
													}
												},
												description: {
													type: 'string'
												},
												to_transfer_to_atm: {
													type: 'object',
													properties: {
														description: {
															type: 'string'
														},
														message: {
															type: 'string'
														},
														value: {
															type: 'object',
															properties: {
																amount: {
																	type: 'string'
																},
																currency: {
																	type: 'string'
																}
															}
														},
														from: {
															type: 'object',
															properties: {
																nickname: {
																	type: 'string'
																},
																mobile_phone_number: {
																	type: 'string'
																}
															}
														},
														to: {
															type: 'object',
															properties: {
																kyc_document: {
																	type: 'object',
																	properties: {
																		number: {
																			type: 'string'
																		},
																		type: {
																			type: 'string'
																		}
																	}
																},
																mobile_phone_number: {
																	type: 'string'
																},
																date_of_birth: {
																	type: 'string'
																},
																legal_name: {
																	type: 'string'
																}
															}
														}
													}
												},
												to_sepa_credit_transfers: {
													type: 'object',
													properties: {
														creditorName: {
															type: 'string'
														},
														creditorAccount: {
															type: 'object',
															properties: {
																iban: {
																	type: 'string'
																}
															}
														},
														instructedAmount: {
															type: 'object',
															properties: {
																amount: {
																	type: 'string'
																},
																currency: {
																	type: 'string'
																}
															}
														},
														debtorAccount: {
															type: 'object',
															properties: {
																iban: {
																	type: 'string'
																}
															}
														}
													}
												},
												to_counterparty: {
													type: 'object',
													properties: {
														counterparty_id: {
															type: 'string'
														}
													}
												},
												to_transfer_to_phone: {
													type: 'object',
													properties: {
														description: {
															type: 'string'
														},
														message: {
															type: 'string'
														},
														value: {
															type: 'object',
															properties: {
																amount: {
																	type: 'string'
																},
																currency: {
																	type: 'string'
																}
															}
														},
														from: {
															type: 'object',
															properties: {
																nickname: {
																	type: 'string'
																},
																mobile_phone_number: {
																	type: 'string'
																}
															}
														},
														to: {
															type: 'object',
															properties: {
																mobile_phone_number: {
																	type: 'string'
																}
															}
														}
													}
												},
												to_transfer_to_account: {
													type: 'object',
													properties: {
														to: {
															type: 'object',
															properties: {
																account: {
																	type: 'object',
																	properties: {
																		iban: {
																			type: 'string'
																		},
																		number: {
																			type: 'string'
																		}
																	}
																},
																branch_number: {
																	type: 'string'
																},
																bank_code: {
																	type: 'string'
																},
																name: {
																	type: 'string'
																}
															}
														},
														transfer_type: {
															type: 'string'
														},
														description: {
															type: 'string'
														},
														value: {
															type: 'object',
															properties: {
																amount: {
																	type: 'string'
																},
																currency: {
																	type: 'string'
																}
															}
														},
														future_date: {
															type: 'string'
														}
													}
												}
											}
										},
										end_date: {
											type: 'string',
											format: 'date-time'
										},
										start_date: {
											type: 'string',
											format: 'date-time'
										},
										transaction_ids: {
											type: 'array',
											items: {
												type: 'string'
											}
										},
										from: {
											type: 'object',
											properties: {
												account_id: {
													type: 'string'
												},
												bank_id: {
													type: 'string'
												}
											}
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-requests'
				},
				{
					operation_id: 'OBPv3.0.0-getBranches',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getBranches'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches',
					summary: 'Get Branches for a Bank',
					description: '<p>Returns information about branches for a single bank specified by BANK_ID including:</p>\n<ul>\n<li>Name</li>\n<li>Address</li>\n<li>Geo Location</li>\n<li>License the data under this endpoint is released under</li>\n<li>Structured opening hours</li>\n<li>Accessible flag</li>\n<li>Branch Type</li>\n<li>More Info</li>\n</ul>\n<p>Pagination:</p>\n<p>By default, 50 records are returned.</p>\n<p>You can use the url query parameters <em>limit</em> and <em>offset</em> for pagination<br />\nYou can also use the follow url query parameters:</p>\n<ul>\n<li>\n<p>city - string, find Branches those in this city, optional</p>\n</li>\n<li>\n<p>withinMetersOf - number, find Branches within given meters distance, optional</p>\n</li>\n<li>nearLatitude - number, a position of latitude value, cooperate with withMetersOf do query filter, optional</li>\n<li>nearLongitude - number, a position of longitude value, cooperate with withMetersOf do query filter, optional</li>\n</ul>\n<p>note: withinMetersOf, nearLatitude and nearLongitude either all empty or all have value.</p>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns information about branches for a single bank specified by BANK_ID including:\n\n* Name\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n* Structured opening hours\n* Accessible flag\n* Branch Type\n* More Info\n\nPagination:\n\nBy default, 50 records are returned.\n\nYou can use the url query parameters *limit* and *offset* for pagination\nYou can also use the follow url query parameters:\n\n  - city - string, find Branches those in this city, optional\n\n\n  - withinMetersOf - number, find Branches within given meters distance, optional\n  - nearLatitude - number, a position of latitude value, cooperate with withMetersOf do query filter, optional\n  - nearLongitude - number, a position of longitude value, cooperate with withMetersOf do query filter, optional\n\nnote: withinMetersOf, nearLatitude and nearLongitude either all empty or all have value.\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						branches: [{
							id: 'branch-id-123',
							bank_id: 'bank-id-123',
							name: 'Branch by the Lake',
							address: {
								line_1: 'No 1 the Road',
								line_2: 'The Place',
								line_3: 'The Hill',
								city: 'Berlin',
								county: 'String',
								state: 'Brandenburg',
								postcode: '13359',
								country_code: 'DE'
							},
							location: {
								latitude: 10,
								longitude: 10
							},
							meta: {
								license: {
									id: 'PDDL',
									name: 'Open Data Commons Public Domain Dedication and License '
								}
							},
							lobby: {
								monday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}],
								tuesday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}],
								wednesday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}],
								thursday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}],
								friday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}],
								saturday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}],
								sunday: [{
									opening_time: '10:00',
									closing_time: '18:00'
								}]
							},
							drive_up: {
								monday: {
									opening_time: '10:00',
									closing_time: '18:00'
								},
								tuesday: {
									opening_time: '10:00',
									closing_time: '18:00'
								},
								wednesday: {
									opening_time: '10:00',
									closing_time: '18:00'
								},
								thursday: {
									opening_time: '10:00',
									closing_time: '18:00'
								},
								friday: {
									opening_time: '10:00',
									closing_time: '18:00'
								},
								saturday: {
									opening_time: '10:00',
									closing_time: '18:00'
								},
								sunday: {
									opening_time: '10:00',
									closing_time: '18:00'
								}
							},
							branch_routing: {
								scheme: 'OBP',
								address: '123abc'
							},
							is_accessible: 'true',
							accessibleFeatures: 'wheelchair, atm usuable by the visually impaired',
							branch_type: 'Full service store',
							more_info: 'short walk to the lake from here',
							phone_number: '+381631954907'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'No branches available. License may not be set.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Branch',
						'Bank',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							branches: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										accessibleFeatures: {
											type: 'string'
										},
										more_info: {
											type: 'string'
										},
										branch_type: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										bank_id: {
											type: 'string'
										},
										location: {
											type: 'object',
											properties: {
												longitude: {
													type: 'number'
												},
												latitude: {
													type: 'number'
												}
											}
										},
										id: {
											type: 'string'
										},
										is_accessible: {
											type: 'string'
										},
										address: {
											type: 'object',
											properties: {
												city: {
													type: 'string'
												},
												county: {
													type: 'string'
												},
												postcode: {
													type: 'string'
												},
												line_1: {
													type: 'string'
												},
												line_2: {
													type: 'string'
												},
												line_3: {
													type: 'string'
												},
												state: {
													type: 'string'
												},
												country_code: {
													type: 'string'
												}
											}
										},
										drive_up: {
											type: 'object',
											properties: {
												friday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												},
												monday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												},
												saturday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												},
												thursday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												},
												tuesday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												},
												wednesday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												},
												sunday: {
													type: 'object',
													properties: {
														closing_time: {
															type: 'string'
														},
														opening_time: {
															type: 'string'
														}
													}
												}
											}
										},
										branch_routing: {
											type: 'object',
											properties: {
												address: {
													type: 'string'
												},
												scheme: {
													type: 'string'
												}
											}
										},
										phone_number: {
											type: 'string'
										},
										meta: {
											type: 'object',
											properties: {
												license: {
													type: 'object',
													properties: {
														name: {
															type: 'string'
														},
														id: {
															type: 'string'
														}
													}
												}
											}
										},
										lobby: {
											type: 'object',
											properties: {
												saturday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												},
												tuesday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												},
												monday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												},
												friday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												},
												sunday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												},
												wednesday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												},
												thursday: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															closing_time: {
																type: 'string'
															},
															opening_time: {
																type: 'string'
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches'
				},
				{
					operation_id: 'OBPv3.1.0-createTaxResidence',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createTaxResidence'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residence',
					summary: 'Add Tax Residence to Customer',
					description: '<p>Add a Tax Residence to the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Add a Tax Residence to the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						domain: 'Enter some domain',
						tax_number: 'Enter some number'
					},
					success_response_body: {
						domain: 'Enter some domain',
						tax_number: 'Enter some number',
						tax_residence_id: '902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'KYC',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							tax_number: {
								type: 'string'
							},
							domain: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							tax_residence_id: {
								type: 'string'
							},
							tax_number: {
								type: 'string'
							},
							domain: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateTaxResidence',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residence'
				},
				{
					operation_id: 'OBPv3.0.0-getCoreAccountById',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getCoreAccountById'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/account',
					summary: 'Get Account by Id (Core)',
					description: '<p>Information returned about the account specified by ACCOUNT_ID:</p>\n<ul>\n<li>Number - The human readable account number given by the bank that identifies the account.</li>\n<li>Label - A label given by the owner of the account</li>\n<li>Owners - Users that own this account</li>\n<li>Type - The type of account</li>\n<li>Balance - Currency and Value</li>\n<li>Account Routings - A list that might include IBAN or national account identifiers</li>\n<li>Account Rules - A list that might include Overdraft and other bank specific rules</li>\n</ul>\n<p>This call returns the owner view and requires access to that view.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Information returned about the account specified by ACCOUNT_ID:\n\n* Number - The human readable account number given by the bank that identifies the account.\n* Label - A label given by the owner of the account\n* Owners - Users that own this account\n* Type - The type of account\n* Balance - Currency and Value\n* Account Routings - A list that might include IBAN or national account identifiers\n* Account Rules - A list that might include Overdraft and other bank specific rules\n\nThis call returns the owner view and requires access to that view.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						bank_id: 'GENODEM1GLS',
						label: 'My Account',
						number: '546387432',
						owners: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}],
						type: 'AC',
						balance: {
							currency: 'EUR',
							amount: '10'
						},
						account_routings: [{
							scheme: 'AccountNumber',
							address: '4930396'
						}],
						views_basic: [{
							id: 'owner',
							short_name: 'Owner',
							description: 'This view is for the owner for the account.',
							is_public: false
						}],
						account_attributes: [{
							product_code: 'saving1',
							account_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
							name: 'OVERDRAFT_START_DATE',
							type: 'DATE_WITH_DAY',
							value: '2012-04-23'
						}]
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: false,
					tags: [
						'Account',
						'Account Information Service (AIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							account_attributes: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										account_attribute_id: {
											type: 'string'
										},
										type: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										product_code: {
											type: 'string'
										}
									}
								}
							},
							owners: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										display_name: {
											type: 'string'
										},
										provider: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							},
							label: {
								type: 'string'
							},
							views_basic: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										is_public: {
											type: 'boolean'
										},
										description: {
											type: 'string'
										},
										short_name: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							},
							balance: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							account_routings: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										address: {
											type: 'string'
										},
										scheme: {
											type: 'string'
										}
									}
								}
							},
							id: {
								type: 'string'
							},
							number: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/account'
				},
				{
					operation_id: 'OBPv1.2.1-addTagForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'addTagForViewOnTransaction'
					},
					request_verb: 'POST',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags',
					summary: 'Add a tag.',
					description: '<p>Posts a tag about a transaction TRANSACTION_ID on a <a href="#1_2_1-getViewsForBankAccount">view</a> VIEW_ID.</p>\n<p>Authentication is Mandatory</p>\n<p>Authentication is required as the tag is linked with the user.</p>\n',
					description_markdown: 'Posts a tag about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\nAuthentication is Mandatory\n\nAuthentication is required as the tag is linked with the user.',
					example_request_body: {
						value: 'String'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						value: 'OBP',
						date: '2017-09-19T00:00:00Z',
						user: {
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user: {
								type: 'object',
								properties: {
									display_name: {
										type: 'string'
									},
									provider: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							date: {
								type: 'string',
								format: 'date-time'
							},
							value: {
								type: 'string'
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags'
				},
				{
					operation_id: 'OBPv2.0.0-getKycChecks',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getKycChecks'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/customers/CUSTOMER_ID/kyc_checks',
					summary: 'Get Customer KYC Checks',
					description: '<p>Get KYC checks for the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get KYC checks for the Customer specified by CUSTOMER_ID.\n\nAuthentication is Mandatory',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						checks: [{
							bank_id: 'GENODEM1GLS',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							id: 'PlaceholderString',
							customer_number: '5987953',
							date: '2017-09-19T00:00:00Z',
							how: 'PlaceholderString',
							staff_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							staff_name: 'PlaceholderString',
							satisfied: true,
							comments: 'PlaceholderString'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'KYC',
						'Customer'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							checks: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										date: {
											type: 'string',
											format: 'date-time'
										},
										comments: {
											type: 'string'
										},
										customer_id: {
											type: 'string'
										},
										staff_user_id: {
											type: 'string'
										},
										customer_number: {
											type: 'string'
										},
										id: {
											type: 'string'
										},
										satisfied: {
											type: 'boolean'
										},
										how: {
											type: 'string'
										},
										staff_name: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_checks'
				},
				{
					operation_id: 'OBPv3.1.0-getProducts',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getProducts'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products',
					summary: 'Get Products',
					description: '<p>Returns information about the financial products offered by a bank specified by BANK_ID including:</p>\n<ul>\n<li>Name</li>\n<li>Code</li>\n<li>Parent Product Code</li>\n<li>Category</li>\n<li>Family</li>\n<li>Super Family</li>\n<li>More info URL</li>\n<li>Description</li>\n<li>Terms and Conditions</li>\n<li>License the data under this endpoint is released under<br />\nAuthentication is Optional</li>\n</ul>\n',
					description_markdown: 'Returns information about the financial products offered by a bank specified by BANK_ID including:\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License the data under this endpoint is released under\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						products: [{
							bank_id: 'GENODEM1GLS',
							code: 'product_code',
							parent_product_code: 'parent',
							name: 'product name',
							category: 'category',
							family: 'family',
							super_family: 'super family',
							more_info_url: 'www.example.com/prod1/more-info.html',
							details: 'Details',
							description: 'Description',
							meta: {
								license: {
									id: '5',
									name: 'TESOBE'
								}
							},
							product_attributes: [{
								product_code: 'saving1',
								product_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
								name: 'OVERDRAFT_START_DATE',
								type: 'DATE_WITH_DAY',
								value: '2012-04-23'
							}]
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30011: Product not found. Please specify a valid value for PRODUCT_CODE.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Product'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							products: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										super_family: {
											type: 'string'
										},
										bank_id: {
											type: 'string'
										},
										product_attributes: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													value: {
														type: 'string'
													},
													product_attribute_id: {
														type: 'string'
													},
													type: {
														type: 'string'
													},
													name: {
														type: 'string'
													},
													product_code: {
														type: 'string'
													}
												}
											}
										},
										description: {
											type: 'string'
										},
										details: {
											type: 'string'
										},
										code: {
											type: 'string'
										},
										parent_product_code: {
											type: 'string'
										},
										more_info_url: {
											type: 'string'
										},
										family: {
											type: 'string'
										},
										meta: {
											type: 'object',
											properties: {
												license: {
													type: 'object',
													properties: {
														name: {
															type: 'string'
														},
														id: {
															type: 'string'
														}
													}
												}
											}
										},
										name: {
											type: 'string'
										},
										category: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products'
				},
				{
					operation_id: 'OBPv3.1.0-getCardForBank',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCardForBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
					summary: 'Get Card By Id',
					description: '<p>This will the datails of the card.<br />\nIt shows the account infomation which linked the the card.<br />\nAlso shows the card attributes of the card.</p>\n',
					description_markdown: '\nThis will the datails of the card.\nIt shows the account infomation which linked the the card.\nAlso shows the card attributes of the card. \n\n       ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
						bank_id: 'GENODEM1GLS',
						card_number: '364435172576215',
						card_type: 'Credit',
						name_on_card: 'SusanSmith',
						issue_number: '1',
						serial_number: '1324234',
						valid_from_date: '2017-09-19T00:00:00Z',
						expires_date: '2017-09-19T00:00:00Z',
						enabled: true,
						cancelled: true,
						on_hot_list: true,
						technology: 'technologyString1',
						networks: [
							'networks1'
						],
						allows: [
							'credit',
							'debit'
						],
						account: {
							id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
							label: 'My Account',
							views_available: [{
								id: 'owner',
								name: 'Owner',
								description: 'This view is for the owner for the account.'
							}],
							bank_id: 'GENODEM1GLS'
						},
						replacement: {
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'RENEW'
						},
						pin_reset: [{
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'FORGOT'
						}],
						collected: '2017-09-19T00:00:00Z',
						posted: '2017-09-19T00:00:00Z',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						card_attributes: [{
							name: 'OVERDRAFT_START_DATE',
							card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
							attribute_type: {
								i: 0,
								name: 'STRING'
							},
							bank_id: {
								value: 'GENODEM1GLS'
							},
							value: '2012-04-23',
							card_attribute_id: 'b4e0352a-9a0f-4bfa-b30b-9003aa467f50'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							card_number: {
								type: 'string'
							},
							enabled: {
								type: 'boolean'
							},
							allows: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							on_hot_list: {
								type: 'boolean'
							},
							card_type: {
								type: 'string'
							},
							name_on_card: {
								type: 'string'
							},
							technology: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							replacement: {
								type: 'object',
								properties: {
									reason_requested: {
										type: 'string'
									},
									requested_date: {
										type: 'string',
										format: 'date-time'
									}
								}
							},
							pin_reset: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										reason_requested: {
											type: 'string'
										},
										requested_date: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							},
							valid_from_date: {
								type: 'string',
								format: 'date-time'
							},
							account: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									views_available: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												description: {
													type: 'string'
												},
												name: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										}
									},
									label: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							card_id: {
								type: 'string'
							},
							issue_number: {
								type: 'string'
							},
							card_attributes: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										card_id: {
											type: 'string'
										},
										name: {
											type: 'string'
										},
										card_attribute_id: {
											type: 'string'
										},
										attribute_type: {
											type: 'object',
											properties: {
												name: {
													type: 'string'
												},
												i: {
													type: 'integer'
												}
											}
										},
										bank_id: {
											type: 'object',
											properties: {
												value: {
													type: 'string'
												}
											}
										}
									}
								}
							},
							serial_number: {
								type: 'string'
							},
							posted: {
								type: 'string',
								format: 'date-time'
							},
							cancelled: {
								type: 'boolean'
							},
							collected: {
								type: 'string',
								format: 'date-time'
							},
							expires_date: {
								type: 'string',
								format: 'date-time'
							},
							networks: {
								type: 'array',
								items: {
									type: 'string'
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyOpenCorporatesUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyOpenCorporatesUrl'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
					summary: 'Delete Counterparty Open Corporates URL',
					description: '<p>Delete open corporate url of other bank account.</p>\n',
					description_markdown: 'Delete open corporate url of other bank account.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow deleting an open corporate url',
						'URL cannot be deleted',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url'
				},
				{
					operation_id: 'OBPv1.2.1-deleteTransactionNarrative',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteTransactionNarrative'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					summary: 'Delete narrative.',
					description: '<p>Deletes the description of the transaction TRANSACTION_ID.</p>\n<p>Authentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Deletes the description of the transaction TRANSACTION_ID.\n\nAuthentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative'
				},
				{
					operation_id: 'OBPv3.1.0-addCardForBank',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'addCardForBank'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards',
					summary: 'Create Card',
					description: '<p>Create Card at bank specified by BANK_ID .</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create Card at bank specified by BANK_ID .\n\nAuthentication is Mandatory\n',
					example_request_body: {
						card_number: '364435172576215',
						card_type: 'Credit',
						name_on_card: 'SusanSmith',
						issue_number: '1',
						serial_number: '1324234',
						valid_from_date: '2017-09-19T00:00:00Z',
						expires_date: '2017-09-19T00:00:00Z',
						enabled: true,
						technology: 'technology1',
						networks: [
							'network1',
							'network2'
						],
						allows: [
							'credit',
							'debit'
						],
						account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						replacement: {
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'RENEW'
						},
						pin_reset: [{
								requested_date: '2017-09-19T00:00:00Z',
								reason_requested: 'FORGOT'
							},
							{
								requested_date: '2019-09-03T17:59:14Z',
								reason_requested: 'GOOD_SECURITY_PRACTICE'
							}
						],
						collected: '2017-09-19T00:00:00Z',
						posted: '2017-09-19T00:00:00Z',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
					},
					success_response_body: {
						card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
						bank_id: 'GENODEM1GLS',
						card_number: '364435172576215',
						card_type: 'Credit',
						name_on_card: 'SusanSmith',
						issue_number: '1',
						serial_number: '1324234',
						valid_from_date: '2017-09-19T00:00:00Z',
						expires_date: '2017-09-19T00:00:00Z',
						enabled: true,
						cancelled: true,
						on_hot_list: true,
						technology: 'technologyString1',
						networks: [
							'networks1'
						],
						allows: [
							'credit',
							'debit'
						],
						account: {
							id: '123',
							label: 'OBP',
							views_available: [{
								id: '123',
								short_name: 'short_name',
								description: 'description',
								is_public: true,
								alias: 'None',
								hide_metadata_if_alias_used: true,
								can_add_comment: true,
								can_add_corporate_location: true,
								can_add_image: true,
								can_add_image_url: true,
								can_add_more_info: true,
								can_add_open_corporates_url: true,
								can_add_physical_location: true,
								can_add_private_alias: true,
								can_add_public_alias: true,
								can_add_tag: true,
								can_add_url: true,
								can_add_where_tag: true,
								can_delete_comment: true,
								can_delete_corporate_location: true,
								can_delete_image: true,
								can_delete_physical_location: true,
								can_delete_tag: true,
								can_delete_where_tag: true,
								can_edit_owner_comment: true,
								can_see_bank_account_balance: true,
								can_see_bank_account_bank_name: true,
								can_see_bank_account_currency: true,
								can_see_bank_account_iban: true,
								can_see_bank_account_label: true,
								can_see_bank_account_national_identifier: true,
								can_see_bank_account_number: true,
								can_see_bank_account_owners: true,
								can_see_bank_account_swift_bic: true,
								can_see_bank_account_type: true,
								can_see_comments: true,
								can_see_corporate_location: true,
								can_see_image_url: true,
								can_see_images: true,
								can_see_more_info: true,
								can_see_open_corporates_url: true,
								can_see_other_account_bank_name: true,
								can_see_other_account_iban: true,
								can_see_other_account_kind: true,
								can_see_other_account_metadata: true,
								can_see_other_account_national_identifier: true,
								can_see_other_account_number: true,
								can_see_other_account_swift_bic: true,
								can_see_owner_comment: true,
								can_see_physical_location: true,
								can_see_private_alias: true,
								can_see_public_alias: true,
								can_see_tags: true,
								can_see_transaction_amount: true,
								can_see_transaction_balance: true,
								can_see_transaction_currency: true,
								can_see_transaction_description: true,
								can_see_transaction_finish_date: true,
								can_see_transaction_metadata: true,
								can_see_transaction_other_bank_account: true,
								can_see_transaction_start_date: true,
								can_see_transaction_this_bank_account: true,
								can_see_transaction_type: true,
								can_see_url: true,
								can_see_where_tag: true
							}],
							bank_id: 'GENODEM1GLS'
						},
						replacement: {
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'RENEW'
						},
						pin_reset: [{
							requested_date: '2017-09-19T00:00:00Z',
							reason_requested: 'FORGOT'
						}],
						collected: '2017-09-19T00:00:00Z',
						posted: '2017-09-19T00:00:00Z',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10015: Allowed values are: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							card_number: {
								type: 'string'
							},
							enabled: {
								type: 'boolean'
							},
							allows: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							technology: {
								type: 'string'
							},
							card_type: {
								type: 'string'
							},
							name_on_card: {
								type: 'string'
							},
							pin_reset: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										reason_requested: {
											type: 'string'
										},
										requested_date: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							},
							customer_id: {
								type: 'string'
							},
							replacement: {
								type: 'object',
								properties: {
									reason_requested: {
										type: 'string'
									},
									requested_date: {
										type: 'string',
										format: 'date-time'
									}
								}
							},
							valid_from_date: {
								type: 'string',
								format: 'date-time'
							},
							networks: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							issue_number: {
								type: 'string'
							},
							serial_number: {
								type: 'string'
							},
							posted: {
								type: 'string',
								format: 'date-time'
							},
							collected: {
								type: 'string',
								format: 'date-time'
							},
							expires_date: {
								type: 'string',
								format: 'date-time'
							},
							account_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							card_number: {
								type: 'string'
							},
							enabled: {
								type: 'boolean'
							},
							allows: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							on_hot_list: {
								type: 'boolean'
							},
							card_type: {
								type: 'string'
							},
							name_on_card: {
								type: 'string'
							},
							technology: {
								type: 'string'
							},
							customer_id: {
								type: 'string'
							},
							replacement: {
								type: 'object',
								properties: {
									reason_requested: {
										type: 'string'
									},
									requested_date: {
										type: 'string',
										format: 'date-time'
									}
								}
							},
							pin_reset: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										reason_requested: {
											type: 'string'
										},
										requested_date: {
											type: 'string',
											format: 'date-time'
										}
									}
								}
							},
							valid_from_date: {
								type: 'string',
								format: 'date-time'
							},
							card_id: {
								type: 'string'
							},
							issue_number: {
								type: 'string'
							},
							serial_number: {
								type: 'string'
							},
							posted: {
								type: 'string',
								format: 'date-time'
							},
							cancelled: {
								type: 'boolean'
							},
							collected: {
								type: 'string',
								format: 'date-time'
							},
							expires_date: {
								type: 'string',
								format: 'date-time'
							},
							account: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									views_available: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												can_see_other_account_swift_bic: {
													type: 'boolean'
												},
												can_see_where_tag: {
													type: 'boolean'
												},
												can_see_url: {
													type: 'boolean'
												},
												can_see_bank_account_swift_bic: {
													type: 'boolean'
												},
												can_see_tags: {
													type: 'boolean'
												},
												can_see_transaction_balance: {
													type: 'boolean'
												},
												can_delete_corporate_location: {
													type: 'boolean'
												},
												can_add_image_url: {
													type: 'boolean'
												},
												can_see_public_alias: {
													type: 'boolean'
												},
												can_add_comment: {
													type: 'boolean'
												},
												description: {
													type: 'string'
												},
												can_see_corporate_location: {
													type: 'boolean'
												},
												can_see_other_account_bank_name: {
													type: 'boolean'
												},
												can_see_more_info: {
													type: 'boolean'
												},
												can_see_physical_location: {
													type: 'boolean'
												},
												can_edit_owner_comment: {
													type: 'boolean'
												},
												can_see_private_alias: {
													type: 'boolean'
												},
												can_see_bank_account_balance: {
													type: 'boolean'
												},
												can_add_public_alias: {
													type: 'boolean'
												},
												can_see_bank_account_owners: {
													type: 'boolean'
												},
												can_see_other_account_metadata: {
													type: 'boolean'
												},
												can_delete_physical_location: {
													type: 'boolean'
												},
												hide_metadata_if_alias_used: {
													type: 'boolean'
												},
												can_see_transaction_this_bank_account: {
													type: 'boolean'
												},
												can_see_image_url: {
													type: 'boolean'
												},
												can_see_transaction_type: {
													type: 'boolean'
												},
												can_see_images: {
													type: 'boolean'
												},
												can_see_transaction_amount: {
													type: 'boolean'
												},
												can_see_transaction_metadata: {
													type: 'boolean'
												},
												id: {
													type: 'string'
												},
												can_see_comments: {
													type: 'boolean'
												},
												can_see_other_account_iban: {
													type: 'boolean'
												},
												can_add_image: {
													type: 'boolean'
												},
												can_see_bank_account_type: {
													type: 'boolean'
												},
												can_see_other_account_kind: {
													type: 'boolean'
												},
												can_see_bank_account_currency: {
													type: 'boolean'
												},
												can_add_where_tag: {
													type: 'boolean'
												},
												can_see_transaction_start_date: {
													type: 'boolean'
												},
												can_see_bank_account_label: {
													type: 'boolean'
												},
												can_add_private_alias: {
													type: 'boolean'
												},
												can_see_transaction_currency: {
													type: 'boolean'
												},
												can_add_more_info: {
													type: 'boolean'
												},
												can_delete_comment: {
													type: 'boolean'
												},
												can_see_transaction_other_bank_account: {
													type: 'boolean'
												},
												can_see_bank_account_number: {
													type: 'boolean'
												},
												can_add_corporate_location: {
													type: 'boolean'
												},
												can_add_url: {
													type: 'boolean'
												},
												short_name: {
													type: 'string'
												},
												can_delete_where_tag: {
													type: 'boolean'
												},
												is_public: {
													type: 'boolean'
												},
												can_see_owner_comment: {
													type: 'boolean'
												},
												can_see_transaction_finish_date: {
													type: 'boolean'
												},
												can_see_open_corporates_url: {
													type: 'boolean'
												},
												can_add_physical_location: {
													type: 'boolean'
												},
												can_see_bank_account_iban: {
													type: 'boolean'
												},
												can_see_other_account_national_identifier: {
													type: 'boolean'
												},
												can_delete_image: {
													type: 'boolean'
												},
												can_add_tag: {
													type: 'boolean'
												},
												can_add_open_corporates_url: {
													type: 'boolean'
												},
												can_delete_tag: {
													type: 'boolean'
												},
												can_see_transaction_description: {
													type: 'boolean'
												},
												can_see_bank_account_national_identifier: {
													type: 'boolean'
												},
												can_see_other_account_number: {
													type: 'boolean'
												},
												can_see_bank_account_bank_name: {
													type: 'boolean'
												},
												alias: {
													type: 'string'
												}
											}
										}
									},
									label: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							networks: {
								type: 'array',
								items: {
									type: 'string'
								}
							}
						}
					},
					roles: [{
						role: 'CanCreateCardsForBank',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards'
				},
				{
					operation_id: 'OBPv3.1.0-updateCardAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCardAttribute'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attributes/CARD_ATTRIBUTE_ID',
					summary: 'Update Card Attribute',
					description: '<p>Update Card Attribute</p>\n<p>Card Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Card Attribute is linked to its Card by CARD_ID</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Update Card Attribute\n\nCard Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Card Attribute is linked to its Card by CARD_ID\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'OVERDRAFT_START_DATE',
						type: 'DOUBLE',
						value: '2012-04-23'
					},
					success_response_body: {
						name: 'OVERDRAFT_START_DATE',
						card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
						attribute_type: {
							i: 2,
							name: 'DOUBLE'
						},
						bank_id: {
							value: 'GENODEM1GLS'
						},
						value: '2012-04-23',
						card_attribute_id: 'b4e0352a-9a0f-4bfa-b30b-9003aa467f50'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							attribute_type: {
								type: 'object',
								properties: {
									name: {
										type: 'string'
									},
									i: {
										type: 'integer'
									}
								}
							},
							card_id: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							card_attribute_id: {
								type: 'string'
							},
							bank_id: {
								type: 'object',
								properties: {
									value: {
										type: 'string'
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attributes/CARD_ATTRIBUTE_ID'
				},
				{
					operation_id: 'OBPv4.0.0-createTransactionRequestFreeForm',
					implemented_by: {
						version: 'OBPv4.0.0',
						'function': 'createTransactionRequestFreeForm'
					},
					request_verb: 'POST',
					request_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/FREE_FORM/transaction-requests',
					summary: 'Create Transaction Request (FREE_FORM).',
					description: '<p>Initiate a Payment via creating a Transaction Request.</p>\n<p>In OBP, a <code>transaction request</code> may or may not result in a <code>transaction</code>. However, a <code>transaction</code> only has one possible state: completed.</p>\n<p>A <code>Transaction Request</code> can have one of several states.</p>\n<p><code>Transactions</code> are modeled on items in a bank statement that represent the movement of money.</p>\n<p><code>Transaction Requests</code> are requests to move money which may or may not succeeed and thus result in a <code>Transaction</code>.</p>\n<p>A <code>Transaction Request</code> might create a security challenge that needs to be answered before the <code>Transaction Request</code> proceeds.</p>\n<p>Transaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).</p>\n<p>Transaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.<br />\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.</p>\n<p>The payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.</p>\n<p>In sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.</p>\n<p>In sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.</p>\n<p>If a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.</p>\n<p>You can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.</p>\n<p>The following static FX rates are available in sandbox mode:</p>\n<p><a href="http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate">http://127.0.0.1:8082/more?version=OBPv4.0.0&amp;list-all-banks=false&amp;core=&amp;psd2=&amp;obwg=#OBPv2_2_0-getCurrentFxRate</a></p>\n<p>Transaction Requests satisfy PSD2 requirements thus:</p>\n<p>1) A transaction can be initiated by a third party application.</p>\n<p>2) The customer is informed of the charge that will incurred.</p>\n<p>3) The call supports delegated authentication (OAuth)</p>\n<p>See <a href="https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py">this python code</a> for a complete example of this flow.</p>\n<p>There is further documentation <a href="https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests">here</a></p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Initiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					example_request_body: {
						value: {
							currency: 'EUR',
							amount: '10'
						},
						description: 'This is a FREE_FORM Transaction Request'
					},
					success_response_body: {
						id: '4050046c-63b3-4868-8a22-14b4181d33a6',
						type: 'SANDBOX_TAN',
						from: {
							bank_id: 'GENODEM1GLS',
							account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0'
						},
						details: {
							to_sandbox_tan: {
								bank_id: 'String',
								account_id: 'String'
							},
							to_sepa: {
								iban: 'String'
							},
							to_counterparty: {
								counterparty_id: 'String'
							},
							to_transfer_to_phone: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									mobile_phone_number: '+44 07972 444 876'
								}
							},
							to_transfer_to_atm: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								message: 'String',
								from: {
									mobile_phone_number: '+44 07972 444 876',
									nickname: 'String'
								},
								to: {
									legal_name: 'Eveline Tripman',
									date_of_birth: '20181230',
									mobile_phone_number: '+44 07972 444 876',
									kyc_document: {
										type: 'String',
										number: 'String'
									}
								}
							},
							to_transfer_to_account: {
								value: {
									currency: 'EUR',
									amount: '10'
								},
								description: 'String',
								transfer_type: 'String',
								future_date: '20181230',
								to: {
									name: 'String',
									bank_code: 'String',
									branch_number: 'String',
									account: {
										number: 'String',
										iban: 'String'
									}
								}
							},
							to_sepa_credit_transfers: {
								debtorAccount: {
									iban: '12345'
								},
								instructedAmount: {
									currency: 'EUR',
									amount: '10'
								},
								creditorAccount: {
									iban: '54321'
								},
								creditorName: 'John Miles'
							},
							value: {
								currency: 'EUR',
								amount: '100'
							},
							description: 'String'
						},
						transaction_ids: [
							'902ba3bb-dedd-45e7-9319-2fd3f2cd98a1'
						],
						status: 'COMPLETED',
						start_date: '2017-09-19T00:00:00Z',
						end_date: '2017-09-19T00:00:00Z',
						challenge: {
							id: 'be1a183d-b301-4b83-b855-5eeffdd3526f',
							allowed_attempts: 3,
							challenge_type: 'SANDBOX_TAN'
						},
						charge: {
							summary: 'Rent the flat',
							value: {
								currency: 'EUR',
								amount: '10'
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.',
						'OBP-10001: Incorrect json format.',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID.',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-40002: Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.',
						'OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID.',
						'OBP-40001: Invalid value for TRANSACTION_REQUEST_TYPE',
						'OBP-10001: Incorrect json format.',
						'OBP-10002: Invalid Number. Could not convert value to a number.',
						'OBP-40008: Can\'t send a payment with a value of 0 or less.',
						'OBP-40003: Transaction Request Currency must be the same as From Account Currency.',
						'OBP-00003: Transaction Requests is disabled in this API instance.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Request',
						'Payment Initiation Service (PIS)',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							description: {
								type: 'string'
							},
							value: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							type: {
								type: 'string'
							},
							challenge: {
								type: 'object',
								properties: {
									challenge_type: {
										type: 'string'
									},
									allowed_attempts: {
										type: 'integer'
									},
									id: {
										type: 'string'
									}
								}
							},
							status: {
								type: 'string'
							},
							charge: {
								type: 'object',
								properties: {
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									summary: {
										type: 'string'
									}
								}
							},
							details: {
								type: 'object',
								properties: {
									to_sandbox_tan: {
										type: 'object',
										properties: {
											account_id: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											}
										}
									},
									value: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									to_sepa: {
										type: 'object',
										properties: {
											iban: {
												type: 'string'
											}
										}
									},
									description: {
										type: 'string'
									},
									to_transfer_to_atm: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													kyc_document: {
														type: 'object',
														properties: {
															number: {
																type: 'string'
															},
															type: {
																type: 'string'
															}
														}
													},
													mobile_phone_number: {
														type: 'string'
													},
													date_of_birth: {
														type: 'string'
													},
													legal_name: {
														type: 'string'
													}
												}
											}
										}
									},
									to_sepa_credit_transfers: {
										type: 'object',
										properties: {
											creditorName: {
												type: 'string'
											},
											creditorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											},
											instructedAmount: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											debtorAccount: {
												type: 'object',
												properties: {
													iban: {
														type: 'string'
													}
												}
											}
										}
									},
									to_counterparty: {
										type: 'object',
										properties: {
											counterparty_id: {
												type: 'string'
											}
										}
									},
									to_transfer_to_phone: {
										type: 'object',
										properties: {
											description: {
												type: 'string'
											},
											message: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											from: {
												type: 'object',
												properties: {
													nickname: {
														type: 'string'
													},
													mobile_phone_number: {
														type: 'string'
													}
												}
											},
											to: {
												type: 'object',
												properties: {
													mobile_phone_number: {
														type: 'string'
													}
												}
											}
										}
									},
									to_transfer_to_account: {
										type: 'object',
										properties: {
											to: {
												type: 'object',
												properties: {
													account: {
														type: 'object',
														properties: {
															iban: {
																type: 'string'
															},
															number: {
																type: 'string'
															}
														}
													},
													branch_number: {
														type: 'string'
													},
													bank_code: {
														type: 'string'
													},
													name: {
														type: 'string'
													}
												}
											},
											transfer_type: {
												type: 'string'
											},
											description: {
												type: 'string'
											},
											value: {
												type: 'object',
												properties: {
													amount: {
														type: 'string'
													},
													currency: {
														type: 'string'
													}
												}
											},
											future_date: {
												type: 'string'
											}
										}
									}
								}
							},
							end_date: {
								type: 'string',
								format: 'date-time'
							},
							start_date: {
								type: 'string',
								format: 'date-time'
							},
							transaction_ids: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							from: {
								type: 'object',
								properties: {
									account_id: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							}
						}
					},
					roles: [{
						role: 'CanCreateAnyTransactionRequest',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/FREE_FORM/transaction-requests'
				},
				{
					operation_id: 'OBPv3.1.0-updateCustomerBranch',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateCustomerBranch'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/branch',
					summary: 'Update the Branch of a Customer',
					description: '<p>Update the Branch of the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update the Branch of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						branch_id: '123'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							branch_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanUpdateCustomerIdentity',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/branch'
				},
				{
					operation_id: 'OBPv3.1.0-createAccountAttribute',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'createAccountAttribute'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attribute',
					summary: 'Create Account Attribute',
					description: '<p>Create Account Attribute</p>\n<p>Account Attributes are used to describe a financial Product with a list of typed key value pairs.</p>\n<p>Each Account Attribute is linked to its Account by ACCOUNT_ID</p>\n<p>Typical account attributes might be:</p>\n<p>ISIN (for International bonds)<br />\nVKN (for German bonds)<br />\nREDCODE (markit short code for credit derivative)<br />\nLOAN_ID (e.g. used for Anacredit reporting)</p>\n<p>ISSUE_DATE (When the bond was issued in the market)<br />\nMATURITY_DATE (End of life time of a product)<br />\nTRADABLE</p>\n<p>See <a href="http://www.fpml.org/">FPML</a> for more examples.</p>\n<p>The type field must be one of &quot;STRING&quot;, &quot;INTEGER&quot;, &quot;DOUBLE&quot; or DATE_WITH_DAY&quot;</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: ' Create Account Attribute\n\n\nAccount Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Account Attribute is linked to its Account by ACCOUNT_ID\n\n\n       \n\nTypical account attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					success_response_body: {
						product_code: 'saving1',
						account_attribute_id: '613c83ea-80f9-4560-8404-b9cd4ec42a7f',
						name: 'OVERDRAFT_START_DATE',
						type: 'DATE_WITH_DAY',
						value: '2012-04-23'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							value: {
								type: 'string'
							},
							account_attribute_id: {
								type: 'string'
							},
							type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							product_code: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attribute'
				},
				{
					operation_id: 'OBPv3.1.0-getProductTree',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getProductTree'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-tree/PRODUCT_CODE',
					summary: 'Get Product Tree',
					description: '<p>Returns information about a particular financial product specified by BANK_ID and PRODUCT_CODE<br />\nand it\'s parent product(s) recursively as specified by parent_product_code.</p>\n<p>Each product includes the following information.</p>\n<ul>\n<li>Name</li>\n<li>Code</li>\n<li>Parent Product Code</li>\n<li>Category</li>\n<li>Family</li>\n<li>Super Family</li>\n<li>More info URL</li>\n<li>Description</li>\n<li>Terms and Conditions</li>\n<li>License: The licence under which this product data is released. Licence can be an Open Data licence such as Open Data Commons Public Domain Dedication and License (PDDL) or Copyright etc.</li>\n</ul>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns information about a particular financial product specified by BANK_ID and PRODUCT_CODE\nand it\'s parent product(s) recursively as specified by parent_product_code.\n\nEach product includes the following information.\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License: The licence under which this product data is released. Licence can be an Open Data licence such as Open Data Commons Public Domain Dedication and License (PDDL) or Copyright etc.\n\n\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						bank_id: 'testBank2',
						code: 'PRODUCT_CODE',
						name: 'product name',
						category: 'category',
						family: 'family',
						super_family: 'super family',
						more_info_url: 'www.example.com/prod1/more-info.html',
						details: 'Details',
						description: 'Description',
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						parent_product: {
							bank_id: 'testBank2',
							code: 'PARENT_CODE',
							name: 'product name',
							category: 'category',
							family: 'family',
							super_family: 'super family',
							more_info_url: 'www.example.com/prod1/more-info.html',
							details: 'Details',
							description: 'Description',
							meta: {
								license: {
									id: '5',
									name: 'TESOBE'
								}
							},
							parent_product: {
								bank_id: 'testBank2',
								code: 'GRANDPARENT_CODE',
								name: 'product name',
								category: 'category',
								family: 'family',
								super_family: 'super family',
								more_info_url: 'www.example.com/prod1/more-info.html',
								details: 'Details',
								description: 'Description',
								meta: {
									license: {
										id: '5',
										name: 'TESOBE'
									}
								}
							}
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30011: Product not found. Please specify a valid value for PRODUCT_CODE.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Product'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							super_family: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							details: {
								type: 'string'
							},
							code: {
								type: 'string'
							},
							more_info_url: {
								type: 'string'
							},
							family: {
								type: 'string'
							},
							parent_product: {
								type: 'object',
								properties: {
									super_family: {
										type: 'string'
									},
									description: {
										type: 'string'
									},
									details: {
										type: 'string'
									},
									parent_product: {
										type: 'object',
										properties: {
											super_family: {
												type: 'string'
											},
											description: {
												type: 'string'
											},
											details: {
												type: 'string'
											},
											code: {
												type: 'string'
											},
											more_info_url: {
												type: 'string'
											},
											family: {
												type: 'string'
											},
											bank_id: {
												type: 'string'
											},
											meta: {
												type: 'object',
												properties: {
													license: {
														type: 'object',
														properties: {
															name: {
																type: 'string'
															},
															id: {
																type: 'string'
															}
														}
													}
												}
											},
											name: {
												type: 'string'
											},
											category: {
												type: 'string'
											}
										}
									},
									code: {
										type: 'string'
									},
									more_info_url: {
										type: 'string'
									},
									family: {
										type: 'string'
									},
									bank_id: {
										type: 'string'
									},
									meta: {
										type: 'object',
										properties: {
											license: {
												type: 'object',
												properties: {
													name: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											}
										}
									},
									name: {
										type: 'string'
									},
									category: {
										type: 'string'
									}
								}
							},
							bank_id: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							name: {
								type: 'string'
							},
							category: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-tree/PRODUCT_CODE'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyMoreInfo',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyMoreInfo'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
					summary: 'Delete more info of other bank account.',
					description: '',
					description_markdown: '',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow deleting more info',
						'More Info cannot be deleted',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info'
				},
				{
					operation_id: 'OBPv1.2.1-getTagsForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getTagsForViewOnTransaction'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags',
					summary: 'Get tags.',
					description: '<p>Returns the transaction TRANSACTION_ID tags made on a <a href="#1_2_1-getViewsForBankAccount">view</a> (VIEW_ID).<br />\nAuthentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Returns the transaction TRANSACTION_ID tags made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n         Authentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						value: 'OBP',
						date: '2017-09-19T00:00:00Z',
						user: {
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							provider: 'http://127.0.0.1:8080',
							display_name: 'OBP'
						}
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							user: {
								type: 'object',
								properties: {
									display_name: {
										type: 'string'
									},
									provider: {
										type: 'string'
									},
									id: {
										type: 'string'
									}
								}
							},
							date: {
								type: 'string',
								format: 'date-time'
							},
							value: {
								type: 'string'
							},
							id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags'
				},
				{
					operation_id: 'OBPv3.1.0-getSystemView',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getSystemView'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/system-views/VIEW_ID',
					summary: 'Get System View',
					description: '<p>Get System View</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Get System View\n\nAuthentication is Mandatory\n\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: '1234',
						short_name: 'short_name',
						description: 'description',
						is_public: true,
						alias: 'No',
						hide_metadata_if_alias_used: true,
						can_add_comment: true,
						can_add_corporate_location: true,
						can_add_image: true,
						can_add_image_url: true,
						can_add_more_info: true,
						can_add_open_corporates_url: true,
						can_add_physical_location: true,
						can_add_private_alias: true,
						can_add_public_alias: true,
						can_add_tag: true,
						can_add_url: true,
						can_add_where_tag: true,
						can_delete_comment: true,
						can_add_counterparty: true,
						can_delete_corporate_location: true,
						can_delete_image: true,
						can_delete_physical_location: true,
						can_delete_tag: true,
						can_delete_where_tag: true,
						can_edit_owner_comment: true,
						can_see_bank_account_balance: true,
						can_see_bank_account_bank_name: true,
						can_see_bank_account_currency: true,
						can_see_bank_account_iban: true,
						can_see_bank_account_label: true,
						can_see_bank_account_national_identifier: true,
						can_see_bank_account_number: true,
						can_see_bank_account_owners: true,
						can_see_bank_account_swift_bic: true,
						can_see_bank_account_type: true,
						can_see_comments: true,
						can_see_corporate_location: true,
						can_see_image_url: true,
						can_see_images: true,
						can_see_more_info: true,
						can_see_open_corporates_url: true,
						can_see_other_account_bank_name: true,
						can_see_other_account_iban: true,
						can_see_other_account_kind: true,
						can_see_other_account_metadata: true,
						can_see_other_account_national_identifier: true,
						can_see_other_account_number: true,
						can_see_other_account_swift_bic: true,
						can_see_owner_comment: true,
						can_see_physical_location: true,
						can_see_private_alias: true,
						can_see_public_alias: true,
						can_see_tags: true,
						can_see_transaction_amount: true,
						can_see_transaction_balance: true,
						can_see_transaction_currency: true,
						can_see_transaction_description: true,
						can_see_transaction_finish_date: true,
						can_see_transaction_metadata: true,
						can_see_transaction_other_bank_account: true,
						can_see_transaction_start_date: true,
						can_see_transaction_this_bank_account: true,
						can_see_transaction_type: true,
						can_see_url: true,
						can_see_where_tag: true
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'System-View',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							can_see_other_account_swift_bic: {
								type: 'boolean'
							},
							can_see_where_tag: {
								type: 'boolean'
							},
							can_see_url: {
								type: 'boolean'
							},
							can_see_bank_account_swift_bic: {
								type: 'boolean'
							},
							can_see_tags: {
								type: 'boolean'
							},
							can_see_transaction_balance: {
								type: 'boolean'
							},
							can_delete_corporate_location: {
								type: 'boolean'
							},
							can_add_image_url: {
								type: 'boolean'
							},
							can_see_public_alias: {
								type: 'boolean'
							},
							can_add_comment: {
								type: 'boolean'
							},
							description: {
								type: 'string'
							},
							can_see_corporate_location: {
								type: 'boolean'
							},
							can_see_other_account_bank_name: {
								type: 'boolean'
							},
							can_see_more_info: {
								type: 'boolean'
							},
							can_add_counterparty: {
								type: 'boolean'
							},
							can_see_physical_location: {
								type: 'boolean'
							},
							can_edit_owner_comment: {
								type: 'boolean'
							},
							can_see_private_alias: {
								type: 'boolean'
							},
							can_see_bank_account_balance: {
								type: 'boolean'
							},
							can_add_public_alias: {
								type: 'boolean'
							},
							can_see_bank_account_owners: {
								type: 'boolean'
							},
							can_see_other_account_metadata: {
								type: 'boolean'
							},
							can_delete_physical_location: {
								type: 'boolean'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							can_see_transaction_this_bank_account: {
								type: 'boolean'
							},
							can_see_image_url: {
								type: 'boolean'
							},
							can_see_transaction_type: {
								type: 'boolean'
							},
							can_see_images: {
								type: 'boolean'
							},
							can_see_transaction_amount: {
								type: 'boolean'
							},
							can_see_transaction_metadata: {
								type: 'boolean'
							},
							can_see_comments: {
								type: 'boolean'
							},
							can_see_other_account_iban: {
								type: 'boolean'
							},
							can_add_image: {
								type: 'boolean'
							},
							can_see_bank_account_type: {
								type: 'boolean'
							},
							can_see_other_account_kind: {
								type: 'boolean'
							},
							can_see_bank_account_currency: {
								type: 'boolean'
							},
							can_add_where_tag: {
								type: 'boolean'
							},
							can_see_transaction_start_date: {
								type: 'boolean'
							},
							can_see_bank_account_label: {
								type: 'boolean'
							},
							can_add_private_alias: {
								type: 'boolean'
							},
							can_see_transaction_currency: {
								type: 'boolean'
							},
							can_add_more_info: {
								type: 'boolean'
							},
							can_delete_comment: {
								type: 'boolean'
							},
							can_see_transaction_other_bank_account: {
								type: 'boolean'
							},
							can_see_bank_account_number: {
								type: 'boolean'
							},
							can_add_corporate_location: {
								type: 'boolean'
							},
							alias: {
								type: 'string'
							},
							can_add_url: {
								type: 'boolean'
							},
							short_name: {
								type: 'string'
							},
							can_delete_where_tag: {
								type: 'boolean'
							},
							is_public: {
								type: 'boolean'
							},
							can_see_owner_comment: {
								type: 'boolean'
							},
							can_see_transaction_finish_date: {
								type: 'boolean'
							},
							can_see_open_corporates_url: {
								type: 'boolean'
							},
							can_add_physical_location: {
								type: 'boolean'
							},
							can_see_bank_account_iban: {
								type: 'boolean'
							},
							can_see_other_account_national_identifier: {
								type: 'boolean'
							},
							can_delete_image: {
								type: 'boolean'
							},
							can_add_tag: {
								type: 'boolean'
							},
							id: {
								type: 'string'
							},
							can_add_open_corporates_url: {
								type: 'boolean'
							},
							can_delete_tag: {
								type: 'boolean'
							},
							can_see_transaction_description: {
								type: 'boolean'
							},
							can_see_bank_account_national_identifier: {
								type: 'boolean'
							},
							can_see_other_account_number: {
								type: 'boolean'
							},
							can_see_bank_account_bank_name: {
								type: 'boolean'
							}
						}
					},
					roles: [{
						role: 'CanGetSystemView',
						requires_bank_id: false
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/system-views/VIEW_ID'
				},
				{
					operation_id: 'OBPv1.2.1-getTransactionNarrative',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getTransactionNarrative'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					summary: 'Get narrative.',
					description: '<p>Returns the account owner description of the transaction <a href="#1_2_1-getViewsForBankAccount">moderated</a> by the view.</p>\n<p>Authentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Returns the account owner description of the transaction [moderated](#1_2_1-getViewsForBankAccount) by the view.\n\nAuthentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						narrative: 'narative'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							narrative: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative'
				},
				{
					operation_id: 'OBPv3.0.0-getAtms',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getAtms'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms',
					summary: 'Get Bank ATMS',
					description: '<p>Returns information about ATMs for a single bank specified by BANK_ID including:</p>\n<ul>\n<li>Address</li>\n<li>Geo Location</li>\n<li>License the data under this endpoint is released under</li>\n</ul>\n<p>Pagination:</p>\n<p>By default, 100 records are returned.</p>\n<p>You can use the url query parameters <em>limit</em> and <em>offset</em> for pagination</p>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Returns information about ATMs for a single bank specified by BANK_ID including:\n\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n\nPagination:\n\nBy default, 100 records are returned.\n\nYou can use the url query parameters *limit* and *offset* for pagination\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						id: 'atm-id-123',
						bank_id: 'GENODEM1GLS',
						name: 'Atm by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: '',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 11.45,
							longitude: 11.45
						},
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						monday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						tuesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						wednesday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						thursday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						friday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						saturday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						sunday: {
							opening_time: '10:00',
							closing_time: '18:00'
						},
						is_accessible: 'true',
						located_at: 'Full service store',
						more_info: 'short walk to the lake from here',
						has_deposit_capability: 'true'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'No ATMs available. License may not be set.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'ATM',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							has_deposit_capability: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							friday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							bank_id: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							monday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							saturday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							thursday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							tuesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							wednesday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							sunday: {
								type: 'object',
								properties: {
									closing_time: {
										type: 'string'
									},
									opening_time: {
										type: 'string'
									}
								}
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									},
									county: {
										type: 'string'
									}
								}
							},
							id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							located_at: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms'
				},
				{
					operation_id: 'OBPv2.2.0-getExplictCounterpartyById',
					implemented_by: {
						version: 'OBPv2.2.0',
						'function': 'getExplictCounterpartyById'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.2.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties/COUNTERPARTY_ID',
					summary: 'Get Counterparty by Counterparty Id.(Explicit).',
					description: '<p>Information returned about the Counterparty specified by COUNTERPARTY_ID:</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Information returned about the Counterparty specified by COUNTERPARTY_ID:\n\nAuthentication is Mandatory\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						name: 'CounterpartyName',
						description: 'My landlord',
						created_by_user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
						this_bank_id: 'GENODEM1GLS',
						this_account_id: '8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0',
						this_view_id: 'owner',
						counterparty_id: '1d65db7c-a7b2-4839-af41-958276ab7790',
						other_bank_routing_scheme: 'bankCode',
						other_bank_routing_address: '10',
						other_branch_routing_scheme: 'branchNumber',
						other_branch_routing_address: '10010',
						other_account_routing_scheme: 'accountNumber',
						other_account_routing_address: '7987987-2348987-234234',
						other_account_secondary_routing_scheme: 'accountId',
						other_account_secondary_routing_address: '8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0',
						is_beneficiary: true,
						bespoke: [{
							key: 'englishName',
							value: 'english Name'
						}],
						metadata: {
							public_alias: 'String',
							more_info: 'String',
							url: 'String',
							image_url: 'String',
							open_corporates_url: 'String',
							corporate_location: {
								latitude: 11.45,
								longitude: 11.45,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '123',
									provider: 'http://127.0.0.1:8080',
									username: 'felixsmith'
								}
							},
							physical_location: {
								latitude: 11.45,
								longitude: 11.45,
								date: '2017-09-19T00:00:00Z',
								user: {
									id: '123',
									provider: 'http://127.0.0.1:8080',
									username: 'felixsmith'
								}
							},
							private_alias: 'String'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Counterparty',
						'Payment Initiation Service (PIS)',
						'Counterparty-Metadata'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bespoke: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										value: {
											type: 'string'
										},
										key: {
											type: 'string'
										}
									}
								}
							},
							created_by_user_id: {
								type: 'string'
							},
							other_bank_routing_scheme: {
								type: 'string'
							},
							this_bank_id: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							other_account_secondary_routing_scheme: {
								type: 'string'
							},
							other_branch_routing_address: {
								type: 'string'
							},
							counterparty_id: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							other_account_routing_address: {
								type: 'string'
							},
							other_bank_routing_address: {
								type: 'string'
							},
							this_account_id: {
								type: 'string'
							},
							other_branch_routing_scheme: {
								type: 'string'
							},
							metadata: {
								type: 'object',
								properties: {
									private_alias: {
										type: 'string'
									},
									corporate_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													username: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									url: {
										type: 'string'
									},
									physical_location: {
										type: 'object',
										properties: {
											user: {
												type: 'object',
												properties: {
													username: {
														type: 'string'
													},
													provider: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											},
											date: {
												type: 'string',
												format: 'date-time'
											},
											longitude: {
												type: 'number'
											},
											latitude: {
												type: 'number'
											}
										}
									},
									public_alias: {
										type: 'string'
									},
									open_corporates_url: {
										type: 'string'
									},
									more_info: {
										type: 'string'
									},
									image_url: {
										type: 'string'
									}
								}
							},
							other_account_routing_scheme: {
								type: 'string'
							},
							other_account_secondary_routing_address: {
								type: 'string'
							},
							is_beneficiary: {
								type: 'boolean'
							},
							this_view_id: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties/COUNTERPARTY_ID'
				},
				{
					operation_id: 'OBPv2.0.0-getPrivateAccountsAtOneBank',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getPrivateAccountsAtOneBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts',
					summary: 'Get Accounts at Bank.',
					description: '<p>Returns the list of accounts at BANK_ID that the user has access to.<br />\nFor each account the API returns the account ID and the views available to the user..<br />\nEach account must have at least one private View.</p>\n<p>optional request parameters:</p>\n<ul>\n<li>account_type_filter: one or many accountType value, split by comma</li>\n<li>account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE</li>\n</ul>\n<p>whole url example:<br />\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts?account_type_filter=330,CURRENT+PLUS&amp;account_type_filter_operation=INCLUDE</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: '\nReturns the list of accounts at BANK_ID that the user has access to.\nFor each account the API returns the account ID and the views available to the user..\nEach account must have at least one private View.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory\n      ',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						accounts: [{
							id: '8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0',
							label: 'NoneLabel',
							bank_id: 'GENODEM1GLS',
							views_available: [{
								id: '1',
								short_name: 'HHH',
								is_public: true
							}]
						}]
					},
					error_response_bodies: [
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account',
						'PrivateData',
						'PublicData',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accounts: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										views_available: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													is_public: {
														type: 'boolean'
													},
													short_name: {
														type: 'string'
													},
													id: {
														type: 'string'
													}
												}
											}
										},
										bank_id: {
											type: 'string'
										},
										label: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts'
				},
				{
					operation_id: 'OBPv3.0.0-createViewForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'createViewForBankAccount'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views',
					summary: 'Create View.',
					description: '<p>Create a view on bank account</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.<br />\nThe \'alias\' field in the JSON can take one of three values:</p>\n<ul>\n<li><em>public</em>: to use the public alias if there is one specified for the other account.</li>\n<li><em>private</em>: to use the public alias if there is one specified for the other account.</li>\n<li>\n<p><em>\'\'(empty string)</em>: to use no alias; the view shows the real name of the other account.</p>\n</li>\n</ul>\n<p>The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to <code>true</code> and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.</p>\n<p>The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to <code>true</code> on the view creation, the rest will be set to <code>false</code>.</p>\n<p>You MUST use a leading _ (underscore) in the view name because other view names are reserved for OBP system views.</p>\n',
					description_markdown: 'Create a view on bank account\n\n Authentication is Mandatory and the user needs to have access to the owner view.\n The \'alias\' field in the JSON can take one of three values:\n\n * _public_: to use the public alias if there is one specified for the other account.\n * _private_: to use the public alias if there is one specified for the other account.\n\n * _\'\'(empty string)_: to use no alias; the view shows the real name of the other account.\n\n The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to `true` and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\n\n The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to `true` on the view creation, the rest will be set to `false`.\n\n You MUST use a leading _ (underscore) in the view name because other view names are reserved for OBP system views.\n ',
					example_request_body: {
						name: '_test',
						description: 'This view is for family',
						metadata_view: '_test',
						is_public: true,
						which_alias_to_use: 'family',
						hide_metadata_if_alias_used: false,
						allowed_actions: [
							'can_see_transaction_this_bank_account',
							'can_see_transaction_other_bank_account',
							'can_see_transaction_metadata',
							'can_see_transaction_label',
							'can_see_transaction_amount',
							'can_see_transaction_type',
							'can_see_transaction_currency',
							'can_see_transaction_start_date',
							'can_see_transaction_finish_date',
							'can_see_transaction_balance',
							'can_see_comments',
							'can_see_narrative',
							'can_see_tags',
							'can_see_images',
							'can_see_bank_account_owners',
							'can_see_bank_account_type',
							'can_see_bank_account_balance',
							'can_see_bank_account_currency',
							'can_see_bank_account_label',
							'can_see_bank_account_national_identifier',
							'can_see_bank_account_swift_bic',
							'can_see_bank_account_iban',
							'can_see_bank_account_number',
							'can_see_bank_account_bank_name',
							'can_see_other_account_national_identifier',
							'can_see_other_account_swift_bic',
							'can_see_other_account_iban',
							'can_see_other_account_bank_name',
							'can_see_other_account_number',
							'can_see_other_account_metadata',
							'can_see_other_account_kind',
							'can_see_more_info',
							'can_see_url',
							'can_see_image_url',
							'can_see_open_corporates_url',
							'can_see_corporate_location',
							'can_see_physical_location',
							'can_see_public_alias',
							'can_see_private_alias',
							'can_add_more_info',
							'can_add_url',
							'can_add_image_url',
							'can_add_open_corporates_url',
							'can_add_corporate_location',
							'can_add_physical_location',
							'can_add_public_alias',
							'can_add_private_alias',
							'can_delete_corporate_location',
							'can_delete_physical_location',
							'can_edit_narrative',
							'can_add_comment',
							'can_delete_comment',
							'can_add_tag',
							'can_delete_tag',
							'can_add_image',
							'can_delete_image',
							'can_add_where_tag',
							'can_see_where_tag',
							'can_delete_where_tag',
							'can_create_counterparty',
							'can_see_bank_routing_scheme',
							'can_see_bank_routing_address',
							'can_see_bank_account_routing_scheme',
							'can_see_bank_account_routing_address',
							'can_see_other_bank_routing_scheme',
							'can_see_other_bank_routing_address',
							'can_see_other_account_routing_scheme',
							'can_see_other_account_routing_address',
							'can_query_available_funds'
						]
					},
					success_response_body: {
						id: '1234',
						short_name: 'short_name',
						description: 'description',
						metadata_view: 'owner',
						is_public: true,
						alias: 'No',
						hide_metadata_if_alias_used: true,
						can_add_comment: true,
						can_add_corporate_location: true,
						can_add_image: true,
						can_add_image_url: true,
						can_add_more_info: true,
						can_add_open_corporates_url: true,
						can_add_physical_location: true,
						can_add_private_alias: true,
						can_add_public_alias: true,
						can_add_tag: true,
						can_add_url: true,
						can_add_where_tag: true,
						can_delete_comment: true,
						can_add_counterparty: true,
						can_delete_corporate_location: true,
						can_delete_image: true,
						can_delete_physical_location: true,
						can_delete_tag: true,
						can_delete_where_tag: true,
						can_edit_owner_comment: true,
						can_see_bank_account_balance: true,
						can_query_available_funds: true,
						can_see_bank_account_bank_name: true,
						can_see_bank_account_currency: true,
						can_see_bank_account_iban: true,
						can_see_bank_account_label: true,
						can_see_bank_account_national_identifier: true,
						can_see_bank_account_number: true,
						can_see_bank_account_owners: true,
						can_see_bank_account_swift_bic: true,
						can_see_bank_account_type: true,
						can_see_comments: true,
						can_see_corporate_location: true,
						can_see_image_url: true,
						can_see_images: true,
						can_see_more_info: true,
						can_see_open_corporates_url: true,
						can_see_other_account_bank_name: true,
						can_see_other_account_iban: true,
						can_see_other_account_kind: true,
						can_see_other_account_metadata: true,
						can_see_other_account_national_identifier: true,
						can_see_other_account_number: true,
						can_see_other_account_swift_bic: true,
						can_see_owner_comment: true,
						can_see_physical_location: true,
						can_see_private_alias: true,
						can_see_public_alias: true,
						can_see_tags: true,
						can_see_transaction_amount: true,
						can_see_transaction_balance: true,
						can_see_transaction_currency: true,
						can_see_transaction_description: true,
						can_see_transaction_finish_date: true,
						can_see_transaction_metadata: true,
						can_see_transaction_other_bank_account: true,
						can_see_transaction_start_date: true,
						can_see_transaction_this_bank_account: true,
						can_see_transaction_type: true,
						can_see_url: true,
						can_see_where_tag: true,
						can_see_bank_routing_scheme: true,
						can_see_bank_routing_address: true,
						can_see_bank_account_routing_scheme: true,
						can_see_bank_account_routing_address: true,
						can_see_other_bank_routing_scheme: true,
						can_see_other_bank_routing_address: true,
						can_see_other_account_routing_scheme: true,
						can_see_other_account_routing_address: true,
						can_add_transaction_request_to_own_account: true,
						can_add_transaction_request_to_any_account: true,
						can_see_bank_account_credit_limit: true
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-10001: Incorrect json format.',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							allowed_actions: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							name: {
								type: 'string'
							},
							description: {
								type: 'string'
							},
							is_public: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							which_alias_to_use: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							can_see_other_account_swift_bic: {
								type: 'boolean'
							},
							can_see_where_tag: {
								type: 'boolean'
							},
							can_see_url: {
								type: 'boolean'
							},
							can_see_bank_account_swift_bic: {
								type: 'boolean'
							},
							can_see_bank_account_routing_address: {
								type: 'boolean'
							},
							can_see_tags: {
								type: 'boolean'
							},
							can_see_transaction_balance: {
								type: 'boolean'
							},
							can_delete_corporate_location: {
								type: 'boolean'
							},
							can_add_image_url: {
								type: 'boolean'
							},
							can_see_public_alias: {
								type: 'boolean'
							},
							can_add_transaction_request_to_own_account: {
								type: 'boolean'
							},
							can_add_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_scheme: {
								type: 'boolean'
							},
							description: {
								type: 'string'
							},
							can_see_corporate_location: {
								type: 'boolean'
							},
							can_see_other_account_bank_name: {
								type: 'boolean'
							},
							can_see_more_info: {
								type: 'boolean'
							},
							can_add_counterparty: {
								type: 'boolean'
							},
							can_see_physical_location: {
								type: 'boolean'
							},
							can_query_available_funds: {
								type: 'boolean'
							},
							can_edit_owner_comment: {
								type: 'boolean'
							},
							can_see_private_alias: {
								type: 'boolean'
							},
							can_see_bank_account_credit_limit: {
								type: 'boolean'
							},
							can_see_other_account_routing_address: {
								type: 'boolean'
							},
							can_see_bank_account_balance: {
								type: 'boolean'
							},
							can_add_public_alias: {
								type: 'boolean'
							},
							can_see_bank_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_owners: {
								type: 'boolean'
							},
							can_see_other_account_metadata: {
								type: 'boolean'
							},
							can_delete_physical_location: {
								type: 'boolean'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							can_see_transaction_this_bank_account: {
								type: 'boolean'
							},
							can_see_image_url: {
								type: 'boolean'
							},
							can_see_transaction_type: {
								type: 'boolean'
							},
							can_see_images: {
								type: 'boolean'
							},
							can_see_transaction_amount: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							can_see_transaction_metadata: {
								type: 'boolean'
							},
							can_see_comments: {
								type: 'boolean'
							},
							can_see_other_account_iban: {
								type: 'boolean'
							},
							can_add_image: {
								type: 'boolean'
							},
							can_see_bank_account_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_type: {
								type: 'boolean'
							},
							can_see_other_account_kind: {
								type: 'boolean'
							},
							can_see_bank_account_currency: {
								type: 'boolean'
							},
							can_add_where_tag: {
								type: 'boolean'
							},
							can_see_transaction_start_date: {
								type: 'boolean'
							},
							can_see_bank_account_label: {
								type: 'boolean'
							},
							can_add_private_alias: {
								type: 'boolean'
							},
							can_see_transaction_currency: {
								type: 'boolean'
							},
							can_add_more_info: {
								type: 'boolean'
							},
							can_delete_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_address: {
								type: 'boolean'
							},
							can_see_transaction_other_bank_account: {
								type: 'boolean'
							},
							can_see_bank_account_number: {
								type: 'boolean'
							},
							can_add_corporate_location: {
								type: 'boolean'
							},
							alias: {
								type: 'string'
							},
							can_add_url: {
								type: 'boolean'
							},
							short_name: {
								type: 'string'
							},
							can_delete_where_tag: {
								type: 'boolean'
							},
							is_public: {
								type: 'boolean'
							},
							can_see_owner_comment: {
								type: 'boolean'
							},
							can_see_transaction_finish_date: {
								type: 'boolean'
							},
							can_see_open_corporates_url: {
								type: 'boolean'
							},
							can_add_physical_location: {
								type: 'boolean'
							},
							can_see_bank_account_iban: {
								type: 'boolean'
							},
							can_see_other_account_national_identifier: {
								type: 'boolean'
							},
							can_see_bank_routing_address: {
								type: 'boolean'
							},
							can_delete_image: {
								type: 'boolean'
							},
							can_add_transaction_request_to_any_account: {
								type: 'boolean'
							},
							can_add_tag: {
								type: 'boolean'
							},
							id: {
								type: 'string'
							},
							can_see_other_account_routing_scheme: {
								type: 'boolean'
							},
							can_add_open_corporates_url: {
								type: 'boolean'
							},
							can_delete_tag: {
								type: 'boolean'
							},
							can_see_transaction_description: {
								type: 'boolean'
							},
							can_see_bank_account_national_identifier: {
								type: 'boolean'
							},
							can_see_other_account_number: {
								type: 'boolean'
							},
							can_see_bank_account_bank_name: {
								type: 'boolean'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views'
				},
				{
					operation_id: 'OBPv3.0.0-updateViewForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'updateViewForBankAccount'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID',
					summary: 'Update View.',
					description: '<p>Update an existing view on a bank account</p>\n<p>Authentication is Mandatory and the user needs to have access to the owner view.</p>\n<p>The json sent is the same as during view creation (above), with one difference: the \'name\' field<br />\nof a view is not editable (it is only set when a view is created)</p>\n',
					description_markdown: 'Update an existing view on a bank account\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nThe json sent is the same as during view creation (above), with one difference: the \'name\' field\nof a view is not editable (it is only set when a view is created)',
					example_request_body: {
						description: 'this is for family',
						metadata_view: 'owner',
						is_public: true,
						which_alias_to_use: 'family',
						hide_metadata_if_alias_used: true,
						allowed_actions: [
							'can_see_transaction_this_bank_account',
							'can_see_transaction_other_bank_account',
							'can_see_transaction_metadata',
							'can_see_transaction_label',
							'can_see_transaction_amount',
							'can_see_transaction_type',
							'can_see_transaction_currency',
							'can_see_transaction_start_date',
							'can_see_transaction_finish_date',
							'can_see_transaction_balance',
							'can_see_comments',
							'can_see_narrative',
							'can_see_tags',
							'can_see_images',
							'can_see_bank_account_owners',
							'can_see_bank_account_type',
							'can_see_bank_account_balance',
							'can_see_bank_account_currency',
							'can_see_bank_account_label',
							'can_see_bank_account_national_identifier',
							'can_see_bank_account_swift_bic',
							'can_see_bank_account_iban',
							'can_see_bank_account_number',
							'can_see_bank_account_bank_name',
							'can_see_other_account_national_identifier',
							'can_see_other_account_swift_bic',
							'can_see_other_account_iban',
							'can_see_other_account_bank_name',
							'can_see_other_account_number',
							'can_see_other_account_metadata',
							'can_see_other_account_kind',
							'can_see_more_info',
							'can_see_url',
							'can_see_image_url',
							'can_see_open_corporates_url',
							'can_see_corporate_location',
							'can_see_physical_location',
							'can_see_public_alias',
							'can_see_private_alias',
							'can_add_more_info',
							'can_add_url',
							'can_add_image_url',
							'can_add_open_corporates_url',
							'can_add_corporate_location',
							'can_add_physical_location',
							'can_add_public_alias',
							'can_add_private_alias',
							'can_delete_corporate_location',
							'can_delete_physical_location',
							'can_edit_narrative',
							'can_add_comment',
							'can_delete_comment',
							'can_add_tag',
							'can_delete_tag',
							'can_add_image',
							'can_delete_image',
							'can_add_where_tag',
							'can_see_where_tag',
							'can_delete_where_tag',
							'can_create_counterparty',
							'can_see_bank_routing_scheme',
							'can_see_bank_routing_address',
							'can_see_bank_account_routing_scheme',
							'can_see_bank_account_routing_address',
							'can_see_other_bank_routing_scheme',
							'can_see_other_bank_routing_address',
							'can_see_other_account_routing_scheme',
							'can_see_other_account_routing_address',
							'can_query_available_funds'
						]
					},
					success_response_body: {
						id: '1234',
						short_name: 'short_name',
						description: 'description',
						metadata_view: 'owner',
						is_public: true,
						alias: 'No',
						hide_metadata_if_alias_used: true,
						can_add_comment: true,
						can_add_corporate_location: true,
						can_add_image: true,
						can_add_image_url: true,
						can_add_more_info: true,
						can_add_open_corporates_url: true,
						can_add_physical_location: true,
						can_add_private_alias: true,
						can_add_public_alias: true,
						can_add_tag: true,
						can_add_url: true,
						can_add_where_tag: true,
						can_delete_comment: true,
						can_add_counterparty: true,
						can_delete_corporate_location: true,
						can_delete_image: true,
						can_delete_physical_location: true,
						can_delete_tag: true,
						can_delete_where_tag: true,
						can_edit_owner_comment: true,
						can_see_bank_account_balance: true,
						can_query_available_funds: true,
						can_see_bank_account_bank_name: true,
						can_see_bank_account_currency: true,
						can_see_bank_account_iban: true,
						can_see_bank_account_label: true,
						can_see_bank_account_national_identifier: true,
						can_see_bank_account_number: true,
						can_see_bank_account_owners: true,
						can_see_bank_account_swift_bic: true,
						can_see_bank_account_type: true,
						can_see_comments: true,
						can_see_corporate_location: true,
						can_see_image_url: true,
						can_see_images: true,
						can_see_more_info: true,
						can_see_open_corporates_url: true,
						can_see_other_account_bank_name: true,
						can_see_other_account_iban: true,
						can_see_other_account_kind: true,
						can_see_other_account_metadata: true,
						can_see_other_account_national_identifier: true,
						can_see_other_account_number: true,
						can_see_other_account_swift_bic: true,
						can_see_owner_comment: true,
						can_see_physical_location: true,
						can_see_private_alias: true,
						can_see_public_alias: true,
						can_see_tags: true,
						can_see_transaction_amount: true,
						can_see_transaction_balance: true,
						can_see_transaction_currency: true,
						can_see_transaction_description: true,
						can_see_transaction_finish_date: true,
						can_see_transaction_metadata: true,
						can_see_transaction_other_bank_account: true,
						can_see_transaction_start_date: true,
						can_see_transaction_this_bank_account: true,
						can_see_transaction_type: true,
						can_see_url: true,
						can_see_where_tag: true,
						can_see_bank_routing_scheme: true,
						can_see_bank_routing_address: true,
						can_see_bank_account_routing_scheme: true,
						can_see_bank_account_routing_address: true,
						can_see_other_bank_routing_scheme: true,
						can_see_other_bank_routing_address: true,
						can_see_other_account_routing_scheme: true,
						can_see_other_account_routing_address: true,
						can_add_transaction_request_to_own_account: true,
						can_add_transaction_request_to_any_account: true,
						can_see_bank_account_credit_limit: true
					},
					error_response_bodies: [
						'OBP-10001: Incorrect json format.',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'View',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							allowed_actions: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							description: {
								type: 'string'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							is_public: {
								type: 'boolean'
							},
							which_alias_to_use: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							can_see_other_account_swift_bic: {
								type: 'boolean'
							},
							can_see_where_tag: {
								type: 'boolean'
							},
							can_see_url: {
								type: 'boolean'
							},
							can_see_bank_account_swift_bic: {
								type: 'boolean'
							},
							can_see_bank_account_routing_address: {
								type: 'boolean'
							},
							can_see_tags: {
								type: 'boolean'
							},
							can_see_transaction_balance: {
								type: 'boolean'
							},
							can_delete_corporate_location: {
								type: 'boolean'
							},
							can_add_image_url: {
								type: 'boolean'
							},
							can_see_public_alias: {
								type: 'boolean'
							},
							can_add_transaction_request_to_own_account: {
								type: 'boolean'
							},
							can_add_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_scheme: {
								type: 'boolean'
							},
							description: {
								type: 'string'
							},
							can_see_corporate_location: {
								type: 'boolean'
							},
							can_see_other_account_bank_name: {
								type: 'boolean'
							},
							can_see_more_info: {
								type: 'boolean'
							},
							can_add_counterparty: {
								type: 'boolean'
							},
							can_see_physical_location: {
								type: 'boolean'
							},
							can_query_available_funds: {
								type: 'boolean'
							},
							can_edit_owner_comment: {
								type: 'boolean'
							},
							can_see_private_alias: {
								type: 'boolean'
							},
							can_see_bank_account_credit_limit: {
								type: 'boolean'
							},
							can_see_other_account_routing_address: {
								type: 'boolean'
							},
							can_see_bank_account_balance: {
								type: 'boolean'
							},
							can_add_public_alias: {
								type: 'boolean'
							},
							can_see_bank_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_owners: {
								type: 'boolean'
							},
							can_see_other_account_metadata: {
								type: 'boolean'
							},
							can_delete_physical_location: {
								type: 'boolean'
							},
							hide_metadata_if_alias_used: {
								type: 'boolean'
							},
							can_see_transaction_this_bank_account: {
								type: 'boolean'
							},
							can_see_image_url: {
								type: 'boolean'
							},
							can_see_transaction_type: {
								type: 'boolean'
							},
							can_see_images: {
								type: 'boolean'
							},
							can_see_transaction_amount: {
								type: 'boolean'
							},
							metadata_view: {
								type: 'string'
							},
							can_see_transaction_metadata: {
								type: 'boolean'
							},
							can_see_comments: {
								type: 'boolean'
							},
							can_see_other_account_iban: {
								type: 'boolean'
							},
							can_add_image: {
								type: 'boolean'
							},
							can_see_bank_account_routing_scheme: {
								type: 'boolean'
							},
							can_see_bank_account_type: {
								type: 'boolean'
							},
							can_see_other_account_kind: {
								type: 'boolean'
							},
							can_see_bank_account_currency: {
								type: 'boolean'
							},
							can_add_where_tag: {
								type: 'boolean'
							},
							can_see_transaction_start_date: {
								type: 'boolean'
							},
							can_see_bank_account_label: {
								type: 'boolean'
							},
							can_add_private_alias: {
								type: 'boolean'
							},
							can_see_transaction_currency: {
								type: 'boolean'
							},
							can_add_more_info: {
								type: 'boolean'
							},
							can_delete_comment: {
								type: 'boolean'
							},
							can_see_other_bank_routing_address: {
								type: 'boolean'
							},
							can_see_transaction_other_bank_account: {
								type: 'boolean'
							},
							can_see_bank_account_number: {
								type: 'boolean'
							},
							can_add_corporate_location: {
								type: 'boolean'
							},
							alias: {
								type: 'string'
							},
							can_add_url: {
								type: 'boolean'
							},
							short_name: {
								type: 'string'
							},
							can_delete_where_tag: {
								type: 'boolean'
							},
							is_public: {
								type: 'boolean'
							},
							can_see_owner_comment: {
								type: 'boolean'
							},
							can_see_transaction_finish_date: {
								type: 'boolean'
							},
							can_see_open_corporates_url: {
								type: 'boolean'
							},
							can_add_physical_location: {
								type: 'boolean'
							},
							can_see_bank_account_iban: {
								type: 'boolean'
							},
							can_see_other_account_national_identifier: {
								type: 'boolean'
							},
							can_see_bank_routing_address: {
								type: 'boolean'
							},
							can_delete_image: {
								type: 'boolean'
							},
							can_add_transaction_request_to_any_account: {
								type: 'boolean'
							},
							can_add_tag: {
								type: 'boolean'
							},
							id: {
								type: 'string'
							},
							can_see_other_account_routing_scheme: {
								type: 'boolean'
							},
							can_add_open_corporates_url: {
								type: 'boolean'
							},
							can_delete_tag: {
								type: 'boolean'
							},
							can_see_transaction_description: {
								type: 'boolean'
							},
							can_see_bank_account_national_identifier: {
								type: 'boolean'
							},
							can_see_other_account_number: {
								type: 'boolean'
							},
							can_see_bank_account_bank_name: {
								type: 'boolean'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID'
				},
				{
					operation_id: 'OBPv3.0.0-getCoreTransactionsForBankAccount',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getCoreTransactionsForBankAccount'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/transactions',
					summary: 'Get Transactions for Account (Core)',
					description: '<p>Returns transactions list (Core info) of the account specified by ACCOUNT_ID.</p>\n<p>Authentication is Mandatory</p>\n<p>Possible custom headers for pagination:</p>\n<ul>\n<li>sort_direction=ASC/DESC ==&gt; default value: DESC. The sort field is the completed date.</li>\n<li>limit=NUMBER ==&gt; default value: 50</li>\n<li>offset=NUMBER ==&gt; default value: 0</li>\n<li>from_date=DATE =&gt; default value: 0000-00-00T00:00:00.000Z</li>\n<li>to_date=DATE =&gt; default value: 3049-01-01T00:00:00.000Z</li>\n</ul>\n<p><strong>Date format parameter</strong>: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==&gt; time zone is UTC.</p>\n',
					description_markdown: 'Returns transactions list (Core info) of the account specified by ACCOUNT_ID.\n\nAuthentication is Mandatory\n\nPossible custom headers for pagination:\n\n* sort_direction=ASC/DESC ==> default value: DESC. The sort field is the completed date.\n* limit=NUMBER ==> default value: 50\n* offset=NUMBER ==> default value: 0\n* from_date=DATE => default value: 0000-00-00T00:00:00.000Z\n* to_date=DATE => default value: 3049-01-01T00:00:00.000Z\n\n**Date format parameter**: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==> time zone is UTC.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						transactions: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							this_account: {
								id: 'String',
								bank_routing: {
									scheme: 'Bank_ID',
									address: 'gh.29.uk'
								},
								account_routings: [{
									scheme: 'AccountNumber',
									address: '4930396'
								}],
								holders: [{
									name: 'OBP',
									is_alias: true
								}]
							},
							other_account: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								holder: {
									name: 'OBP',
									is_alias: true
								},
								bank_routing: {
									scheme: 'Bank_ID',
									address: 'gh.29.uk'
								},
								account_routings: [{
									scheme: 'AccountNumber',
									address: '4930396'
								}]
							},
							details: {
								type: 'AC',
								description: 'OBP',
								posted: '2017-09-19T00:00:00Z',
								completed: '2017-09-19T00:00:00Z',
								new_balance: {
									currency: 'EUR',
									amount: '10'
								},
								value: {
									currency: 'EUR',
									amount: '10'
								}
							}
						}]
					},
					error_response_bodies: [
						'OBP-10023: obp_sort_direction parameter can only take two values: DESC or ASC!',
						'OBP-10024: wrong value for obp_offset parameter. Please send a positive integer (=>0)!',
						'OBP-10025: wrong value for obp_limit parameter. Please send a positive integer (=>1)!',
						'OBP-10026: Failed to parse date string. Please use this format yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'!',
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: true,
					tags: [
						'Transaction',
						'Account Information Service (AIS)',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							transactions: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										details: {
											type: 'object',
											properties: {
												type: {
													type: 'string'
												},
												description: {
													type: 'string'
												},
												completed: {
													type: 'string',
													format: 'date-time'
												},
												value: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												new_balance: {
													type: 'object',
													properties: {
														amount: {
															type: 'string'
														},
														currency: {
															type: 'string'
														}
													}
												},
												posted: {
													type: 'string',
													format: 'date-time'
												}
											}
										},
										other_account: {
											type: 'object',
											properties: {
												account_routings: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															address: {
																type: 'string'
															},
															scheme: {
																type: 'string'
															}
														}
													}
												},
												bank_routing: {
													type: 'object',
													properties: {
														address: {
															type: 'string'
														},
														scheme: {
															type: 'string'
														}
													}
												},
												holder: {
													type: 'object',
													properties: {
														is_alias: {
															type: 'boolean'
														},
														name: {
															type: 'string'
														}
													}
												},
												id: {
													type: 'string'
												}
											}
										},
										this_account: {
											type: 'object',
											properties: {
												holders: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															is_alias: {
																type: 'boolean'
															},
															name: {
																type: 'string'
															}
														}
													}
												},
												account_routings: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															address: {
																type: 'string'
															},
															scheme: {
																type: 'string'
															}
														}
													}
												},
												bank_routing: {
													type: 'object',
													properties: {
														address: {
															type: 'string'
														},
														scheme: {
															type: 'string'
														}
													}
												},
												id: {
													type: 'string'
												}
											}
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/transactions'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyPhysicalLocation',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyPhysicalLocation'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
					summary: 'Delete Counterparty Physical Location.',
					description: '<p>Delete physical location of other bank account.</p>\n',
					description_markdown: 'Delete physical location of other bank account.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'Physical Location cannot be deleted',
						'Delete not completed',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location'
				},
				{
					operation_id: 'OBPv2.0.0-addEntitlement',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'addEntitlement'
					},
					request_verb: 'POST',
					request_url: '/obp/v2.0.0/users/USER_ID/entitlements',
					summary: 'Add Entitlement for a User.',
					description: '<p>Create Entitlement. Grant Role to User.</p>\n<p>Entitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)</p>\n<p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. &quot;bank_id&quot;:&quot;&quot;</p>\n<p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. &quot;bank_id&quot;:&quot;my-bank-id&quot;</p>\n<p>Authentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.</p>\n',
					description_markdown: 'Create Entitlement. Grant Role to User.\n\nEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\n\nFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. "bank_id":""\n\nFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. "bank_id":"my-bank-id"\n\nAuthentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.',
					example_request_body: {
						bank_id: 'GENODEM1GLS',
						role_name: 'String'
					},
					success_response_body: {
						entitlement_id: '6fb17583-1e49-4435-bb74-a14fe0996723',
						role_name: 'CanQueryOtherUser',
						bank_id: 'GENODEM1GLS'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20005: User not found. Please specify a valid value for USER_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-10007: Incorrect Role name: ',
						'OBP-30205: This entitlement is a Bank Role. Please set bank_id to a valid bank id.',
						'OBP-30206: This entitlement is a System Role. Please set bank_id to empty string.',
						'OBP-30216: Entitlement already exists for the user.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Role',
						'Entitlement',
						'User'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							role_name: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							role_name: {
								type: 'string'
							},
							entitlement_id: {
								type: 'string'
							}
						}
					},
					roles: [{
							role: 'CanCreateEntitlementAtOneBank',
							requires_bank_id: true
						},
						{
							role: 'CanCreateEntitlementAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/USER_ID/entitlements'
				},
				{
					operation_id: 'OBPv1.2.1-getCommentsForViewOnTransaction',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getCommentsForViewOnTransaction'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments',
					summary: 'Get comments.',
					description: '<p>Returns the transaction TRANSACTION_ID comments made on a <a href="#1_2_1-getViewsForBankAccount">view</a> (VIEW_ID).</p>\n<p>Authentication via OAuth is required if the view is not public.</p>\n',
					description_markdown: 'Returns the transaction TRANSACTION_ID comments made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n\nAuthentication via OAuth is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						comments: [{
							id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
							value: 'OBP',
							date: '2017-09-19T00:00:00Z',
							user: {
								id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
								provider: 'http://127.0.0.1:8080',
								display_name: 'OBP'
							}
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-30022: The current view does not have the permission: ',
						'OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Transaction-Metadata',
						'Transaction'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							comments: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										user: {
											type: 'object',
											properties: {
												display_name: {
													type: 'string'
												},
												provider: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										},
										date: {
											type: 'string',
											format: 'date-time'
										},
										value: {
											type: 'string'
										},
										id: {
											type: 'string'
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments'
				},
				{
					operation_id: 'OBPv2.0.0-getTransactionTypes',
					implemented_by: {
						version: 'OBPv2.0.0',
						'function': 'getTransactionTypes'
					},
					request_verb: 'GET',
					request_url: '/obp/v2.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types',
					summary: 'Get Transaction Types at Bank',
					description: '<p>Get Transaction Types for the bank specified by BANK_ID:</p>\n<p>Lists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).</p>\n<ul>\n<li>id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.</li>\n<li>bank_id : The bank that supports this TransactionType</li>\n<li>short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here</li>\n<li>summary : A succinct summary</li>\n<li>description : A longer description</li>\n<li>charge : The charge to the customer for each one of these</li>\n</ul>\n<p>Authentication is Optional</p>\n',
					description_markdown: 'Get Transaction Types for the bank specified by BANK_ID:\n\nLists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).\n\n  * id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\n  * bank_id : The bank that supports this TransactionType\n  * short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\n  * summary : A succinct summary\n  * description : A longer description\n  * charge : The charge to the customer for each one of these\n\nAuthentication is Optional',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						transaction_types: [{
							id: {
								value: '123'
							},
							bank_id: 'GENODEM1GLS',
							short_code: 'PlaceholderString',
							summary: 'PlaceholderString',
							description: 'PlaceholderString',
							charge: {
								currency: 'EUR',
								amount: '10'
							}
						}]
					},
					error_response_bodies: [
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: true,
					is_psd2: true,
					is_obwg: false,
					tags: [
						'Bank',
						'Account Information Service (AIS)'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							transaction_types: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										charge: {
											type: 'object',
											properties: {
												amount: {
													type: 'string'
												},
												currency: {
													type: 'string'
												}
											}
										},
										description: {
											type: 'string'
										},
										short_code: {
											type: 'string'
										},
										summary: {
											type: 'string'
										},
										id: {
											type: 'object',
											properties: {
												value: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types'
				},
				{
					operation_id: 'OBPv1.2.1-getCounterpartyPublicAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'getCounterpartyPublicAlias'
					},
					request_verb: 'GET',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					summary: 'Get public alias of other bank account.',
					description: '<p>Returns the public alias of the other account OTHER_ACCOUNT_ID.<br />\nAuthentication is Optional<br />\nAuthentication is Mandatory if the view is not public.</p>\n',
					description_markdown: 'Returns the public alias of the other account OTHER_ACCOUNT_ID.\nAuthentication is Optional\nAuthentication is Mandatory if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						alias: 'String'
					},
					error_response_bodies: [
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-50000: Unknown Error.',
						'the view does not allow metadata access',
						'the view does not allow public alias access'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							alias: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias'
				},
				{
					operation_id: 'OBPv3.0.0-getCustomersForUser',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'getCustomersForUser'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.0.0/users/current/customers',
					summary: 'Get Customers for Current User',
					description: '<p>Gets all Customers that are linked to a User.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Gets all Customers that are linked to a User.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '19900101',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'19900101'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30008: User Customer Link not found by USER_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'User',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							date_of_birth: {
								type: 'string'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string'
								}
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/users/current/customers'
				},
				{
					operation_id: 'OBPv3.0.0-createBranch',
					implemented_by: {
						version: 'OBPv3.0.0',
						'function': 'createBranch'
					},
					request_verb: 'POST',
					request_url: '/obp/v3.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches',
					summary: 'Create Branch',
					description: '<p>Create Branch for the Bank.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Create Branch for the Bank.\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						id: 'branch-id-123',
						bank_id: 'bank-id-123',
						name: 'Branch by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: 'String',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 10,
							longitude: 10
						},
						meta: {
							license: {
								id: 'PDDL',
								name: 'Open Data Commons Public Domain Dedication and License '
							}
						},
						lobby: {
							monday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							tuesday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							wednesday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							thursday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							friday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							saturday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							sunday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}]
						},
						drive_up: {
							monday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							tuesday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							wednesday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							thursday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							friday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							saturday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							sunday: {
								opening_time: '10:00',
								closing_time: '18:00'
							}
						},
						branch_routing: {
							scheme: 'OBP',
							address: '123abc'
						},
						is_accessible: 'true',
						accessibleFeatures: 'wheelchair, atm usuable by the visually impaired',
						branch_type: 'Full service store',
						more_info: 'short walk to the lake from here',
						phone_number: '+381631954907'
					},
					success_response_body: {
						id: 'branch-id-123',
						bank_id: 'bank-id-123',
						name: 'Branch by the Lake',
						address: {
							line_1: 'No 1 the Road',
							line_2: 'The Place',
							line_3: 'The Hill',
							city: 'Berlin',
							county: 'String',
							state: 'Brandenburg',
							postcode: '13359',
							country_code: 'DE'
						},
						location: {
							latitude: 10,
							longitude: 10
						},
						meta: {
							license: {
								id: 'PDDL',
								name: 'Open Data Commons Public Domain Dedication and License '
							}
						},
						lobby: {
							monday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							tuesday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							wednesday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							thursday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							friday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							saturday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}],
							sunday: [{
								opening_time: '10:00',
								closing_time: '18:00'
							}]
						},
						drive_up: {
							monday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							tuesday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							wednesday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							thursday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							friday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							saturday: {
								opening_time: '10:00',
								closing_time: '18:00'
							},
							sunday: {
								opening_time: '10:00',
								closing_time: '18:00'
							}
						},
						branch_routing: {
							scheme: 'OBP',
							address: '123abc'
						},
						is_accessible: 'true',
						accessibleFeatures: 'wheelchair, atm usuable by the visually impaired',
						branch_type: 'Full service store',
						more_info: 'short walk to the lake from here',
						phone_number: '+381631954907'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-30209: Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Branch'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							accessibleFeatures: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							branch_type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							id: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									county: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									}
								}
							},
							drive_up: {
								type: 'object',
								properties: {
									friday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									monday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									saturday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									thursday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									tuesday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									wednesday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									sunday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									}
								}
							},
							branch_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							phone_number: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							lobby: {
								type: 'object',
								properties: {
									saturday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									tuesday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									monday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									friday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									sunday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									wednesday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									thursday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							accessibleFeatures: {
								type: 'string'
							},
							more_info: {
								type: 'string'
							},
							branch_type: {
								type: 'string'
							},
							name: {
								type: 'string'
							},
							bank_id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							},
							id: {
								type: 'string'
							},
							is_accessible: {
								type: 'string'
							},
							address: {
								type: 'object',
								properties: {
									city: {
										type: 'string'
									},
									county: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_3: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									country_code: {
										type: 'string'
									}
								}
							},
							drive_up: {
								type: 'object',
								properties: {
									friday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									monday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									saturday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									thursday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									tuesday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									wednesday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									},
									sunday: {
										type: 'object',
										properties: {
											closing_time: {
												type: 'string'
											},
											opening_time: {
												type: 'string'
											}
										}
									}
								}
							},
							branch_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							phone_number: {
								type: 'string'
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							lobby: {
								type: 'object',
								properties: {
									saturday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									tuesday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									monday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									friday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									sunday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									wednesday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									},
									thursday: {
										type: 'array',
										items: {
											type: 'object',
											properties: {
												closing_time: {
													type: 'string'
												},
												opening_time: {
													type: 'string'
												}
											}
										}
									}
								}
							}
						}
					},
					roles: [{
							role: 'CanCreateBranch',
							requires_bank_id: true
						},
						{
							role: 'CanCreateBranchAtAnyBank',
							requires_bank_id: false
						}
					],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches'
				},
				{
					operation_id: 'OBPv3.1.0-getCustomerByCustomerId',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCustomerByCustomerId'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID',
					summary: 'Get Customer by CUSTOMER_ID',
					description: '<p>Gets the Customer specified by CUSTOMER_ID.</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Gets the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						bank_id: 'GENODEM1GLS',
						customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
						customer_number: '5987953',
						legal_name: 'Eveline Tripman',
						mobile_phone_number: '+44 07972 444 876',
						email: 'eveline@example.com',
						face_image: {
							url: 'www.openbankproject',
							date: '2017-09-19T00:00:00Z'
						},
						date_of_birth: '2017-09-19T00:00:00Z',
						relationship_status: 'single',
						dependants: 10,
						dob_of_dependants: [
							'2017-09-19T00:00:00Z'
						],
						credit_rating: {
							rating: 'OBP',
							source: 'OBP'
						},
						credit_limit: {
							currency: 'EUR',
							amount: '10'
						},
						highest_education_attained: 'Master',
						employment_status: 'worker',
						kyc_status: true,
						last_ok_date: '2017-09-19T00:00:00Z',
						title: 'Dr.',
						branchId: 'DERBY6',
						nameSuffix: 'Sr'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30008: User Customer Link not found by USER_ID',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Customer',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							bank_id: {
								type: 'string'
							},
							nameSuffix: {
								type: 'string'
							},
							email: {
								type: 'string'
							},
							employment_status: {
								type: 'string'
							},
							last_ok_date: {
								type: 'string',
								format: 'date-time'
							},
							customer_id: {
								type: 'string'
							},
							relationship_status: {
								type: 'string'
							},
							date_of_birth: {
								type: 'string',
								format: 'date-time'
							},
							dob_of_dependants: {
								type: 'array',
								items: {
									type: 'string',
									format: 'date-time'
								}
							},
							highest_education_attained: {
								type: 'string'
							},
							customer_number: {
								type: 'string'
							},
							credit_rating: {
								type: 'object',
								properties: {
									source: {
										type: 'string'
									},
									rating: {
										type: 'string'
									}
								}
							},
							credit_limit: {
								type: 'object',
								properties: {
									amount: {
										type: 'string'
									},
									currency: {
										type: 'string'
									}
								}
							},
							branchId: {
								type: 'string'
							},
							face_image: {
								type: 'object',
								properties: {
									date: {
										type: 'string',
										format: 'date-time'
									},
									url: {
										type: 'string'
									}
								}
							},
							dependants: {
								type: 'integer'
							},
							legal_name: {
								type: 'string'
							},
							title: {
								type: 'string'
							},
							mobile_phone_number: {
								type: 'string'
							},
							kyc_status: {
								type: 'boolean'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID'
				},
				{
					operation_id: 'OBPv3.1.0-getCardsForBank',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'getCardsForBank'
					},
					request_verb: 'GET',
					request_url: '/obp/v3.1.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards',
					summary: 'Get Cards for the specified bank',
					description: '<p>Should be able to filter on the following fields</p>\n<p>eg:/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards?customer_id=66214b8e-259e-44ad-8868-3eb47be70646$account_id=8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0</p>\n<p>1 customer_id should be valid customer_id, otherwise, it will return an empty card list.</p>\n<p>2 account_id should be valid account_id , otherwise, it will return an empty card list.</p>\n<p>${authenticationRequiredMessage(true)}</p>\n',
					description_markdown: 'Should be able to filter on the following fields\n\neg:/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards?customer_id=66214b8e-259e-44ad-8868-3eb47be70646$account_id=8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0\n\n1 customer_id should be valid customer_id, otherwise, it will return an empty card list.  \n\n2 account_id should be valid account_id , otherwise, it will return an empty card list.  \n\n\n${authenticationRequiredMessage(true)}',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						cards: [{
							card_id: '36f8a9e6-c2b1-407a-8bd0-421b7119307e ',
							bank_id: 'GENODEM1GLS',
							card_number: '364435172576215',
							card_type: 'Credit',
							name_on_card: 'SusanSmith',
							issue_number: '1',
							serial_number: '1324234',
							valid_from_date: '2017-09-19T00:00:00Z',
							expires_date: '2017-09-19T00:00:00Z',
							enabled: true,
							cancelled: true,
							on_hot_list: true,
							technology: 'technologyString1',
							networks: [
								'networks1'
							],
							allows: [
								'credit',
								'debit'
							],
							account: {
								id: '123',
								label: 'OBP',
								views_available: [{
									id: '123',
									short_name: 'short_name',
									description: 'description',
									is_public: true,
									alias: 'None',
									hide_metadata_if_alias_used: true,
									can_add_comment: true,
									can_add_corporate_location: true,
									can_add_image: true,
									can_add_image_url: true,
									can_add_more_info: true,
									can_add_open_corporates_url: true,
									can_add_physical_location: true,
									can_add_private_alias: true,
									can_add_public_alias: true,
									can_add_tag: true,
									can_add_url: true,
									can_add_where_tag: true,
									can_delete_comment: true,
									can_delete_corporate_location: true,
									can_delete_image: true,
									can_delete_physical_location: true,
									can_delete_tag: true,
									can_delete_where_tag: true,
									can_edit_owner_comment: true,
									can_see_bank_account_balance: true,
									can_see_bank_account_bank_name: true,
									can_see_bank_account_currency: true,
									can_see_bank_account_iban: true,
									can_see_bank_account_label: true,
									can_see_bank_account_national_identifier: true,
									can_see_bank_account_number: true,
									can_see_bank_account_owners: true,
									can_see_bank_account_swift_bic: true,
									can_see_bank_account_type: true,
									can_see_comments: true,
									can_see_corporate_location: true,
									can_see_image_url: true,
									can_see_images: true,
									can_see_more_info: true,
									can_see_open_corporates_url: true,
									can_see_other_account_bank_name: true,
									can_see_other_account_iban: true,
									can_see_other_account_kind: true,
									can_see_other_account_metadata: true,
									can_see_other_account_national_identifier: true,
									can_see_other_account_number: true,
									can_see_other_account_swift_bic: true,
									can_see_owner_comment: true,
									can_see_physical_location: true,
									can_see_private_alias: true,
									can_see_public_alias: true,
									can_see_tags: true,
									can_see_transaction_amount: true,
									can_see_transaction_balance: true,
									can_see_transaction_currency: true,
									can_see_transaction_description: true,
									can_see_transaction_finish_date: true,
									can_see_transaction_metadata: true,
									can_see_transaction_other_bank_account: true,
									can_see_transaction_start_date: true,
									can_see_transaction_this_bank_account: true,
									can_see_transaction_type: true,
									can_see_url: true,
									can_see_where_tag: true
								}],
								bank_id: 'GENODEM1GLS'
							},
							replacement: {
								requested_date: '2017-09-19T00:00:00Z',
								reason_requested: 'RENEW'
							},
							pin_reset: [{
								requested_date: '2017-09-19T00:00:00Z',
								reason_requested: 'FORGOT'
							}],
							collected: '2017-09-19T00:00:00Z',
							posted: '2017-09-19T00:00:00Z',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh'
						}]
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Card'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							cards: {
								type: 'array',
								items: {
									type: 'object',
									properties: {
										bank_id: {
											type: 'string'
										},
										card_number: {
											type: 'string'
										},
										enabled: {
											type: 'boolean'
										},
										allows: {
											type: 'array',
											items: {
												type: 'string'
											}
										},
										on_hot_list: {
											type: 'boolean'
										},
										card_type: {
											type: 'string'
										},
										name_on_card: {
											type: 'string'
										},
										technology: {
											type: 'string'
										},
										customer_id: {
											type: 'string'
										},
										replacement: {
											type: 'object',
											properties: {
												reason_requested: {
													type: 'string'
												},
												requested_date: {
													type: 'string',
													format: 'date-time'
												}
											}
										},
										pin_reset: {
											type: 'array',
											items: {
												type: 'object',
												properties: {
													reason_requested: {
														type: 'string'
													},
													requested_date: {
														type: 'string',
														format: 'date-time'
													}
												}
											}
										},
										valid_from_date: {
											type: 'string',
											format: 'date-time'
										},
										card_id: {
											type: 'string'
										},
										issue_number: {
											type: 'string'
										},
										serial_number: {
											type: 'string'
										},
										posted: {
											type: 'string',
											format: 'date-time'
										},
										cancelled: {
											type: 'boolean'
										},
										collected: {
											type: 'string',
											format: 'date-time'
										},
										expires_date: {
											type: 'string',
											format: 'date-time'
										},
										account: {
											type: 'object',
											properties: {
												bank_id: {
													type: 'string'
												},
												views_available: {
													type: 'array',
													items: {
														type: 'object',
														properties: {
															can_see_other_account_swift_bic: {
																type: 'boolean'
															},
															can_see_where_tag: {
																type: 'boolean'
															},
															can_see_url: {
																type: 'boolean'
															},
															can_see_bank_account_swift_bic: {
																type: 'boolean'
															},
															can_see_tags: {
																type: 'boolean'
															},
															can_see_transaction_balance: {
																type: 'boolean'
															},
															can_delete_corporate_location: {
																type: 'boolean'
															},
															can_add_image_url: {
																type: 'boolean'
															},
															can_see_public_alias: {
																type: 'boolean'
															},
															can_add_comment: {
																type: 'boolean'
															},
															description: {
																type: 'string'
															},
															can_see_corporate_location: {
																type: 'boolean'
															},
															can_see_other_account_bank_name: {
																type: 'boolean'
															},
															can_see_more_info: {
																type: 'boolean'
															},
															can_see_physical_location: {
																type: 'boolean'
															},
															can_edit_owner_comment: {
																type: 'boolean'
															},
															can_see_private_alias: {
																type: 'boolean'
															},
															can_see_bank_account_balance: {
																type: 'boolean'
															},
															can_add_public_alias: {
																type: 'boolean'
															},
															can_see_bank_account_owners: {
																type: 'boolean'
															},
															can_see_other_account_metadata: {
																type: 'boolean'
															},
															can_delete_physical_location: {
																type: 'boolean'
															},
															hide_metadata_if_alias_used: {
																type: 'boolean'
															},
															can_see_transaction_this_bank_account: {
																type: 'boolean'
															},
															can_see_image_url: {
																type: 'boolean'
															},
															can_see_transaction_type: {
																type: 'boolean'
															},
															can_see_images: {
																type: 'boolean'
															},
															can_see_transaction_amount: {
																type: 'boolean'
															},
															can_see_transaction_metadata: {
																type: 'boolean'
															},
															id: {
																type: 'string'
															},
															can_see_comments: {
																type: 'boolean'
															},
															can_see_other_account_iban: {
																type: 'boolean'
															},
															can_add_image: {
																type: 'boolean'
															},
															can_see_bank_account_type: {
																type: 'boolean'
															},
															can_see_other_account_kind: {
																type: 'boolean'
															},
															can_see_bank_account_currency: {
																type: 'boolean'
															},
															can_add_where_tag: {
																type: 'boolean'
															},
															can_see_transaction_start_date: {
																type: 'boolean'
															},
															can_see_bank_account_label: {
																type: 'boolean'
															},
															can_add_private_alias: {
																type: 'boolean'
															},
															can_see_transaction_currency: {
																type: 'boolean'
															},
															can_add_more_info: {
																type: 'boolean'
															},
															can_delete_comment: {
																type: 'boolean'
															},
															can_see_transaction_other_bank_account: {
																type: 'boolean'
															},
															can_see_bank_account_number: {
																type: 'boolean'
															},
															can_add_corporate_location: {
																type: 'boolean'
															},
															can_add_url: {
																type: 'boolean'
															},
															short_name: {
																type: 'string'
															},
															can_delete_where_tag: {
																type: 'boolean'
															},
															is_public: {
																type: 'boolean'
															},
															can_see_owner_comment: {
																type: 'boolean'
															},
															can_see_transaction_finish_date: {
																type: 'boolean'
															},
															can_see_open_corporates_url: {
																type: 'boolean'
															},
															can_add_physical_location: {
																type: 'boolean'
															},
															can_see_bank_account_iban: {
																type: 'boolean'
															},
															can_see_other_account_national_identifier: {
																type: 'boolean'
															},
															can_delete_image: {
																type: 'boolean'
															},
															can_add_tag: {
																type: 'boolean'
															},
															can_add_open_corporates_url: {
																type: 'boolean'
															},
															can_delete_tag: {
																type: 'boolean'
															},
															can_see_transaction_description: {
																type: 'boolean'
															},
															can_see_bank_account_national_identifier: {
																type: 'boolean'
															},
															can_see_other_account_number: {
																type: 'boolean'
															},
															can_see_bank_account_bank_name: {
																type: 'boolean'
															},
															alias: {
																type: 'string'
															}
														}
													}
												},
												label: {
													type: 'string'
												},
												id: {
													type: 'string'
												}
											}
										},
										networks: {
											type: 'array',
											items: {
												type: 'string'
											}
										}
									}
								}
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards'
				},
				{
					operation_id: 'OBPv3.1.0-updateAccountApplicationStatus',
					implemented_by: {
						version: 'OBPv3.1.0',
						'function': 'updateAccountApplicationStatus'
					},
					request_verb: 'PUT',
					request_url: '/obp/v3.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID',
					summary: 'Update Account Application Status',
					description: '<p>Update an Account Application status</p>\n<p>Authentication is Mandatory</p>\n',
					description_markdown: 'Update an Account Application status\n\n\nAuthentication is Mandatory\n\n',
					example_request_body: {
						status: 'ACCEPTED'
					},
					success_response_body: {
						account_application_id: 'gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763',
						product_code: 'saveing1',
						user: {
							user_id: '9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1',
							email: 'eveline@example.com',
							provider_id: 'Chris',
							provider: 'http://127.0.0.1:8080',
							username: 'felixsmith'
						},
						customer: {
							bank_id: 'GENODEM1GLS',
							customer_id: '7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh',
							customer_number: '5987953',
							legal_name: 'Eveline Tripman',
							mobile_phone_number: '+44 07972 444 876',
							email: 'eveline@example.com',
							face_image: {
								url: 'www.openbankproject',
								date: '2017-09-19T00:00:00Z'
							},
							date_of_birth: '2017-09-19T00:00:00Z',
							relationship_status: 'single',
							dependants: 10,
							dob_of_dependants: [
								'2017-09-19T00:00:00Z'
							],
							credit_rating: {
								rating: 'OBP',
								source: 'OBP'
							},
							credit_limit: {
								currency: 'EUR',
								amount: '10'
							},
							highest_education_attained: 'Master',
							employment_status: 'worker',
							kyc_status: true,
							last_ok_date: '2017-09-19T00:00:00Z',
							title: 'Dr.',
							branchId: 'DERBY6',
							nameSuffix: 'Sr'
						},
						date_of_application: '2017-09-19T00:00:00Z',
						status: 'REQUESTED'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Account-Application',
						'Account',
						'New-Style'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							status: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							product_code: {
								type: 'string'
							},
							status: {
								type: 'string'
							},
							user: {
								type: 'object',
								properties: {
									provider: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									provider_id: {
										type: 'string'
									},
									username: {
										type: 'string'
									},
									user_id: {
										type: 'string'
									}
								}
							},
							customer: {
								type: 'object',
								properties: {
									bank_id: {
										type: 'string'
									},
									nameSuffix: {
										type: 'string'
									},
									email: {
										type: 'string'
									},
									employment_status: {
										type: 'string'
									},
									last_ok_date: {
										type: 'string',
										format: 'date-time'
									},
									customer_id: {
										type: 'string'
									},
									relationship_status: {
										type: 'string'
									},
									date_of_birth: {
										type: 'string',
										format: 'date-time'
									},
									dob_of_dependants: {
										type: 'array',
										items: {
											type: 'string',
											format: 'date-time'
										}
									},
									highest_education_attained: {
										type: 'string'
									},
									customer_number: {
										type: 'string'
									},
									credit_rating: {
										type: 'object',
										properties: {
											source: {
												type: 'string'
											},
											rating: {
												type: 'string'
											}
										}
									},
									credit_limit: {
										type: 'object',
										properties: {
											amount: {
												type: 'string'
											},
											currency: {
												type: 'string'
											}
										}
									},
									branchId: {
										type: 'string'
									},
									face_image: {
										type: 'object',
										properties: {
											date: {
												type: 'string',
												format: 'date-time'
											},
											url: {
												type: 'string'
											}
										}
									},
									dependants: {
										type: 'integer'
									},
									legal_name: {
										type: 'string'
									},
									title: {
										type: 'string'
									},
									mobile_phone_number: {
										type: 'string'
									},
									kyc_status: {
										type: 'boolean'
									}
								}
							},
							account_application_id: {
								type: 'string'
							},
							date_of_application: {
								type: 'string',
								format: 'date-time'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID'
				},
				{
					operation_id: 'OBPv1.2.1-updateCounterpartyOpenCorporatesUrl',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'updateCounterpartyOpenCorporatesUrl'
					},
					request_verb: 'PUT',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
					summary: 'Update Open Corporates Url of Counterparty',
					description: '<p>Update open corporate url of other bank account.</p>\n',
					description_markdown: 'Update open corporate url of other bank account.',
					example_request_body: {
						open_corporates_URL: 'String'
					},
					success_response_body: {
						success: 'Success'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'OBP-10001: Incorrect json format.',
						'the view does not allow metadata access',
						'the view does not allow updating an open corporate url',
						'URL cannot be updated',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							open_corporates_URL: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							success: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url'
				},
				{
					operation_id: 'OBPv1.2.1-deleteCounterpartyPrivateAlias',
					implemented_by: {
						version: 'OBPv1.2.1',
						'function': 'deleteCounterpartyPrivateAlias'
					},
					request_verb: 'DELETE',
					request_url: '/obp/v1.2.1/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					summary: 'Delete Counterparty Private Alias',
					description: '<p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p>\n<p>Authentication is Optional<br />\nAuthentication is required if the view is not public.</p>\n',
					description_markdown: 'Deletes the private alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					example_request_body: {
						jsonString: '{}'
					},
					success_response_body: {
						jsonString: '{}'
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. ',
						'the view does not allow metadata access',
						'the view does not allow deleting the private alias',
						'Alias cannot be deleted',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: false,
					tags: [
						'Counterparty-Metadata',
						'Counterparty'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							jsonString: {
								type: 'string'
							}
						}
					},
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias'
				},
				{
					operation_id: 'OBPv2.1.0-updateBranch',
					implemented_by: {
						version: 'OBPv2.1.0',
						'function': 'updateBranch'
					},
					request_verb: 'PUT',
					request_url: '/obp/v2.1.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
					summary: 'Update Branch',
					description: '<p>Update an existing branch for a bank account (Authenticated access).<br />\nAuthentication is Mandatory</p>\n',
					description_markdown: 'Update an existing branch for a bank account (Authenticated access).\nAuthentication is Mandatory\n',
					example_request_body: {
						bank_id: 'gh.29.fi',
						name: 'OBP',
						address: {
							line_1: 'Osloer Straße 16/17',
							line_2: 'Wedding',
							line_3: '',
							city: 'Berlin',
							state: 'Berlin Brandenburg',
							postcode: '13359',
							country: 'DE'
						},
						location: {
							latitude: 11.45,
							longitude: 11.45
						},
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						lobby: {
							hours: '5'
						},
						drive_up: {
							hours: '5'
						}
					},
					success_response_body: {
						id: '5995d6a2-01b3-423c-a173-5481df49bdaf',
						name: 'String',
						address: {
							line_1: 'Osloer Straße 16/17',
							line_2: 'Wedding',
							line_3: '',
							city: 'Berlin',
							state: 'Berlin Brandenburg',
							postcode: '13359',
							country: 'DE'
						},
						location: {
							latitude: 11.45,
							longitude: 11.45
						},
						lobby: {
							hours: '5'
						},
						drive_up: {
							hours: '5'
						},
						meta: {
							license: {
								id: '5',
								name: 'TESOBE'
							}
						},
						branch_routing: {
							scheme: 'BranchNumber',
							address: '678'
						}
					},
					error_response_bodies: [
						'OBP-20001: User not logged in. Authentication is required!',
						'OBP-30001: Bank not found. Please specify a valid value for BANK_ID.',
						'OBP-10001: Incorrect json format.',
						'OBP-20006: User is missing one or more roles: ',
						'OBP-50000: Unknown Error.'
					],
					is_core: false,
					is_psd2: false,
					is_obwg: true,
					tags: [
						'Branch'
					],
					typed_request_body: {
						type: 'object',
						properties: {
							lobby: {
								type: 'object',
								properties: {
									hours: {
										type: 'string'
									}
								}
							},
							name: {
								type: 'string'
							},
							address: {
								type: 'object',
								properties: {
									line_3: {
										type: 'string'
									},
									country: {
										type: 'string'
									},
									city: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									}
								}
							},
							drive_up: {
								type: 'object',
								properties: {
									hours: {
										type: 'string'
									}
								}
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							bank_id: {
								type: 'string'
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					typed_success_response_body: {
						type: 'object',
						properties: {
							lobby: {
								type: 'object',
								properties: {
									hours: {
										type: 'string'
									}
								}
							},
							name: {
								type: 'string'
							},
							id: {
								type: 'string'
							},
							address: {
								type: 'object',
								properties: {
									line_3: {
										type: 'string'
									},
									country: {
										type: 'string'
									},
									city: {
										type: 'string'
									},
									line_2: {
										type: 'string'
									},
									line_1: {
										type: 'string'
									},
									state: {
										type: 'string'
									},
									postcode: {
										type: 'string'
									}
								}
							},
							drive_up: {
								type: 'object',
								properties: {
									hours: {
										type: 'string'
									}
								}
							},
							meta: {
								type: 'object',
								properties: {
									license: {
										type: 'object',
										properties: {
											name: {
												type: 'string'
											},
											id: {
												type: 'string'
											}
										}
									}
								}
							},
							branch_routing: {
								type: 'object',
								properties: {
									address: {
										type: 'string'
									},
									scheme: {
										type: 'string'
									}
								}
							},
							location: {
								type: 'object',
								properties: {
									longitude: {
										type: 'number'
									},
									latitude: {
										type: 'number'
									}
								}
							}
						}
					},
					roles: [{
						role: 'CanUpdateBranch',
						requires_bank_id: true
					}],
					is_featured: false,
					special_instructions: '',
					specified_url: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID'
				}
			]
		},
		apiNavSections: {
			ATM: [{
					index: 0,
					section: {
						tag: 'ATM',
						title: 'Create ATM',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create ATM for the Bank.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms',
						exampleRequestBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
						exampleResponseBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
						typedBody: [{
								key: 'hvvvund7lPi',
								path: 'type',
								type: 'object'
							},
							{
								key: 'gUnuDgaBwAp',
								path: 'has_deposit_capability',
								type: 'string'
							},
							{
								key: '1qoV1986AE1',
								path: 'name',
								type: 'string'
							},
							{
								key: 'Fy-A-kbFI7R',
								path: 'friday',
								type: 'object'
							},
							{
								key: 'xKdYIA-_CMi',
								path: 'friday->closing_time',
								type: 'string'
							},
							{
								key: 'hmpsB4eNwwv',
								path: 'friday->opening_time',
								type: 'string'
							},
							{
								key: 'tqg7dvkOYCB',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: '2CNT4FZBCXE',
								path: 'more_info',
								type: 'string'
							},
							{
								key: '2ukegzcrhAY',
								path: 'is_accessible',
								type: 'string'
							},
							{
								key: 'ccgo1R4MEqs',
								path: 'monday',
								type: 'object'
							},
							{
								key: 'HFQaJn_Ugr3',
								path: 'monday->closing_time',
								type: 'string'
							},
							{
								key: 'RC83I20eOZz',
								path: 'monday->opening_time',
								type: 'string'
							},
							{
								key: 'RDWYp8prwiv',
								path: 'saturday',
								type: 'object'
							},
							{
								key: '9dTmCwouav5',
								path: 'saturday->closing_time',
								type: 'string'
							},
							{
								key: 'jQ9B7GOBzDm',
								path: 'saturday->opening_time',
								type: 'string'
							},
							{
								key: '5g3TRFjRaNe',
								path: 'thursday',
								type: 'object'
							},
							{
								key: '3GDVQmJMQ0W',
								path: 'thursday->closing_time',
								type: 'string'
							},
							{
								key: 'Ucn2gKwA0TA',
								path: 'thursday->opening_time',
								type: 'string'
							},
							{
								key: 'OjaWxW9lT8m',
								path: 'tuesday',
								type: 'object'
							},
							{
								key: '0v3a5uX0pyx',
								path: 'tuesday->closing_time',
								type: 'string'
							},
							{
								key: 'gxbkQ1SbdeR',
								path: 'tuesday->opening_time',
								type: 'string'
							},
							{
								key: '_fp3_OC94tG',
								path: 'wednesday',
								type: 'object'
							},
							{
								key: 'CbtA5WFn1OK',
								path: 'wednesday->closing_time',
								type: 'string'
							},
							{
								key: 'cZ1waEE9d8h',
								path: 'wednesday->opening_time',
								type: 'string'
							},
							{
								key: 'qBmHeTYGlNJ',
								path: 'sunday',
								type: 'object'
							},
							{
								key: 'dVOqZwf-AYs',
								path: 'sunday->closing_time',
								type: 'string'
							},
							{
								key: '9CgwpkcKylH',
								path: 'sunday->opening_time',
								type: 'string'
							},
							{
								key: 'k4y2gV0sb0d',
								path: 'meta',
								type: 'object'
							},
							{
								key: 'lh652RKTJsT',
								path: 'meta->license',
								type: 'object'
							},
							{
								key: 'GLEl2QbANqN',
								path: 'meta->license->name',
								type: 'string'
							},
							{
								key: 'yClMGoPv5NR',
								path: 'meta->license->id',
								type: 'string'
							},
							{
								key: '0mjr6hsWvcr',
								path: 'address',
								type: 'object'
							},
							{
								key: 'XrkYMcqiUhF',
								path: 'address->city',
								type: 'string'
							},
							{
								key: 'oTFOpkXCl-L',
								path: 'address->postcode',
								type: 'string'
							},
							{
								key: 'tS0r4eGgDUL',
								path: 'address->line_1',
								type: 'string'
							},
							{
								key: 'MqNNgt3Y9yY',
								path: 'address->line_2',
								type: 'string'
							},
							{
								key: '41vWiAj_u27',
								path: 'address->line_3',
								type: 'string'
							},
							{
								key: 'suS-m6CMB4o',
								path: 'address->state',
								type: 'string'
							},
							{
								key: 'doFuilEg9bv',
								path: 'address->country_code',
								type: 'string'
							},
							{
								key: '-8c4k6WHNlJ',
								path: 'address->county',
								type: 'string'
							},
							{
								key: 'BYfBAl6BWXo',
								path: 'id',
								type: 'string'
							},
							{
								key: 'ibggfkZlVq3',
								path: 'location',
								type: 'object'
							},
							{
								key: 'Y_RX63aiCsv',
								path: 'location->longitude',
								type: 'number'
							},
							{
								key: 'u1A2Sc8ZUS1',
								path: 'location->latitude',
								type: 'number'
							},
							{
								key: 'p_ZwWE-LpIQ',
								path: 'located_at',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '7ANu8gvrui0',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'R-7hn5iUbki',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'QVYv3UGQpj4',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'pCGB2sdmwsu',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 1,
					section: {
						tag: 'ATM',
						title: 'Get Bank ATM',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about ATM for a single bank specified by BANK_ID and ATM_ID including:\n\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n\n\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms/ATM_ID',
						exampleResponseBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'uv_VHFbLVGN',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'MVg-Amh8jmJ',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'YNzhf_qu3Wb',
								code: 'OBP-30009',
								description: 'ATM not found. Please specify a valid value for ATM_ID.'
							},
							{
								key: 'b7_8wE4h8LF',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 2,
					section: {
						tag: 'ATM',
						title: 'Get Bank ATMS',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about ATMs for a single bank specified by BANK_ID including:\n\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n\nPagination:\n\nBy default, 100 records are returned.\n\nYou can use the url query parameters *limit* and *offset* for pagination\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms',
						exampleResponseBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'ehSI3GqdgXU',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'XGGs1mo4TI6',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'IalHjH8rgT6',
								code: '<no code>',
								description: 'No ATMs available. License may not be set.'
							},
							{
								key: 'A7BDBMDSj-B',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Account: [{
					index: 3,
					section: {
						tag: 'Account',
						title: 'Check Available Funds',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Check Available Funds\nMandatory URL parameters:\n\n* amount=NUMBER\n* currency=STRING\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/funds-available',
						exampleResponseBody: '{\n  "answer": "yes",\n  "date": "2019-09-03T17:59:14Z",\n  "available_funds_request_id": "c4ykz59svsr9b7fmdxk8ezs7"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'WHGvCsMDgV_',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Pz3GD9tfBoo',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '9RTtSi3UH2T',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'd3aOp7cIBES',
								code: 'OBP-20054',
								description: 'Invalid amount. Please specify a valid value for amount.'
							},
							{
								key: '9rfRt0mZlKV',
								code: 'OBP-10003',
								description: 'Invalid Currency Value. It should be three letters ISO Currency Code. '
							},
							{
								key: 'x9d_P2QRxEo',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 4,
					section: {
						tag: 'Account',
						title: 'Create Account',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Create Account at bank specified by BANK_ID with Id specified by ACCOUNT_ID.\n\nThe User can create an Account for themself  - or -  the User that has the USER_ID specified in the POST body.\n\nIf the PUT body USER_ID *is* specified, the logged in user must have the Role canCreateAccount. Once created, the Account will be owned by the User specified by USER_ID.\n\nIf the PUT body USER_ID is *not* specified, the account will be owned by the logged in User.\n\nThe \'type\' field SHOULD be a product_code from Product.\nIf the type matches a product_code from Product, account attributes will be created that match the Product Attributes.\n\nNote: The Amount MUST be zero.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
						exampleRequestBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "label": "Label",\n  "type": "CURRENT",\n  "balance": {\n    "currency": "EUR",\n    "amount": "0"\n  },\n  "branch_id": "1234",\n  "account_routing": {\n    "scheme": "OBP",\n    "address": "UK123456"\n  }\n}',
						exampleResponseBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "label": "My Account",\n  "type": "AC",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "branch_id": "DERBY6",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  },\n  "account_attributes": [\n    {\n      "product_code": "saving1",\n      "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
						typedBody: [{
								key: 'ug01LBEBn-6',
								path: 'type',
								type: 'object'
							},
							{
								key: '8HvgQ9IrNHi',
								path: 'branch_id',
								type: 'string'
							},
							{
								key: 'OaCIPOBGOW_',
								path: 'label',
								type: 'string'
							},
							{
								key: '61dnw3wzCDc',
								path: 'type',
								type: 'string'
							},
							{
								key: 'qblgwbECCMm',
								path: 'balance',
								type: 'object'
							},
							{
								key: '9HIU9WCBJhZ',
								path: 'balance->amount',
								type: 'string'
							},
							{
								key: '9BDNrHavcQK',
								path: 'balance->currency',
								type: 'string'
							},
							{
								key: '6Dx61kVYpN4',
								path: 'account_routing',
								type: 'object'
							},
							{
								key: 'jux1aONkHmi',
								path: 'account_routing->address',
								type: 'string'
							},
							{
								key: '8X3FBCOTT0D',
								path: 'account_routing->scheme',
								type: 'string'
							},
							{
								key: 'BFK1LJfrAZz',
								path: 'user_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'FjM4KlA5fNt',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'AlQ1YcnS2nL',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'Kf5l0FP6vf6',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Oaj8f-25eli',
								code: 'OBP-30107',
								description: 'Invalid User Id.'
							},
							{
								key: 'A4lgkGmQ6CP',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: '7mFsPqAdBfY',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: '38XuzOFNXhj',
								code: 'OBP-20005',
								description: 'User not found. Please specify a valid value for USER_ID.'
							},
							{
								key: 'AN8fMOtd3Jm',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'AFRuhCAixsg',
								code: 'OBP-30106',
								description: 'Invalid Balance Amount.'
							},
							{
								key: 'W_tkOAIX-hi',
								code: 'OBP-30112',
								description: 'Invalid Number. Initial balance must be a number, e.g 1000.00'
							},
							{
								key: 'kHUYEKSyLTX',
								code: 'OBP-30109',
								description: 'Initial Balance of Account must be Zero (0).'
							},
							{
								key: 'SSq0FQIhyAl',
								code: 'OBP-30105',
								description: 'Invalid Balance Currency.'
							},
							{
								key: 'y4UuwW4bK1P',
								code: 'OBP-30208',
								description: 'Account_ID already exists at the Bank.'
							},
							{
								key: 'GXSIzW0REPS',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 5,
					section: {
						tag: 'Account',
						title: 'Create Account Attribute',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: ' Create Account Attribute\n\n\nAccount Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Account Attribute is linked to its Account by ACCOUNT_ID\n\n\n       \n\nTypical account attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attribute',
						exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						exampleResponseBody: '{\n  "product_code": "saving1",\n  "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						typedBody: [{
								key: '-zMDfUYhPJ5',
								path: 'type',
								type: 'object'
							},
							{
								key: 'um9A9s3SGdz',
								path: 'value',
								type: 'string'
							},
							{
								key: 'm62i196P6xf',
								path: 'type',
								type: 'string'
							},
							{
								key: 'MUOGcaqxbZj',
								path: 'name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'TwQg1eBRYUa',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Sab5yc3civT',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'ITkI81Ycyn0',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 6,
					section: {
						tag: 'Account',
						title: 'Get Account by Id (Core)',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Information returned about the account specified by ACCOUNT_ID:\n\n* Number - The human readable account number given by the bank that identifies the account.\n* Label - A label given by the owner of the account\n* Owners - Users that own this account\n* Type - The type of account\n* Balance - Currency and Value\n* Account Routings - A list that might include IBAN or national account identifiers\n* Account Rules - A list that might include Overdraft and other bank specific rules\n\nThis call returns the owner view and requires access to that view.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/account',
						exampleResponseBody: '{\n  "id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "bank_id": "GENODEM1GLS",\n  "label": "My Account",\n  "number": "546387432",\n  "owners": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  ],\n  "type": "AC",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "account_routings": [\n    {\n      "scheme": "AccountNumber",\n      "address": "4930396"\n    }\n  ],\n  "views_basic": [\n    {\n      "id": "owner",\n      "short_name": "Owner",\n      "description": "This view is for the owner for the account.",\n      "is_public": false\n    }\n  ],\n  "account_attributes": [\n    {\n      "product_code": "saving1",\n      "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '_t32pcFpEDr',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'xR5TMKjbMxl',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 7,
					section: {
						tag: 'Account',
						title: 'Get Account by Id (Full)',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Information returned about an account specified by ACCOUNT_ID as moderated by the view (VIEW_ID):\n\n* Number\n* Owners\n* Type\n* Balance\n* IBAN\n* Available views (sorted by short_name)\n\nMore details about the data moderation by the view [here](#1_2_1-getViewsForBankAccount).\n\nPSD2 Context: PSD2 requires customers to have access to their account information via third party applications.\nThis call provides balance and other account information via delegated authentication using OAuth.\n\nAuthentication is required if the \'is_public\' field in view (VIEW_ID) is not set to `true`.\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/account',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "label": "NoneLabel",\n  "number": "123",\n  "owners": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  ],\n  "type": "OBP",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "views_available": [\n    {\n      "id": "123",\n      "short_name": "short_name",\n      "description": "description",\n      "is_public": true,\n      "alias": "None",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true\n    }\n  ],\n  "bank_id": "GENODEM1GLS",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  },\n  "account_attributes": [\n    {\n      "product_code": "saving1",\n      "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'OlnjjBBgJ5H',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 's8miO7pP8d9',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'VCT0O9ujtaR',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'V1xyWC8VM6e',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'TSASr1FEWEV',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 8,
					section: {
						tag: 'Account',
						title: 'Get Accounts at Bank (IDs only).',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns only the list of accounts ids at BANK_ID that the user has access to.\n\nEach account must have at least one private View.\n\nFor each account the API returns its account ID.\n\nIf you want to see more information on the Views, use the Account Detail call.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'PDcNR5d9zYG',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'NwWn9vK3Ex7',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'IwMNt49xo1A',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 9,
					section: {
						tag: 'Account',
						title: 'Get Accounts at Bank (Minimal).',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the minimal list of private accounts at BANK_ID that the user has access to.\nFor each account, the API returns the ID, routing addresses and the views available to the current user.\n\nIf you want to see more information on the Views, use the Account Detail call.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "label": "String",\n      "bank_id": "GENODEM1GLS",\n      "account_type": "330",\n      "account_routings": [\n        {\n          "scheme": "AccountNumber",\n          "address": "4930396"\n        }\n      ],\n      "views": [\n        {\n          "id": "owner",\n          "short_name": "Owner",\n          "description": "This view is for the owner for the account.",\n          "is_public": false\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'ge3-ZL5YhwB',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'T1DPwwGaYe3',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '7-UAAKvZNsr',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 10,
					section: {
						tag: 'Account',
						title: 'Get Accounts at Bank.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\nReturns the list of accounts at BANK_ID that the user has access to.\nFor each account the API returns the account ID and the views available to the user..\nEach account must have at least one private View.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "label": "NoneLabel",\n      "bank_id": "GENODEM1GLS",\n      "views_available": [\n        {\n          "id": "1",\n          "short_name": "HHH",\n          "is_public": true\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'Ox9gr3jeZJA',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'tbvkxBzajKU',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 11,
					section: {
						tag: 'Account',
						title: 'Get Accounts Balances',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the Balances for the Accounts of the current User at one bank.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/balances',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n      "label": "My Account",\n      "bank_id": "GENODEM1GLS",\n      "account_routings": [\n        {\n          "scheme": "accountNumber",\n          "address": "123456"\n        }\n      ],\n      "balance": {\n        "currency": "EUR",\n        "amount": "100"\n      }\n    }\n  ],\n  "overall_balance": {\n    "currency": "EUR",\n    "amount": "100"\n  },\n  "overall_balance_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [],
						possibleErrors: [{
							key: 'tnpEzpF_3j',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 12,
					section: {
						tag: 'Account',
						title: 'Get Accounts Held',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get Accounts held by the current User if even the User has not been assigned the owner View yet.\n\nCan be used to onboard the account to the API - since all other account and transaction endpoints require views to be assigned.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "12314",\n      "bank_id": "123",\n      "number": "123",\n      "account_routings": [\n        {\n          "scheme": "AccountNumber",\n          "address": "4930396"\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
							key: '_UvPrHWMY9w',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 13,
					section: {
						tag: 'Account',
						title: 'Get Checkbook orders',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '**NOTE: This endpoint currently only returns example data.**\n\n      Get all checkbook orders',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/checkbook/orders',
						exampleResponseBody: '{\n  "account": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n    "account_type": "330",\n    "account_routings": [\n      {\n        "scheme": "AccountNumber",\n        "address": "4930396"\n      }\n    ],\n    "branch_routings": [\n      {\n        "scheme": "BranchNumber",\n        "address": "678"\n      }\n    ]\n  },\n  "orders": [\n    {\n      "order": {\n        "order_id": "xjksajfkj",\n        "order_date": "07082013",\n        "number_of_checkbooks": "4",\n        "distribution_channel": "1201",\n        "status": "2",\n        "first_check_number": "5165276",\n        "shipping_code": "1"\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'v2r3rFrPnd1',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Zj3A_UvtJbf',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '7kViPIbHyrS',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'FsmlLQEb7Wu',
								code: 'OBP-50211',
								description: 'Connector did not return the set of check book.'
							},
							{
								key: '6hRVcVDBnRR',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 14,
					section: {
						tag: 'Account',
						title: 'Update Account Attribute',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: ' Update Account Attribute\n\n\nAccount Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Account Attribute is linked to its Account by ACCOUNT_ID\n\n\n       \n\nTypical account attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attributes/ACCOUNT_ATTRIBUTE_ID',
						exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						exampleResponseBody: '{\n  "product_code": "saving1",\n  "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						typedBody: [{
								key: 'NK2BzDFgXh',
								path: 'type',
								type: 'object'
							},
							{
								key: 'ReQFDNok6Q',
								path: 'value',
								type: 'string'
							},
							{
								key: 'Fxxsmclrn3',
								path: 'type',
								type: 'string'
							},
							{
								key: '8Y3LWFokES',
								path: 'name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'KTLDbKNDV6',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '0L7aq5Fbsf',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'Qv7xWi9Y0l',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 15,
					section: {
						tag: 'Account',
						title: 'Update Account Label.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Update the label for the account. The label is how the account is known to the account owner e.g. \'My savings account\'\n\n\nAuthentication is Mandatory\n\n       ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
						exampleRequestBody: '{\n  "id": "123123",\n  "label": "label",\n  "bank_id": "GENODEM1GLS"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: '1mZvtLm1hzl',
								path: 'type',
								type: 'object'
							},
							{
								key: 'zs6FbjYAkm2',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: 'MKo_S76mVNg',
								path: 'label',
								type: 'string'
							},
							{
								key: 'TuJPB42AYb7',
								path: 'id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'Vp94os72SnC',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'Y1uboPFSFgA',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'USXstYbROnL',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'Ryx8pvjX-dP',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '01kELflYbg0',
								code: '<no code>',
								description: 'user does not have access to owner view on account'
							}
						]
					}
				},
				{
					index: 16,
					section: {
						tag: 'Account',
						title: 'Update Account.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the account. \n\nAuthentication is Mandatory\n\n       ',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
						exampleRequestBody: '{\n  "label": "Label",\n  "type": "CURRENT",\n  "branch_id": "1234",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  }\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "label": "Label",\n  "type": "CURRENT",\n  "branch_id": "1234",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  }\n}',
						typedBody: [{
								key: 'x8iakuMMY0N',
								path: 'type',
								type: 'object'
							},
							{
								key: 'vhaG_4tEzGQ',
								path: 'account_routing',
								type: 'object'
							},
							{
								key: 'PtHq6DBjuwR',
								path: 'account_routing->address',
								type: 'string'
							},
							{
								key: '3gz8MTfJLLj',
								path: 'account_routing->scheme',
								type: 'string'
							},
							{
								key: '0p0EyWAD-tZ',
								path: 'branch_id',
								type: 'string'
							},
							{
								key: 'NFx-LpbfOSE',
								path: 'type',
								type: 'string'
							},
							{
								key: 'oifmXZFkSAE',
								path: 'label',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'mFopMuwlIIt',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '-Xn6vb7_jws',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'jSoozdD0FYs',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'yp77jzJ-ZE3',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							}
						]
					}
				}
			],
			'Account Application': [{
					index: 17,
					section: {
						tag: 'Account Application',
						title: 'Create Account Application',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: ' Create Account Application\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications',
						exampleRequestBody: '{\n  "product_code": "saveing1",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
						exampleResponseBody: '{\n  "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n  "product_code": "saveing1",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith"\n  },\n  "customer": {\n    "bank_id": "GENODEM1GLS",\n    "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n    "customer_number": "5987953",\n    "legal_name": "Eveline Tripman",\n    "mobile_phone_number": "+44 07972 444 876",\n    "email": "eveline@example.com",\n    "face_image": {\n      "url": "www.openbankproject",\n      "date": "2017-09-19T00:00:00Z"\n    },\n    "date_of_birth": "2017-09-19T00:00:00Z",\n    "relationship_status": "single",\n    "dependants": 10,\n    "dob_of_dependants": [\n      "2017-09-19T00:00:00Z"\n    ],\n    "credit_rating": {\n      "rating": "OBP",\n      "source": "OBP"\n    },\n    "credit_limit": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "highest_education_attained": "Master",\n    "employment_status": "worker",\n    "kyc_status": true,\n    "last_ok_date": "2017-09-19T00:00:00Z",\n    "title": "Dr.",\n    "branchId": "DERBY6",\n    "nameSuffix": "Sr"\n  },\n  "date_of_application": "2017-09-19T00:00:00Z",\n  "status": "REQUESTED"\n}',
						typedBody: [{
								key: 'tmQQG5jvNOT',
								path: 'type',
								type: 'object'
							},
							{
								key: 'rqlZKiFrb-i',
								path: 'customer_id',
								type: 'string'
							},
							{
								key: '49FjV-XDJz_',
								path: 'user_id',
								type: 'string'
							},
							{
								key: 'gtDA2IOWDCY',
								path: 'product_code',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'DVVL8m8EoPi',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'BmaqLpeXrUR',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 18,
					section: {
						tag: 'Account Application',
						title: 'Get Account Application by Id',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the Account Application.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID',
						exampleResponseBody: '{\n  "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n  "product_code": "saveing1",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith"\n  },\n  "customer": {\n    "bank_id": "GENODEM1GLS",\n    "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n    "customer_number": "5987953",\n    "legal_name": "Eveline Tripman",\n    "mobile_phone_number": "+44 07972 444 876",\n    "email": "eveline@example.com",\n    "face_image": {\n      "url": "www.openbankproject",\n      "date": "2017-09-19T00:00:00Z"\n    },\n    "date_of_birth": "2017-09-19T00:00:00Z",\n    "relationship_status": "single",\n    "dependants": 10,\n    "dob_of_dependants": [\n      "2017-09-19T00:00:00Z"\n    ],\n    "credit_rating": {\n      "rating": "OBP",\n      "source": "OBP"\n    },\n    "credit_limit": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "highest_education_attained": "Master",\n    "employment_status": "worker",\n    "kyc_status": true,\n    "last_ok_date": "2017-09-19T00:00:00Z",\n    "title": "Dr.",\n    "branchId": "DERBY6",\n    "nameSuffix": "Sr"\n  },\n  "date_of_application": "2017-09-19T00:00:00Z",\n  "status": "REQUESTED"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'i5bSMPfP',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'DSc5dyzpV',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'otqfSs3ED',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 19,
					section: {
						tag: 'Account Application',
						title: 'Get Account Applications',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the Account Applications.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications',
						exampleResponseBody: '{\n  "account_applications": [\n    {\n      "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n      "product_code": "saveing1",\n      "user": {\n        "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n        "email": "eveline@example.com",\n        "provider_id": "Chris",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      },\n      "customer": {\n        "bank_id": "GENODEM1GLS",\n        "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n        "customer_number": "5987953",\n        "legal_name": "Eveline Tripman",\n        "mobile_phone_number": "+44 07972 444 876",\n        "email": "eveline@example.com",\n        "face_image": {\n          "url": "www.openbankproject",\n          "date": "2017-09-19T00:00:00Z"\n        },\n        "date_of_birth": "2017-09-19T00:00:00Z",\n        "relationship_status": "single",\n        "dependants": 10,\n        "dob_of_dependants": [\n          "2017-09-19T00:00:00Z"\n        ],\n        "credit_rating": {\n          "rating": "OBP",\n          "source": "OBP"\n        },\n        "credit_limit": {\n          "currency": "EUR",\n          "amount": "10"\n        },\n        "highest_education_attained": "Master",\n        "employment_status": "worker",\n        "kyc_status": true,\n        "last_ok_date": "2017-09-19T00:00:00Z",\n        "title": "Dr.",\n        "branchId": "DERBY6",\n        "nameSuffix": "Sr"\n      },\n      "date_of_application": "2017-09-19T00:00:00Z",\n      "status": "REQUESTED"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'o-IlDhPSgM',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Ph36fyfTcT',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'PBRKJrev-w',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 20,
					section: {
						tag: 'Account Application',
						title: 'Update Account Application Status',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update an Account Application status\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID',
						exampleRequestBody: '{\n  "status": "ACCEPTED"\n}',
						exampleResponseBody: '{\n  "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n  "product_code": "saveing1",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith"\n  },\n  "customer": {\n    "bank_id": "GENODEM1GLS",\n    "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n    "customer_number": "5987953",\n    "legal_name": "Eveline Tripman",\n    "mobile_phone_number": "+44 07972 444 876",\n    "email": "eveline@example.com",\n    "face_image": {\n      "url": "www.openbankproject",\n      "date": "2017-09-19T00:00:00Z"\n    },\n    "date_of_birth": "2017-09-19T00:00:00Z",\n    "relationship_status": "single",\n    "dependants": 10,\n    "dob_of_dependants": [\n      "2017-09-19T00:00:00Z"\n    ],\n    "credit_rating": {\n      "rating": "OBP",\n      "source": "OBP"\n    },\n    "credit_limit": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "highest_education_attained": "Master",\n    "employment_status": "worker",\n    "kyc_status": true,\n    "last_ok_date": "2017-09-19T00:00:00Z",\n    "title": "Dr.",\n    "branchId": "DERBY6",\n    "nameSuffix": "Sr"\n  },\n  "date_of_application": "2017-09-19T00:00:00Z",\n  "status": "REQUESTED"\n}',
						typedBody: [{
								key: 'SVUN9OuOUBE',
								path: 'type',
								type: 'object'
							},
							{
								key: '5Nyygoi2TJh',
								path: 'status',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'zVwzPcxBhEq',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'sGjLk3e24LQ',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '8_jSmWvsmVl',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			'Account Public': [{
					index: 21,
					section: {
						tag: 'Account Public',
						title: 'Get Public Account by Id',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\nReturns information about an account that has a public view.\n\nThe account is specified by ACCOUNT_ID. The information is moderated by the view specified by VIEW_ID.\n\n* Number\n* Owners\n* Type\n* Balance\n* Routing\n\n\nPSD2 Context: PSD2 requires customers to have access to their account information via third party applications.\nThis call provides balance and other account information via delegated authentication using OAuth.\n\nAuthentication is Optional\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/public/accounts/ACCOUNT_ID/VIEW_ID/account',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "bank_id": "String",\n  "label": "String",\n  "number": "String",\n  "owners": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  ],\n  "type": "String",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "account_routings": [\n    {\n      "scheme": "AccountNumber",\n      "address": "4930396"\n    }\n  ],\n  "account_rules": [\n    {\n      "scheme": "OVERDRAFT",\n      "value": "10"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'cTNbkZmUIcl',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'cnKVrvOixaP',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'A85h4n3w-YK',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'NDEkgFoxzlA',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 22,
					section: {
						tag: 'Account Public',
						title: 'Get Public Accounts at all Banks.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get public accounts at all banks (Anonymous access).\nReturns accounts that contain at least one public view (a view where is_public is true)\nFor each account the API returns the ID and the available views.\n\nAuthentication is Optional\n\n',
						specificUrl: '/obp/v4.0.0/accounts/public',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "label": "NoneLabel",\n      "bank_id": "GENODEM1GLS",\n      "views_available": [\n        {\n          "id": "1",\n          "short_name": "HHH",\n          "is_public": true\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'zMXUzjkNPA',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'PZvrXuakA4',
								code: '<no code>',
								description: 'Could not get accounts.'
							},
							{
								key: 'W2jBuhNApw',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 23,
					section: {
						tag: 'Account Public',
						title: 'Get Public Accounts at Bank',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.\n\nAuthentication is Optional\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/public',
						exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "label": "NoneLabel",\n      "bank_id": "GENODEM1GLS",\n      "views_available": [\n        {\n          "id": "1",\n          "short_name": "HHH",\n          "is_public": true\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
							key: 'pSmGTelCvpU',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				}
			],
			Bank: [{
					index: 24,
					section: {
						tag: 'Bank',
						title: 'Create Transaction Type at bank',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Create Transaction Types for the bank specified by BANK_ID:\n\n  * id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\n  * bank_id : The bank that supports this TransactionType\n  * short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\n  * summary : A succinct summary\n  * description : A longer description\n  * charge : The charge to the customer for each one of these\n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types',
						exampleRequestBody: '{\n  "id": {\n    "value": "123"\n  },\n  "bank_id": "GENODEM1GLS",\n  "short_code": "PlaceholderString",\n  "summary": "PlaceholderString",\n  "description": "PlaceholderString",\n  "charge": {\n    "currency": "EUR",\n    "amount": "10"\n  }\n}',
						exampleResponseBody: '{\n  "id": {\n    "value": "123"\n  },\n  "bankId": {\n    "value": "gh.uk.9j"\n  },\n  "shortCode": "80080",\n  "summary": "SANDBOX_TAN",\n  "description": "This is the sandbox mode, charging litter money.",\n  "charge": {\n    "currency": "EUR",\n    "amount": "100"\n  }\n}',
						typedBody: [{
								key: 'lAA_0D1r4Cq',
								path: 'type',
								type: 'object'
							},
							{
								key: 'w1QybcWU9mh',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: '-0jeAuSwYZE',
								path: 'charge',
								type: 'object'
							},
							{
								key: 'NewXJiXs2lZ',
								path: 'charge->amount',
								type: 'string'
							},
							{
								key: 'YkEM2LkpzX6',
								path: 'charge->currency',
								type: 'string'
							},
							{
								key: 'mkuKRli1tfE',
								path: 'description',
								type: 'string'
							},
							{
								key: 'xuz5EhXrdsH',
								path: 'short_code',
								type: 'string'
							},
							{
								key: 'KdLMdj8F-Kv',
								path: 'summary',
								type: 'string'
							},
							{
								key: '1AB0wfHypeL',
								path: 'id',
								type: 'object'
							},
							{
								key: 'kZC0rpjehaI',
								path: 'id->value',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'ww2tE_VEqPt',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'KQ1naF41Djd',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'JAQcbUUCbwr',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'lRkIX3Wfz-d',
								code: 'OBP-40005',
								description: 'Insufficient authorisation to Create Transaction Type offered by the bank. The Request could not be created because you don\'t have access to CanCreateTransactionType.'
							},
							{
								key: 'TOmkvUk7j0z',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 25,
					section: {
						tag: 'Bank',
						title: 'Get Bank',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the bank specified by BANK_ID\nReturns information about a single bank specified by BANK_ID including:\n\n* Short and full name of bank\n* Logo URL\n* Website',
						specificUrl: '/obp/v4.0.0/banks/BANK_ID',
						exampleResponseBody: '{\n  "id": "gh.29.uk",\n  "short_name": "short_name ",\n  "full_name": "full_name",\n  "logo": "logo",\n  "website": "www.openbankproject.com",\n  "bank_routing": {\n    "scheme": "Bank_ID",\n    "address": "gh.29.uk"\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'tBA9WhJ8_Ud',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'NJWyY8VJvCu',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: '4U4hfCwc_ly',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							}
						]
					}
				},
				{
					index: 26,
					section: {
						tag: 'Bank',
						title: 'Get Transaction Types at Bank',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get Transaction Types for the bank specified by BANK_ID:\n\nLists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).\n\n  * id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\n  * bank_id : The bank that supports this TransactionType\n  * short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\n  * summary : A succinct summary\n  * description : A longer description\n  * charge : The charge to the customer for each one of these\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types',
						exampleResponseBody: '{\n  "transaction_types": [\n    {\n      "id": {\n        "value": "123"\n      },\n      "bank_id": "GENODEM1GLS",\n      "short_code": "PlaceholderString",\n      "summary": "PlaceholderString",\n      "description": "PlaceholderString",\n      "charge": {\n        "currency": "EUR",\n        "amount": "10"\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'IpD74fTTN9r',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '1POn1duKFcW',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Branch: [{
					index: 27,
					section: {
						tag: 'Branch',
						title: 'Create Branch',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create Branch for the Bank.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches',
						exampleRequestBody: '{\n  "id": "branch-id-123",\n  "bank_id": "bank-id-123",\n  "name": "Branch by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "String",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 10,\n    "longitude": 10\n  },\n  "meta": {\n    "license": {\n      "id": "PDDL",\n      "name": "Open Data Commons Public Domain Dedication and License "\n    }\n  },\n  "lobby": {\n    "monday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "tuesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "wednesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "thursday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "friday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "saturday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "sunday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ]\n  },\n  "drive_up": {\n    "monday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "tuesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "wednesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "thursday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "friday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "saturday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "sunday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    }\n  },\n  "branch_routing": {\n    "scheme": "OBP",\n    "address": "123abc"\n  },\n  "is_accessible": "true",\n  "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n  "branch_type": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "phone_number": "+381631954907"\n}',
						exampleResponseBody: '{\n  "id": "branch-id-123",\n  "bank_id": "bank-id-123",\n  "name": "Branch by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "String",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 10,\n    "longitude": 10\n  },\n  "meta": {\n    "license": {\n      "id": "PDDL",\n      "name": "Open Data Commons Public Domain Dedication and License "\n    }\n  },\n  "lobby": {\n    "monday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "tuesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "wednesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "thursday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "friday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "saturday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "sunday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ]\n  },\n  "drive_up": {\n    "monday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "tuesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "wednesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "thursday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "friday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "saturday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "sunday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    }\n  },\n  "branch_routing": {\n    "scheme": "OBP",\n    "address": "123abc"\n  },\n  "is_accessible": "true",\n  "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n  "branch_type": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "phone_number": "+381631954907"\n}',
						typedBody: [{
								key: 'rYbXBONOngJ',
								path: 'type',
								type: 'object'
							},
							{
								key: 'JXy5hz6i43T',
								path: 'accessibleFeatures',
								type: 'string'
							},
							{
								key: 'PnnUVDUDSoO',
								path: 'more_info',
								type: 'string'
							},
							{
								key: '563E4qunKvn',
								path: 'branch_type',
								type: 'string'
							},
							{
								key: 'BqStqr9bwTG',
								path: 'name',
								type: 'string'
							},
							{
								key: 'diklA7Taakt',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: 'cY4MLYJ0Xqv',
								path: 'location',
								type: 'object'
							},
							{
								key: 'ueAS1Gqb-4l',
								path: 'location->longitude',
								type: 'number'
							},
							{
								key: 'VjekYZm5qw-',
								path: 'location->latitude',
								type: 'number'
							},
							{
								key: 'pbC4Y9GfAK6',
								path: 'id',
								type: 'string'
							},
							{
								key: 'X_986YHq-5v',
								path: 'is_accessible',
								type: 'string'
							},
							{
								key: 'jQxgT54jFzx',
								path: 'address',
								type: 'object'
							},
							{
								key: 'D88k9MUc0FO',
								path: 'address->city',
								type: 'string'
							},
							{
								key: 'GMfOxrjEJ0V',
								path: 'address->county',
								type: 'string'
							},
							{
								key: 'vUoLsL-RaVE',
								path: 'address->postcode',
								type: 'string'
							},
							{
								key: '0k1M6rlCj47',
								path: 'address->line_1',
								type: 'string'
							},
							{
								key: 'qhunzbNabOj',
								path: 'address->line_2',
								type: 'string'
							},
							{
								key: 'MIyETIk0XCN',
								path: 'address->line_3',
								type: 'string'
							},
							{
								key: 'rn096TgBESZ',
								path: 'address->state',
								type: 'string'
							},
							{
								key: 'KN3ArEpa8M7',
								path: 'address->country_code',
								type: 'string'
							},
							{
								key: 'nJEpBEEfL5m',
								path: 'drive_up',
								type: 'object'
							},
							{
								key: 'fOBdq0-SzXJ',
								path: 'drive_up->friday',
								type: 'object'
							},
							{
								key: 'nNruWNDHugh',
								path: 'drive_up->friday->closing_time',
								type: 'string'
							},
							{
								key: 'WcN2lyoP8g1',
								path: 'drive_up->friday->opening_time',
								type: 'string'
							},
							{
								key: 'v-EaasFzxdP',
								path: 'drive_up->monday',
								type: 'object'
							},
							{
								key: 'Bd34E0fGcY3',
								path: 'drive_up->monday->closing_time',
								type: 'string'
							},
							{
								key: 'LbTFxPoZiDJ',
								path: 'drive_up->monday->opening_time',
								type: 'string'
							},
							{
								key: 'F8VUyiCi3kc',
								path: 'drive_up->saturday',
								type: 'object'
							},
							{
								key: 'R7ZgnlUU4jk',
								path: 'drive_up->saturday->closing_time',
								type: 'string'
							},
							{
								key: '-qFlKLh1sjF',
								path: 'drive_up->saturday->opening_time',
								type: 'string'
							},
							{
								key: '8lPjFXbgq4u',
								path: 'drive_up->thursday',
								type: 'object'
							},
							{
								key: 'HRMnsPjQndT',
								path: 'drive_up->thursday->closing_time',
								type: 'string'
							},
							{
								key: 'puRo5M9556Z',
								path: 'drive_up->thursday->opening_time',
								type: 'string'
							},
							{
								key: 'ddjeFAwZy_t',
								path: 'drive_up->tuesday',
								type: 'object'
							},
							{
								key: 'q_4gm7D5VZ-',
								path: 'drive_up->tuesday->closing_time',
								type: 'string'
							},
							{
								key: '3ySJR35EznY',
								path: 'drive_up->tuesday->opening_time',
								type: 'string'
							},
							{
								key: 'Mge_WOugcaE',
								path: 'drive_up->wednesday',
								type: 'object'
							},
							{
								key: 'VAvciTCxMJw',
								path: 'drive_up->wednesday->closing_time',
								type: 'string'
							},
							{
								key: 'I56xpTVvM8Q',
								path: 'drive_up->wednesday->opening_time',
								type: 'string'
							},
							{
								key: 'SnJYaMECVPI',
								path: 'drive_up->sunday',
								type: 'object'
							},
							{
								key: 'UJy3ZlFGb4J',
								path: 'drive_up->sunday->closing_time',
								type: 'string'
							},
							{
								key: 'dXdQ7LBXqQP',
								path: 'drive_up->sunday->opening_time',
								type: 'string'
							},
							{
								key: 'scc2o60W0k3',
								path: 'branch_routing',
								type: 'object'
							},
							{
								key: 'Uj4-KS6sAwC',
								path: 'branch_routing->address',
								type: 'string'
							},
							{
								key: '1w24Mo4N-Yi',
								path: 'branch_routing->scheme',
								type: 'string'
							},
							{
								key: 'phO5yWzq4WF',
								path: 'phone_number',
								type: 'string'
							},
							{
								key: 'TbugvO7DzTn',
								path: 'meta',
								type: 'object'
							},
							{
								key: 'bFb9ZrUtTW8',
								path: 'meta->license',
								type: 'object'
							},
							{
								key: 'hfjOjlnuDDV',
								path: 'meta->license->name',
								type: 'string'
							},
							{
								key: 'g-grhPUJ8yl',
								path: 'meta->license->id',
								type: 'string'
							},
							{
								key: 'nxizhx_fqdC',
								path: 'lobby',
								type: 'object'
							},
							{
								key: 'yCqXwv8nFPx',
								path: 'lobby->saturday',
								type: 'array'
							},
							{
								key: 'gDRH-6vb-Xa',
								path: 'lobby->saturday->items',
								type: 'object'
							},
							{
								key: 'XFTXMsQ1n-i',
								path: 'lobby->saturday->items->closing_time',
								type: 'string'
							},
							{
								key: 'FMloAoh5iVE',
								path: 'lobby->saturday->items->opening_time',
								type: 'string'
							},
							{
								key: '3KPYV03OJfs',
								path: 'lobby->tuesday',
								type: 'array'
							},
							{
								key: '1vR-XtqwmEj',
								path: 'lobby->tuesday->items',
								type: 'object'
							},
							{
								key: 'lZR6BYvGjZu',
								path: 'lobby->tuesday->items->closing_time',
								type: 'string'
							},
							{
								key: 'KtzEiZ9QttR',
								path: 'lobby->tuesday->items->opening_time',
								type: 'string'
							},
							{
								key: 'CNcGkGfjErH',
								path: 'lobby->monday',
								type: 'array'
							},
							{
								key: 'A2jx4-dz-fF',
								path: 'lobby->monday->items',
								type: 'object'
							},
							{
								key: '3um8UNOf-Fa',
								path: 'lobby->monday->items->closing_time',
								type: 'string'
							},
							{
								key: '85WGOPwGtf7',
								path: 'lobby->monday->items->opening_time',
								type: 'string'
							},
							{
								key: 'Lw9m9BlI-yi',
								path: 'lobby->friday',
								type: 'array'
							},
							{
								key: '4GsTElPGMgy',
								path: 'lobby->friday->items',
								type: 'object'
							},
							{
								key: 'jTN-q1i1MzQ',
								path: 'lobby->friday->items->closing_time',
								type: 'string'
							},
							{
								key: '0O9WI7drCrd',
								path: 'lobby->friday->items->opening_time',
								type: 'string'
							},
							{
								key: 'JF_yeChG1lv',
								path: 'lobby->sunday',
								type: 'array'
							},
							{
								key: 'lr-hMFodKzh',
								path: 'lobby->sunday->items',
								type: 'object'
							},
							{
								key: 'uoSTOrz6HO2',
								path: 'lobby->sunday->items->closing_time',
								type: 'string'
							},
							{
								key: 'c5_cCkM6muh',
								path: 'lobby->sunday->items->opening_time',
								type: 'string'
							},
							{
								key: 'yS2BTgR8PLH',
								path: 'lobby->wednesday',
								type: 'array'
							},
							{
								key: 'JVPo35v9mm9',
								path: 'lobby->wednesday->items',
								type: 'object'
							},
							{
								key: 'LRRyIikXPn2',
								path: 'lobby->wednesday->items->closing_time',
								type: 'string'
							},
							{
								key: 'F9TK8eCZR45',
								path: 'lobby->wednesday->items->opening_time',
								type: 'string'
							},
							{
								key: '-a2-d-BqVBK',
								path: 'lobby->thursday',
								type: 'array'
							},
							{
								key: 'MQeGy81RiXT',
								path: 'lobby->thursday->items',
								type: 'object'
							},
							{
								key: 'XAZ9IEUnsFM',
								path: 'lobby->thursday->items->closing_time',
								type: 'string'
							},
							{
								key: '9-nrhD12kqw',
								path: 'lobby->thursday->items->opening_time',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'XUi_ZfYAyU0',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'E9QQRgPO-2d',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'o3XZLTPdEMh',
								code: 'OBP-30209',
								description: 'Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch.'
							},
							{
								key: 'Pv9jb0YeTYk',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 28,
					section: {
						tag: 'Branch',
						title: 'Delete Branch',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete Branch from given Bank.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'q6gdE0wkoDZ',
								path: 'type',
								type: 'object'
							},
							{
								key: 'pFrCURYEPBj',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'rmqV7gL7nco',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'M5QT6zsZqmO',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'm5pNXCsa21t',
								code: 'OBP-30218',
								description: 'Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch.'
							},
							{
								key: 'lKfztl81NZv',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 29,
					section: {
						tag: 'Branch',
						title: 'Get Branch',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about a single Branch specified by BANK_ID and BRANCH_ID including:\n\n* Name\n* Address\n* Geo Location\n* License the data under this endpoint is released under.\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
						exampleResponseBody: '{\n  "id": "branch-id-123",\n  "bank_id": "bank-id-123",\n  "name": "Branch by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "String",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 10,\n    "longitude": 10\n  },\n  "meta": {\n    "license": {\n      "id": "PDDL",\n      "name": "Open Data Commons Public Domain Dedication and License "\n    }\n  },\n  "lobby": {\n    "monday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "tuesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "wednesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "thursday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "friday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "saturday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "sunday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ]\n  },\n  "drive_up": {\n    "monday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "tuesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "wednesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "thursday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "friday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "saturday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "sunday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    }\n  },\n  "branch_routing": {\n    "scheme": "OBP",\n    "address": "123abc"\n  },\n  "is_accessible": "true",\n  "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n  "branch_type": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "phone_number": "+381631954907"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'b2pCJ-8eMC3',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'MYFscR0iBhI',
								code: '<no code>',
								description: 'License may not be set. meta.license.id and eta.license.name can not be empty'
							},
							{
								key: 'xRHJsI6JNq6',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 30,
					section: {
						tag: 'Branch',
						title: 'Get Branches for a Bank',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about branches for a single bank specified by BANK_ID including:\n\n* Name\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n* Structured opening hours\n* Accessible flag\n* Branch Type\n* More Info\n\nPagination:\n\nBy default, 50 records are returned.\n\nYou can use the url query parameters *limit* and *offset* for pagination\nYou can also use the follow url query parameters:\n\n  - city - string, find Branches those in this city, optional\n\n\n  - withinMetersOf - number, find Branches within given meters distance, optional\n  - nearLatitude - number, a position of latitude value, cooperate with withMetersOf do query filter, optional\n  - nearLongitude - number, a position of longitude value, cooperate with withMetersOf do query filter, optional\n\nnote: withinMetersOf, nearLatitude and nearLongitude either all empty or all have value.\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches',
						exampleResponseBody: '{\n  "branches": [\n    {\n      "id": "branch-id-123",\n      "bank_id": "bank-id-123",\n      "name": "Branch by the Lake",\n      "address": {\n        "line_1": "No 1 the Road",\n        "line_2": "The Place",\n        "line_3": "The Hill",\n        "city": "Berlin",\n        "county": "String",\n        "state": "Brandenburg",\n        "postcode": "13359",\n        "country_code": "DE"\n      },\n      "location": {\n        "latitude": 10,\n        "longitude": 10\n      },\n      "meta": {\n        "license": {\n          "id": "PDDL",\n          "name": "Open Data Commons Public Domain Dedication and License "\n        }\n      },\n      "lobby": {\n        "monday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "tuesday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "wednesday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "thursday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "friday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "saturday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "sunday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ]\n      },\n      "drive_up": {\n        "monday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "tuesday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "wednesday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "thursday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "friday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "saturday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "sunday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        }\n      },\n      "branch_routing": {\n        "scheme": "OBP",\n        "address": "123abc"\n      },\n      "is_accessible": "true",\n      "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n      "branch_type": "Full service store",\n      "more_info": "short walk to the lake from here",\n      "phone_number": "+381631954907"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '2W40L_ImUwK',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'GU4uoxAyid9',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'TVlLKrgZs0P',
								code: '<no code>',
								description: 'No branches available. License may not be set.'
							},
							{
								key: '-goL0Ib4EVA',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 31,
					section: {
						tag: 'Branch',
						title: 'Update Branch',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update an existing branch for a bank account (Authenticated access).\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
						exampleRequestBody: '{\n  "bank_id": "gh.29.fi",\n  "name": "OBP",\n  "address": {\n    "line_1": "Osloer Straße 16/17",\n    "line_2": "Wedding",\n    "line_3": "",\n    "city": "Berlin",\n    "state": "Berlin Brandenburg",\n    "postcode": "13359",\n    "country": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "lobby": {\n    "hours": "5"\n  },\n  "drive_up": {\n    "hours": "5"\n  }\n}',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "name": "String",\n  "address": {\n    "line_1": "Osloer Straße 16/17",\n    "line_2": "Wedding",\n    "line_3": "",\n    "city": "Berlin",\n    "state": "Berlin Brandenburg",\n    "postcode": "13359",\n    "country": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "lobby": {\n    "hours": "5"\n  },\n  "drive_up": {\n    "hours": "5"\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "branch_routing": {\n    "scheme": "BranchNumber",\n    "address": "678"\n  }\n}',
						typedBody: [{
								key: 'zFM8ILtyEPh',
								path: 'type',
								type: 'object'
							},
							{
								key: 'GwU3b6xzd4H',
								path: 'lobby',
								type: 'object'
							},
							{
								key: 'Ia6srwkz8Qr',
								path: 'lobby->hours',
								type: 'string'
							},
							{
								key: 'zyBM0xcmVZe',
								path: 'name',
								type: 'string'
							},
							{
								key: 'DlQ0zmPWAeK',
								path: 'address',
								type: 'object'
							},
							{
								key: '7azMt5MWIIz',
								path: 'address->line_3',
								type: 'string'
							},
							{
								key: '5cwCoKI85Rb',
								path: 'address->country',
								type: 'string'
							},
							{
								key: 'DBkicU1_DJn',
								path: 'address->city',
								type: 'string'
							},
							{
								key: 'ADiDoTuyrIK',
								path: 'address->line_2',
								type: 'string'
							},
							{
								key: 'cmneXqgbBgB',
								path: 'address->line_1',
								type: 'string'
							},
							{
								key: 'CIvxbMGV2_3',
								path: 'address->state',
								type: 'string'
							},
							{
								key: 'OLqnotpyFO0',
								path: 'address->postcode',
								type: 'string'
							},
							{
								key: 'Ptlcbw58i8I',
								path: 'drive_up',
								type: 'object'
							},
							{
								key: 'BYsphJuqBUx',
								path: 'drive_up->hours',
								type: 'string'
							},
							{
								key: '10O3d66K9GD',
								path: 'meta',
								type: 'object'
							},
							{
								key: 'uDY1ajf_OVj',
								path: 'meta->license',
								type: 'object'
							},
							{
								key: 'g_i5Ym9lGh9',
								path: 'meta->license->name',
								type: 'string'
							},
							{
								key: 'Y6z30pDxFA5',
								path: 'meta->license->id',
								type: 'string'
							},
							{
								key: '-9INlf7FsCC',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: 'CeK9q7fFE7u',
								path: 'location',
								type: 'object'
							},
							{
								key: '0n1Qc41hYP7',
								path: 'location->longitude',
								type: 'number'
							},
							{
								key: 'YpHGfebXpFj',
								path: 'location->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: 'khObb4oZK8-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'qYpR9_UU74X',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'Tm-XgQLV3vB',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '7gopvfkF1NO',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '10UyXW6wSAg',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Card: [{
					index: 32,
					section: {
						tag: 'Card',
						title: 'Create Card',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create Card at bank specified by BANK_ID .\n\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards',
						exampleRequestBody: '{\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "technology": "technology1",\n  "networks": [\n    "network1",\n    "network2"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    },\n    {\n      "requested_date": "2019-09-03T17:59:14Z",\n      "reason_requested": "GOOD_SECURITY_PRACTICE"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
						exampleResponseBody: '{\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "bank_id": "GENODEM1GLS",\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "cancelled": true,\n  "on_hot_list": true,\n  "technology": "technologyString1",\n  "networks": [\n    "networks1"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account": {\n    "id": "123",\n    "label": "OBP",\n    "views_available": [\n      {\n        "id": "123",\n        "short_name": "short_name",\n        "description": "description",\n        "is_public": true,\n        "alias": "None",\n        "hide_metadata_if_alias_used": true,\n        "can_add_comment": true,\n        "can_add_corporate_location": true,\n        "can_add_image": true,\n        "can_add_image_url": true,\n        "can_add_more_info": true,\n        "can_add_open_corporates_url": true,\n        "can_add_physical_location": true,\n        "can_add_private_alias": true,\n        "can_add_public_alias": true,\n        "can_add_tag": true,\n        "can_add_url": true,\n        "can_add_where_tag": true,\n        "can_delete_comment": true,\n        "can_delete_corporate_location": true,\n        "can_delete_image": true,\n        "can_delete_physical_location": true,\n        "can_delete_tag": true,\n        "can_delete_where_tag": true,\n        "can_edit_owner_comment": true,\n        "can_see_bank_account_balance": true,\n        "can_see_bank_account_bank_name": true,\n        "can_see_bank_account_currency": true,\n        "can_see_bank_account_iban": true,\n        "can_see_bank_account_label": true,\n        "can_see_bank_account_national_identifier": true,\n        "can_see_bank_account_number": true,\n        "can_see_bank_account_owners": true,\n        "can_see_bank_account_swift_bic": true,\n        "can_see_bank_account_type": true,\n        "can_see_comments": true,\n        "can_see_corporate_location": true,\n        "can_see_image_url": true,\n        "can_see_images": true,\n        "can_see_more_info": true,\n        "can_see_open_corporates_url": true,\n        "can_see_other_account_bank_name": true,\n        "can_see_other_account_iban": true,\n        "can_see_other_account_kind": true,\n        "can_see_other_account_metadata": true,\n        "can_see_other_account_national_identifier": true,\n        "can_see_other_account_number": true,\n        "can_see_other_account_swift_bic": true,\n        "can_see_owner_comment": true,\n        "can_see_physical_location": true,\n        "can_see_private_alias": true,\n        "can_see_public_alias": true,\n        "can_see_tags": true,\n        "can_see_transaction_amount": true,\n        "can_see_transaction_balance": true,\n        "can_see_transaction_currency": true,\n        "can_see_transaction_description": true,\n        "can_see_transaction_finish_date": true,\n        "can_see_transaction_metadata": true,\n        "can_see_transaction_other_bank_account": true,\n        "can_see_transaction_start_date": true,\n        "can_see_transaction_this_bank_account": true,\n        "can_see_transaction_type": true,\n        "can_see_url": true,\n        "can_see_where_tag": true\n      }\n    ],\n    "bank_id": "GENODEM1GLS"\n  },\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
						typedBody: [{
								key: 'tDZXyqaUDWp',
								path: 'type',
								type: 'object'
							},
							{
								key: '4k8qei9Kn9h',
								path: 'card_number',
								type: 'string'
							},
							{
								key: 'YAj1KuiIQ3W',
								path: 'enabled',
								type: 'boolean'
							},
							{
								key: 'dfY_hstnSz5',
								path: 'allows',
								type: 'array'
							},
							{
								key: 'ue0TJKZSNK-',
								path: 'allows->items',
								type: 'string'
							},
							{
								key: 'TjCFo0MEJrA',
								path: 'technology',
								type: 'string'
							},
							{
								key: 'Xxnw2oc0DM0',
								path: 'card_type',
								type: 'string'
							},
							{
								key: 'OWhunQJtSdw',
								path: 'name_on_card',
								type: 'string'
							},
							{
								key: 'aSfAZ5fjfOa',
								path: 'pin_reset',
								type: 'array'
							},
							{
								key: '_1jva0HTGkp',
								path: 'pin_reset->items',
								type: 'object'
							},
							{
								key: 'TUdytgvIPfB',
								path: 'pin_reset->items->reason_requested',
								type: 'string'
							},
							{
								key: 'OwihNqMi-5N',
								path: 'pin_reset->items->requested_date',
								type: 'string'
							},
							{
								key: 'Js0YMPhE7dx',
								path: 'pin_reset->items->requested_date->format',
								type: 'date-time'
							},
							{
								key: 'qo9xd3jn_YM',
								path: 'customer_id',
								type: 'string'
							},
							{
								key: 'jL3e4zFXxlR',
								path: 'replacement',
								type: 'object'
							},
							{
								key: 'bhiVLva5kFI',
								path: 'replacement->reason_requested',
								type: 'string'
							},
							{
								key: '6a0Jqi9zs62',
								path: 'replacement->requested_date',
								type: 'string'
							},
							{
								key: 'cPtpcD4UntH',
								path: 'replacement->requested_date->format',
								type: 'date-time'
							},
							{
								key: 'zGVzhNVUCiS',
								path: 'valid_from_date',
								type: 'string'
							},
							{
								key: 'u3N-h6Ec783',
								path: 'valid_from_date->format',
								type: 'date-time'
							},
							{
								key: 'hykYyZ_5w9E',
								path: 'networks',
								type: 'array'
							},
							{
								key: 'Jj7iV9iL8Go',
								path: 'networks->items',
								type: 'string'
							},
							{
								key: 'ZWqVww7VP1C',
								path: 'issue_number',
								type: 'string'
							},
							{
								key: 'uQqhW9HDgGU',
								path: 'serial_number',
								type: 'string'
							},
							{
								key: '3TYkyd0R9-b',
								path: 'posted',
								type: 'string'
							},
							{
								key: 'RbfvqgzKKJA',
								path: 'posted->format',
								type: 'date-time'
							},
							{
								key: 'jRGAzFGmVXK',
								path: 'collected',
								type: 'string'
							},
							{
								key: '8MCgY2hQf9U',
								path: 'collected->format',
								type: 'date-time'
							},
							{
								key: 'mpOKU-spLtj',
								path: 'expires_date',
								type: 'string'
							},
							{
								key: '1V7fi0B4l2H',
								path: 'expires_date->format',
								type: 'date-time'
							},
							{
								key: 'S2KHhg1gofK',
								path: 'account_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '8nh3E4eYFtO',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'OM5cOJI5XLp',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'ZlOapb9uSae',
								code: 'OBP-10015',
								description: 'Allowed values are'
							},
							{
								key: '6m5hFPySJ7g',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 33,
					section: {
						tag: 'Card',
						title: 'Create Card Attribute',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: ' Create Card Attribute\n\nCard Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Card Attribute is linked to its Card by CARD_ID\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attribute',
						exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DOUBLE",\n  "value": "2012-04-23"\n}',
						exampleResponseBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "attribute_type": {\n    "i": 2,\n    "name": "DOUBLE"\n  },\n  "bank_id": {\n    "value": "GENODEM1GLS"\n  },\n  "value": "2012-04-23",\n  "card_attribute_id": "b4e0352a-9a0f-4bfa-b30b-9003aa467f50"\n}',
						typedBody: [{
								key: 'iHOqgl5xYol',
								path: 'type',
								type: 'object'
							},
							{
								key: 'ARz22ysg2XS',
								path: 'value',
								type: 'string'
							},
							{
								key: 'J4OhXaK7hKG',
								path: 'type',
								type: 'string'
							},
							{
								key: 'GdxtuwKt3h-',
								path: 'name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'jhG_xtpEFX9',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Q8peSc-HHlJ',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'TeEjJC-8L44',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 34,
					section: {
						tag: 'Card',
						title: 'Delete Card',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete a Card at bank specified by CARD_ID .\n\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'YUGU7YiItcD',
								path: 'type',
								type: 'object'
							},
							{
								key: '-J5ZrlUtUTr',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'Wmx7Lip4YLr',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '_HSaWYpKzHR',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'oTokkvArAIk',
								code: 'OBP-10015',
								description: 'Allowed values are'
							},
							{
								key: 'ePY1I1mJhJB',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 35,
					section: {
						tag: 'Card',
						title: 'Get Card By Id',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\nThis will the datails of the card.\nIt shows the account infomation which linked the the card.\nAlso shows the card attributes of the card. \n\n       ',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
						exampleResponseBody: '{\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "bank_id": "GENODEM1GLS",\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "cancelled": true,\n  "on_hot_list": true,\n  "technology": "technologyString1",\n  "networks": [\n    "networks1"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account": {\n    "id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n    "label": "My Account",\n    "views_available": [\n      {\n        "id": "owner",\n        "name": "Owner",\n        "description": "This view is for the owner for the account."\n      }\n    ],\n    "bank_id": "GENODEM1GLS"\n  },\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "card_attributes": [\n    {\n      "name": "OVERDRAFT_START_DATE",\n      "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n      "attribute_type": {\n        "i": 0,\n        "name": "STRING"\n      },\n      "bank_id": {\n        "value": "GENODEM1GLS"\n      },\n      "value": "2012-04-23",\n      "card_attribute_id": "b4e0352a-9a0f-4bfa-b30b-9003aa467f50"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'FeTq8meOuHP',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'KzlAzrptgSu',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'aoTDJ6BiO80',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 36,
					section: {
						tag: 'Card',
						title: 'Get cards for the current user',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns data about all the physical cards a user has been issued. These could be debit cards, credit cards, etc.',
						specificUrl: '/obp/v4.0.0/cards',
						exampleResponseBody: '{\n  "cards": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "bank_card_number": "364435172576215",\n      "name_on_card": "String",\n      "issue_number": "1",\n      "serial_number": "1324234",\n      "valid_from_date": "2017-09-19T00:00:00Z",\n      "expires_date": "2017-09-19T00:00:00Z",\n      "enabled": true,\n      "cancelled": true,\n      "on_hot_list": true,\n      "technology": "String",\n      "networks": [\n        "String"\n      ],\n      "allows": [\n        "String"\n      ],\n      "account": {\n        "id": "123",\n        "label": "OBP",\n        "views_available": [\n          {\n            "id": "123",\n            "short_name": "short_name",\n            "description": "description",\n            "is_public": true,\n            "alias": "None",\n            "hide_metadata_if_alias_used": true,\n            "can_add_comment": true,\n            "can_add_corporate_location": true,\n            "can_add_image": true,\n            "can_add_image_url": true,\n            "can_add_more_info": true,\n            "can_add_open_corporates_url": true,\n            "can_add_physical_location": true,\n            "can_add_private_alias": true,\n            "can_add_public_alias": true,\n            "can_add_tag": true,\n            "can_add_url": true,\n            "can_add_where_tag": true,\n            "can_delete_comment": true,\n            "can_delete_corporate_location": true,\n            "can_delete_image": true,\n            "can_delete_physical_location": true,\n            "can_delete_tag": true,\n            "can_delete_where_tag": true,\n            "can_edit_owner_comment": true,\n            "can_see_bank_account_balance": true,\n            "can_see_bank_account_bank_name": true,\n            "can_see_bank_account_currency": true,\n            "can_see_bank_account_iban": true,\n            "can_see_bank_account_label": true,\n            "can_see_bank_account_national_identifier": true,\n            "can_see_bank_account_number": true,\n            "can_see_bank_account_owners": true,\n            "can_see_bank_account_swift_bic": true,\n            "can_see_bank_account_type": true,\n            "can_see_comments": true,\n            "can_see_corporate_location": true,\n            "can_see_image_url": true,\n            "can_see_images": true,\n            "can_see_more_info": true,\n            "can_see_open_corporates_url": true,\n            "can_see_other_account_bank_name": true,\n            "can_see_other_account_iban": true,\n            "can_see_other_account_kind": true,\n            "can_see_other_account_metadata": true,\n            "can_see_other_account_national_identifier": true,\n            "can_see_other_account_number": true,\n            "can_see_other_account_swift_bic": true,\n            "can_see_owner_comment": true,\n            "can_see_physical_location": true,\n            "can_see_private_alias": true,\n            "can_see_public_alias": true,\n            "can_see_tags": true,\n            "can_see_transaction_amount": true,\n            "can_see_transaction_balance": true,\n            "can_see_transaction_currency": true,\n            "can_see_transaction_description": true,\n            "can_see_transaction_finish_date": true,\n            "can_see_transaction_metadata": true,\n            "can_see_transaction_other_bank_account": true,\n            "can_see_transaction_start_date": true,\n            "can_see_transaction_this_bank_account": true,\n            "can_see_transaction_type": true,\n            "can_see_url": true,\n            "can_see_where_tag": true\n          }\n        ],\n        "bank_id": "GENODEM1GLS"\n      },\n      "replacement": {\n        "requested_date": "2017-09-19T00:00:00Z",\n        "reason_requested": "RENEW"\n      },\n      "pin_reset": [\n        {\n          "requested_date": "2017-09-19T00:00:00Z",\n          "reason_requested": "FORGOT"\n        }\n      ],\n      "collected": "2017-09-19T00:00:00Z",\n      "posted": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '3z5rCG-UlnI',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'l1VgHAPsEwo',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 37,
					section: {
						tag: 'Card',
						title: 'Get Cards for the specified bank',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Should be able to filter on the following fields\n\neg:/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards?customer_id=66214b8e-259e-44ad-8868-3eb47be70646$account_id=8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0\n\n1 customer_id should be valid customer_id, otherwise, it will return an empty card list.  \n\n2 account_id should be valid account_id , otherwise, it will return an empty card list.  \n\n\n${authenticationRequiredMessage(true)}',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards',
						exampleResponseBody: '{\n  "cards": [\n    {\n      "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n      "bank_id": "GENODEM1GLS",\n      "card_number": "364435172576215",\n      "card_type": "Credit",\n      "name_on_card": "SusanSmith",\n      "issue_number": "1",\n      "serial_number": "1324234",\n      "valid_from_date": "2017-09-19T00:00:00Z",\n      "expires_date": "2017-09-19T00:00:00Z",\n      "enabled": true,\n      "cancelled": true,\n      "on_hot_list": true,\n      "technology": "technologyString1",\n      "networks": [\n        "networks1"\n      ],\n      "allows": [\n        "credit",\n        "debit"\n      ],\n      "account": {\n        "id": "123",\n        "label": "OBP",\n        "views_available": [\n          {\n            "id": "123",\n            "short_name": "short_name",\n            "description": "description",\n            "is_public": true,\n            "alias": "None",\n            "hide_metadata_if_alias_used": true,\n            "can_add_comment": true,\n            "can_add_corporate_location": true,\n            "can_add_image": true,\n            "can_add_image_url": true,\n            "can_add_more_info": true,\n            "can_add_open_corporates_url": true,\n            "can_add_physical_location": true,\n            "can_add_private_alias": true,\n            "can_add_public_alias": true,\n            "can_add_tag": true,\n            "can_add_url": true,\n            "can_add_where_tag": true,\n            "can_delete_comment": true,\n            "can_delete_corporate_location": true,\n            "can_delete_image": true,\n            "can_delete_physical_location": true,\n            "can_delete_tag": true,\n            "can_delete_where_tag": true,\n            "can_edit_owner_comment": true,\n            "can_see_bank_account_balance": true,\n            "can_see_bank_account_bank_name": true,\n            "can_see_bank_account_currency": true,\n            "can_see_bank_account_iban": true,\n            "can_see_bank_account_label": true,\n            "can_see_bank_account_national_identifier": true,\n            "can_see_bank_account_number": true,\n            "can_see_bank_account_owners": true,\n            "can_see_bank_account_swift_bic": true,\n            "can_see_bank_account_type": true,\n            "can_see_comments": true,\n            "can_see_corporate_location": true,\n            "can_see_image_url": true,\n            "can_see_images": true,\n            "can_see_more_info": true,\n            "can_see_open_corporates_url": true,\n            "can_see_other_account_bank_name": true,\n            "can_see_other_account_iban": true,\n            "can_see_other_account_kind": true,\n            "can_see_other_account_metadata": true,\n            "can_see_other_account_national_identifier": true,\n            "can_see_other_account_number": true,\n            "can_see_other_account_swift_bic": true,\n            "can_see_owner_comment": true,\n            "can_see_physical_location": true,\n            "can_see_private_alias": true,\n            "can_see_public_alias": true,\n            "can_see_tags": true,\n            "can_see_transaction_amount": true,\n            "can_see_transaction_balance": true,\n            "can_see_transaction_currency": true,\n            "can_see_transaction_description": true,\n            "can_see_transaction_finish_date": true,\n            "can_see_transaction_metadata": true,\n            "can_see_transaction_other_bank_account": true,\n            "can_see_transaction_start_date": true,\n            "can_see_transaction_this_bank_account": true,\n            "can_see_transaction_type": true,\n            "can_see_url": true,\n            "can_see_where_tag": true\n          }\n        ],\n        "bank_id": "GENODEM1GLS"\n      },\n      "replacement": {\n        "requested_date": "2017-09-19T00:00:00Z",\n        "reason_requested": "RENEW"\n      },\n      "pin_reset": [\n        {\n          "requested_date": "2017-09-19T00:00:00Z",\n          "reason_requested": "FORGOT"\n        }\n      ],\n      "collected": "2017-09-19T00:00:00Z",\n      "posted": "2017-09-19T00:00:00Z",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'bLPWs_sUxIX',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'iVsQhdniGrg',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'HNyjrO1FYoi',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 38,
					section: {
						tag: 'Card',
						title: 'Get status of Credit Card order ',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '**NOTE: This endpoint currently only returns example data.**\n\n      Get status of Credit Card orders\nGet all orders\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/credit_cards/orders',
						exampleResponseBody: '{\n  "cards": [\n    {\n      "card_type": "5",\n      "card_description": "good",\n      "use_type": "3"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '1frXt9UgPR-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'e_AFoilCJmu',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'zT55ZQqUaWU',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '6d3SlVV_8rW',
								code: 'OBP-50212',
								description: 'Connector did not return the set of status of credit card.'
							},
							{
								key: 'xHfeGzhLG1_',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 39,
					section: {
						tag: 'Card',
						title: 'Update Card',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update Card at bank specified by CARD_ID .\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
						exampleRequestBody: '{\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "technology": "technology1",\n  "networks": [\n    "network1",\n    "network2"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    },\n    {\n      "requested_date": "2019-09-03T17:59:14Z",\n      "reason_requested": "GOOD_SECURITY_PRACTICE"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
						exampleResponseBody: '{\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "bank_id": "GENODEM1GLS",\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "cancelled": true,\n  "on_hot_list": true,\n  "technology": "technologyString1",\n  "networks": [\n    "networks1"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account": {\n    "id": "123",\n    "label": "OBP",\n    "views_available": [\n      {\n        "id": "123",\n        "short_name": "short_name",\n        "description": "description",\n        "is_public": true,\n        "alias": "None",\n        "hide_metadata_if_alias_used": true,\n        "can_add_comment": true,\n        "can_add_corporate_location": true,\n        "can_add_image": true,\n        "can_add_image_url": true,\n        "can_add_more_info": true,\n        "can_add_open_corporates_url": true,\n        "can_add_physical_location": true,\n        "can_add_private_alias": true,\n        "can_add_public_alias": true,\n        "can_add_tag": true,\n        "can_add_url": true,\n        "can_add_where_tag": true,\n        "can_delete_comment": true,\n        "can_delete_corporate_location": true,\n        "can_delete_image": true,\n        "can_delete_physical_location": true,\n        "can_delete_tag": true,\n        "can_delete_where_tag": true,\n        "can_edit_owner_comment": true,\n        "can_see_bank_account_balance": true,\n        "can_see_bank_account_bank_name": true,\n        "can_see_bank_account_currency": true,\n        "can_see_bank_account_iban": true,\n        "can_see_bank_account_label": true,\n        "can_see_bank_account_national_identifier": true,\n        "can_see_bank_account_number": true,\n        "can_see_bank_account_owners": true,\n        "can_see_bank_account_swift_bic": true,\n        "can_see_bank_account_type": true,\n        "can_see_comments": true,\n        "can_see_corporate_location": true,\n        "can_see_image_url": true,\n        "can_see_images": true,\n        "can_see_more_info": true,\n        "can_see_open_corporates_url": true,\n        "can_see_other_account_bank_name": true,\n        "can_see_other_account_iban": true,\n        "can_see_other_account_kind": true,\n        "can_see_other_account_metadata": true,\n        "can_see_other_account_national_identifier": true,\n        "can_see_other_account_number": true,\n        "can_see_other_account_swift_bic": true,\n        "can_see_owner_comment": true,\n        "can_see_physical_location": true,\n        "can_see_private_alias": true,\n        "can_see_public_alias": true,\n        "can_see_tags": true,\n        "can_see_transaction_amount": true,\n        "can_see_transaction_balance": true,\n        "can_see_transaction_currency": true,\n        "can_see_transaction_description": true,\n        "can_see_transaction_finish_date": true,\n        "can_see_transaction_metadata": true,\n        "can_see_transaction_other_bank_account": true,\n        "can_see_transaction_start_date": true,\n        "can_see_transaction_this_bank_account": true,\n        "can_see_transaction_type": true,\n        "can_see_url": true,\n        "can_see_where_tag": true\n      }\n    ],\n    "bank_id": "GENODEM1GLS"\n  },\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
						typedBody: [{
								key: 'NmSHkDrTFT8',
								path: 'type',
								type: 'object'
							},
							{
								key: 'FahNtMVfR6W',
								path: 'enabled',
								type: 'boolean'
							},
							{
								key: 'OyQ35J1Uone',
								path: 'allows',
								type: 'array'
							},
							{
								key: 'ipcDuAT_W98',
								path: 'allows->items',
								type: 'string'
							},
							{
								key: '2pkYn8IEjjG',
								path: 'technology',
								type: 'string'
							},
							{
								key: 'Fay-S1tb4aT',
								path: 'card_type',
								type: 'string'
							},
							{
								key: 'kUyYoaBBrGJ',
								path: 'name_on_card',
								type: 'string'
							},
							{
								key: 'x8DqO6afZDC',
								path: 'pin_reset',
								type: 'array'
							},
							{
								key: 'yD3ZW4WkJB-',
								path: 'pin_reset->items',
								type: 'object'
							},
							{
								key: 'p0nSdWAD_w8',
								path: 'pin_reset->items->reason_requested',
								type: 'string'
							},
							{
								key: 'z0qmedtSGo6',
								path: 'pin_reset->items->requested_date',
								type: 'string'
							},
							{
								key: 'tLZT_XpS-XH',
								path: 'pin_reset->items->requested_date->format',
								type: 'date-time'
							},
							{
								key: 'BNrLGYs3mjg',
								path: 'customer_id',
								type: 'string'
							},
							{
								key: 'drYpxA4Vnlq',
								path: 'replacement',
								type: 'object'
							},
							{
								key: 'OgHCUCGZ-w9',
								path: 'replacement->reason_requested',
								type: 'string'
							},
							{
								key: 'QhXxzULydvY',
								path: 'replacement->requested_date',
								type: 'string'
							},
							{
								key: 'Pwf6iONCHmJ',
								path: 'replacement->requested_date->format',
								type: 'date-time'
							},
							{
								key: 'phCeEuxWdXw',
								path: 'valid_from_date',
								type: 'string'
							},
							{
								key: 'eDggBB90bMx',
								path: 'valid_from_date->format',
								type: 'date-time'
							},
							{
								key: 'W5x5lZHidve',
								path: 'networks',
								type: 'array'
							},
							{
								key: 'j4wQV8GZICP',
								path: 'networks->items',
								type: 'string'
							},
							{
								key: 'AF_wE9d_aut',
								path: 'issue_number',
								type: 'string'
							},
							{
								key: 'PraNzp56T0L',
								path: 'serial_number',
								type: 'string'
							},
							{
								key: 'w2OaQ7XsT7i',
								path: 'posted',
								type: 'string'
							},
							{
								key: 'hj4h7CqmVgU',
								path: 'posted->format',
								type: 'date-time'
							},
							{
								key: 'suMgFEI0Qj4',
								path: 'collected',
								type: 'string'
							},
							{
								key: 'q6UA_bv_Sa2',
								path: 'collected->format',
								type: 'date-time'
							},
							{
								key: 'EoBgfG_2XO1',
								path: 'expires_date',
								type: 'string'
							},
							{
								key: 'w1AYXixxPEp',
								path: 'expires_date->format',
								type: 'date-time'
							},
							{
								key: 'QcVx8YHw6pN',
								path: 'account_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '_b3JWoi9Vff',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '0dGOnPjNVJE',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'b2I3Iavx-dy',
								code: 'OBP-10015',
								description: 'Allowed values are'
							},
							{
								key: 'H32wzfUh30d',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 40,
					section: {
						tag: 'Card',
						title: 'Update Card Attribute',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: ' Update Card Attribute\n\nCard Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Card Attribute is linked to its Card by CARD_ID\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attributes/CARD_ATTRIBUTE_ID',
						exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DOUBLE",\n  "value": "2012-04-23"\n}',
						exampleResponseBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "attribute_type": {\n    "i": 2,\n    "name": "DOUBLE"\n  },\n  "bank_id": {\n    "value": "GENODEM1GLS"\n  },\n  "value": "2012-04-23",\n  "card_attribute_id": "b4e0352a-9a0f-4bfa-b30b-9003aa467f50"\n}',
						typedBody: [{
								key: 'J5gg48AWbUB',
								path: 'type',
								type: 'object'
							},
							{
								key: 'li3IavXdEyg',
								path: 'value',
								type: 'string'
							},
							{
								key: 'JYbSak5a7f8',
								path: 'type',
								type: 'string'
							},
							{
								key: 'Q49kLnugAKB',
								path: 'name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '-5nIHSb4uUe',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Z9CSyCDMo_A',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'T5MHORCoYEx',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Consent: [{
					index: 41,
					section: {
						tag: 'Consent',
						title: 'Answer Consent Challenge',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\nThis endpoint is used to confirm a Consent previously created.\n\nThe User must supply a code that was sent out of band (OOB) for example via an SMS.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/consents/CONSENT_ID/challenge',
						exampleRequestBody: '{\n  "answer": "12345678"\n}',
						exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "INITIATED"\n}',
						typedBody: [{
								key: '2AwJqc6iZZ',
								path: 'type',
								type: 'object'
							},
							{
								key: 'jij67jeR6g',
								path: 'answer',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '6HyLepxvZV',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'qnjOZgCYfB',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'wAKN6uNFct',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '1VqfzG-L2t',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 't-P244vTMw',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 42,
					section: {
						tag: 'Consent',
						title: 'Create Consent (EMAIL)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\nThis endpoint starts the process of creating a Consent.\n\nThe Consent is created in an INITIATED state.\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\nWhen the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/EMAIL',
						exampleRequestBody: '{\n  "for": "ALL_MY_ACCOUNTS",\n  "view": "owner",\n  "email": "marko@tesobe.com"\n}',
						exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "INITIATED"\n}',
						typedBody: [{
								key: 'Rg6rrLg1_Yl',
								path: 'type',
								type: 'object'
							},
							{
								key: 'zgb0nv3oucF',
								path: 'email',
								type: 'string'
							},
							{
								key: 'wfd-BGkJuCr',
								path: 'view',
								type: 'string'
							},
							{
								key: 'NjiaeswqoXZ',
								path: 'for',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'HuaEU_14g9r',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'h_7Pc3tIKhX',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'O09wFvF0dpZ',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '77oT2nedOZn',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'zz2vGgmqcyf',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 43,
					section: {
						tag: 'Consent',
						title: 'Create Consent (SMS)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\nThis endpoint starts the process of creating a Consent.\n\nThe Consent is created in an INITIATED state.\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\nWhen the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/SMS',
						exampleRequestBody: '{\n  "for": "ALL_MY_ACCOUNTS",\n  "view": "owner",\n  "phone_number": "493081453994"\n}',
						exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "INITIATED"\n}',
						typedBody: [{
								key: 'KP46tYGDZ_m',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Qpywr1YQ14K',
								path: 'phone_number',
								type: 'string'
							},
							{
								key: 'yzKSsTrD1iu',
								path: 'view',
								type: 'string'
							},
							{
								key: '1N6NcJ3ckdy',
								path: 'for',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'AHTlj000toS',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Wsu1OeQKQOg',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'an-d5y0brNK',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'hNBEwqkAxne',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'H4zX9zXZ4_G',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 44,
					section: {
						tag: 'Consent',
						title: 'Get Consents',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\n\nThis endpoint gets the Consents that the current User created.\n\nAuthentication is Mandatory\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents',
						exampleResponseBody: '{\n  "consents": [\n    {\n      "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n      "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n      "status": "INITIATED"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'M-rN7SlRY-C',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'mXQ_NxyCxlj',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'Y70H-aFdl3d',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 45,
					section: {
						tag: 'Consent',
						title: 'Revoke Consent',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\nRevoke Consent for current user specified by CONSENT_ID\n\n\nAuthentication is Mandatory\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/CONSENT_ID/revoke',
						exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "REJECTED"\n}',
						typedBody: [],
						possibleErrors: [{
								key: '8BJz66rqU-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '4hK78ypMFq',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'VSaW8rUfOk',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Counterparty: [{
					index: 46,
					section: {
						tag: 'Counterparty',
						title: 'Create Counterparty (Explicit)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create Counterparty (Explicit) for an Account.\n\nIn OBP, there are two types of Counterparty.\n\n* Explicit Counterparties (those here) which we create explicitly and are used in COUNTERPARTY Transaction Requests\n\n* Implicit Counterparties (AKA Other Accounts) which are generated automatically from the other sides of Transactions.\n\nExplicit Counterparties are created for the account / view\nThey are how the user of the view (e.g. account owner) refers to the other side of the transaction\n\nname : the human readable name (e.g. Piano teacher, Miss Nipa)\n\ndescription : the human readable name (e.g. Piano teacher, Miss Nipa)\n\nbank_routing_scheme : eg: bankId or bankCode or any other strings\n\nbank_routing_address : eg: `gh.29.uk`, must be valid sandbox bankIds\n\naccount_routing_scheme : eg: AccountId or AccountNumber or any other strings\n\naccount_routing_address : eg: `1d65db7c-a7b2-4839-af41-95`, must be valid accountIds\n\nother_account_secondary_routing_scheme : eg: IBan or any other strings\n\nother_account_secondary_routing_address : if it is IBan, it should be unique for each counterparty. \n\nother_branch_routing_scheme : eg: branchId or any other strings or you can leave it empty, not useful in sandbox mode.\n\nother_branch_routing_address : eg: `branch-id-123` or you can leave it empty, not useful in sandbox mode.\n\nis_beneficiary : must be set to `true` in order to send payments to this counterparty\n\nbespoke: It support list of key-value, you can add it to the counterarty.\n\nbespoke.key : any info-key you want to add to this counerparty\n \nbespoke.value : any info-value you want to add to this counerparty\n\nThe view specified by VIEW_ID must have the canAddCounterparty permission\n\nA minimal example for TransactionRequestType == COUNTERPARTY\n {\n  "name": "Tesobe1",\n  "description": "Good Company",\n  "other_bank_routing_scheme": "bankId",\n  "other_bank_routing_address": "gh.29.uk",\n  "other_account_routing_scheme": "accountId",\n  "other_account_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "other_account_secondary_routing_scheme": "",\n  "other_account_secondary_routing_address": "",\n  "other_branch_routing_scheme": "",\n  "other_branch_routing_address": "",\n  "bespoke": []\n}\n\n \nA minimal example for TransactionRequestType == SEPA\n \n {\n  "name": "Tesobe2",\n  "description": "Good Company",\n  "other_bank_routing_scheme": "bankId",\n  "other_bank_routing_address": "gh.29.uk",\n  "other_account_routing_scheme": "accountId",\n  "other_account_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "other_account_secondary_routing_scheme": "IBAN",\n  "other_account_secondary_routing_address": "DE89 3704 0044 0532 0130 00",\n  "is_beneficiary": true,\n  "other_branch_routing_scheme": "",\n  "other_branch_routing_address": "",\n  "bespoke": []\n}\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties',
						exampleRequestBody: '{\n  "name": "CounterpartyName",\n  "description": "My landlord",\n  "other_account_routing_scheme": "accountNumber",\n  "other_account_routing_address": "7987987-2348987-234234",\n  "other_account_secondary_routing_scheme": "IBAN",\n  "other_account_secondary_routing_address": "DE89370400440532013000",\n  "other_bank_routing_scheme": "bankCode",\n  "other_bank_routing_address": "10",\n  "other_branch_routing_scheme": "branchNumber",\n  "other_branch_routing_address": "10010",\n  "is_beneficiary": true,\n  "bespoke": [\n    {\n      "key": "englishName",\n      "value": "english Name"\n    }\n  ]\n}',
						exampleResponseBody: '{\n  "name": "CounterpartyName",\n  "description": "My landlord",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "this_bank_id": "GENODEM1GLS",\n  "this_account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "this_view_id": "owner",\n  "counterparty_id": "1d65db7c-a7b2-4839-af41-958276ab7790",\n  "other_bank_routing_scheme": "bankCode",\n  "other_bank_routing_address": "10",\n  "other_branch_routing_scheme": "branchNumber",\n  "other_branch_routing_address": "10010",\n  "other_account_routing_scheme": "accountNumber",\n  "other_account_routing_address": "7987987-2348987-234234",\n  "other_account_secondary_routing_scheme": "accountId",\n  "other_account_secondary_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "bespoke": [\n    {\n      "key": "englishName",\n      "value": "english Name"\n    }\n  ],\n  "metadata": {\n    "public_alias": "String",\n    "more_info": "String",\n    "url": "String",\n    "image_url": "String",\n    "open_corporates_url": "String",\n    "corporate_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "physical_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "private_alias": "String"\n  }\n}',
						typedBody: [{
								key: '4RD7LLEz05',
								path: 'type',
								type: 'object'
							},
							{
								key: '57zvTSZVZa',
								path: 'bespoke',
								type: 'array'
							},
							{
								key: 'CiAbki7EoJ',
								path: 'bespoke->items',
								type: 'object'
							},
							{
								key: 'Wwr_qTh8p4',
								path: 'bespoke->items->value',
								type: 'string'
							},
							{
								key: 'Pz_mcSbqRw',
								path: 'bespoke->items->key',
								type: 'string'
							},
							{
								key: '1uuL2EaVbQ',
								path: 'other_bank_routing_scheme',
								type: 'string'
							},
							{
								key: 'eeLNbLY9Av',
								path: 'name',
								type: 'string'
							},
							{
								key: 'Hl8SuB9a7C',
								path: 'other_branch_routing_address',
								type: 'string'
							},
							{
								key: 'wV5r96KgEj',
								path: 'other_account_secondary_routing_address',
								type: 'string'
							},
							{
								key: 'rMhkUC6JCi',
								path: 'description',
								type: 'string'
							},
							{
								key: 'A07i_z9tvk',
								path: 'other_account_routing_address',
								type: 'string'
							},
							{
								key: 'HRJWlCMSLZ',
								path: 'other_bank_routing_address',
								type: 'string'
							},
							{
								key: 'gEbP7P5BAF',
								path: 'other_branch_routing_scheme',
								type: 'string'
							},
							{
								key: '2w9Cp5PuCw',
								path: 'other_account_secondary_routing_scheme',
								type: 'string'
							},
							{
								key: 'pNbnMyeFpE',
								path: 'other_account_routing_scheme',
								type: 'string'
							},
							{
								key: 'TJ3W5AtHwQ',
								path: 'is_beneficiary',
								type: 'boolean'
							}
						],
						possibleErrors: [{
								key: 'ozO8BnlPrT',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'qoPj9AnmL5',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'yqCe5hfzf7',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'eSK4a5wszu',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'mfehaY08a9',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'HU-v8PvpHL',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'lVabY5HQ1S',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'uAmJddLYDI',
								code: 'OBP-30014',
								description: 'Counterparty already exists. Please specify a different value for BANK_ID or ACCOUNT_ID or VIEW_ID or NAME.'
							},
							{
								key: 'JrGvQ4D-co',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 47,
					section: {
						tag: 'Counterparty',
						title: 'Get Counterparties (Explicit).',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the Counterparties (Explicit) for the account / view.\n\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties',
						exampleResponseBody: '{\n  "counterparties": [\n    {\n      "name": "CounterpartyName",\n      "description": "My landlord",\n      "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "this_bank_id": "GENODEM1GLS",\n      "this_account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n      "this_view_id": "owner",\n      "counterparty_id": "1d65db7c-a7b2-4839-af41-958276ab7790",\n      "other_bank_routing_scheme": "bankCode",\n      "other_bank_routing_address": "10",\n      "other_branch_routing_scheme": "branchNumber",\n      "other_branch_routing_address": "10010",\n      "other_account_routing_scheme": "accountNumber",\n      "other_account_routing_address": "7987987-2348987-234234",\n      "other_account_secondary_routing_scheme": "accountId",\n      "other_account_secondary_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "is_beneficiary": true,\n      "bespoke": [\n        {\n          "key": "englishName",\n          "value": "english Name"\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 't-sJpN3n-w-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'R6zMRQBeMw_',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'q2A4BXoacY0',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: '5phJlTjFkwN',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'aDIPQMl6djY',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'zBb0myIBwIx',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 48,
					section: {
						tag: 'Counterparty',
						title: 'Get Counterparty by Counterparty Id.(Explicit).',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Information returned about the Counterparty specified by COUNTERPARTY_ID:\n\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties/COUNTERPARTY_ID',
						exampleResponseBody: '{\n  "name": "CounterpartyName",\n  "description": "My landlord",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "this_bank_id": "GENODEM1GLS",\n  "this_account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "this_view_id": "owner",\n  "counterparty_id": "1d65db7c-a7b2-4839-af41-958276ab7790",\n  "other_bank_routing_scheme": "bankCode",\n  "other_bank_routing_address": "10",\n  "other_branch_routing_scheme": "branchNumber",\n  "other_branch_routing_address": "10010",\n  "other_account_routing_scheme": "accountNumber",\n  "other_account_routing_address": "7987987-2348987-234234",\n  "other_account_secondary_routing_scheme": "accountId",\n  "other_account_secondary_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "bespoke": [\n    {\n      "key": "englishName",\n      "value": "english Name"\n    }\n  ],\n  "metadata": {\n    "public_alias": "String",\n    "more_info": "String",\n    "url": "String",\n    "image_url": "String",\n    "open_corporates_url": "String",\n    "corporate_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "physical_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "private_alias": "String"\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'JvKNiyfQt6n',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'VEj3mPVxjz2',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '3E_LpOdgVWP',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 49,
					section: {
						tag: 'Counterparty',
						title: 'Get Other Account by Id.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.\nAuthentication is Optional\n\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "holder": {\n    "name": "OBP",\n    "is_alias": true\n  },\n  "bank_routing": {\n    "scheme": "Bank_ID",\n    "address": "gh.29.uk"\n  },\n  "account_routings": [\n    {\n      "scheme": "AccountNumber",\n      "address": "4930396"\n    }\n  ],\n  "metadata": {\n    "public_alias": "NONE",\n    "private_alias": "NONE",\n    "more_info": "www.openbankproject.com",\n    "URL": "www.openbankproject.com",\n    "image_URL": "www.openbankproject.com",\n    "open_corporates_URL": "www.openbankproject.com",\n    "corporate_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    },\n    "physical_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'mCs3KNTMpag',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'XUbkBwnYNd7',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '3EfD0iqcaik',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'B368yaA1gEO',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'aJcIh3N4mQn',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 50,
					section: {
						tag: 'Counterparty',
						title: 'Get Other Accounts of one Account.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.\nAuthentication is Optional\n\nAuthentication is required if the view VIEW_ID is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts',
						exampleResponseBody: '{\n  "other_accounts": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "holder": {\n        "name": "OBP",\n        "is_alias": true\n      },\n      "bank_routing": {\n        "scheme": "Bank_ID",\n        "address": "gh.29.uk"\n      },\n      "account_routings": [\n        {\n          "scheme": "AccountNumber",\n          "address": "4930396"\n        }\n      ],\n      "metadata": {\n        "public_alias": "NONE",\n        "private_alias": "NONE",\n        "more_info": "www.openbankproject.com",\n        "URL": "www.openbankproject.com",\n        "image_URL": "www.openbankproject.com",\n        "open_corporates_URL": "www.openbankproject.com",\n        "corporate_location": {\n          "latitude": 1.231,\n          "longitude": 1.231,\n          "date": "2017-09-19T00:00:00Z",\n          "user": {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "provider": "http://127.0.0.1:8080",\n            "display_name": "OBP"\n          }\n        },\n        "physical_location": {\n          "latitude": 1.231,\n          "longitude": 1.231,\n          "date": "2017-09-19T00:00:00Z",\n          "user": {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "provider": "http://127.0.0.1:8080",\n            "display_name": "OBP"\n          }\n        }\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'z08LvcGiya',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'S2gRdBaISV',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'ZQAfqICmor',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'ZOsXwW_Gz7',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'eN8pu5QN6o',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			'Counterparty Metadata': [{
					index: 51,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add Corporate Location to Counterparty',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add the geolocation of the counterparty\'s registered address',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
						exampleRequestBody: '{\n  "corporate_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: '3CNhakDGLY3',
								path: 'type',
								type: 'object'
							},
							{
								key: 'pzCaG90H-qd',
								path: 'corporate_location',
								type: 'object'
							},
							{
								key: 'Y5IE1Eb0f55',
								path: 'corporate_location->longitude',
								type: 'number'
							},
							{
								key: 'gRYagR0fzWV',
								path: 'corporate_location->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: 'ad_ve9-ZrOt',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'OcSCJfbbKmq',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '1MQncuiYu2k',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'jCtBOehCt1_',
								code: '<no code>',
								description: 'the view does not allow adding a corporate location'
							},
							{
								key: 'vBt5kfXuggm',
								code: '<no code>',
								description: 'Coordinates not possible'
							},
							{
								key: 'fGWR7g5PR0p',
								code: '<no code>',
								description: 'Corporate Location cannot be deleted'
							},
							{
								key: '2on5wxOA5If',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 52,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add Counterparty More Info',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add a description of the counter party from the perpestive of the account e.g. My dentist.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
						exampleRequestBody: '{\n  "more_info": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: '4nRKG_gbI4m',
								path: 'type',
								type: 'object'
							},
							{
								key: 'IEwq24pFf4H',
								path: 'more_info',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'Mdtu0fJMp7k',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'KhkItTWam9A',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'p4ro6Qlf8ry',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '4dMnrj-BuBP',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'xZZ35bDvPCn',
								code: '<no code>',
								description: 'the view ownerdoes not allow adding more info'
							},
							{
								key: 'G6SLIjA-I4-',
								code: '<no code>',
								description: 'More Info cannot be added'
							},
							{
								key: 't944Jok8GQc',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 53,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add image url to other bank account.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add a url that points to the logo of the counterparty',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
						exampleRequestBody: '{\n  "image_URL": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'zGhyrIodqI6',
								path: 'type',
								type: 'object'
							},
							{
								key: 'jsMQv6sj_Dq',
								path: 'image_URL',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'XE152tRqhYm',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'PGUJG5LYdqk',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'b4GQdQ9yFdZ',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'wKRisJBV2gm',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: '2_wbWbE1wML',
								code: '<no code>',
								description: 'the view does not allow adding an image url'
							},
							{
								key: 'eh24on_TG2U',
								code: '<no code>',
								description: 'URL cannot be added'
							},
							{
								key: 'm2x9OB59S73',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 54,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add Open Corporates URL to Counterparty',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add open corporates url to other bank account.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
						exampleRequestBody: '{\n  "open_corporates_URL": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'adcPKF0U-c',
								path: 'type',
								type: 'object'
							},
							{
								key: 'HpK7u_nRk6',
								path: 'open_corporates_URL',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'sJLlj3ATJY',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'qztDKwan7i',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'yVCVN8jVkK',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'IWuPXwe6dk',
								code: '<no code>',
								description: 'the view does not allow adding an open corporate url'
							},
							{
								key: 'oa2CvRzNOm',
								code: '<no code>',
								description: 'URL cannot be added'
							},
							{
								key: 'hdhZEisn1C',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 55,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add physical location to other bank account.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add geocoordinates of the counterparty\'s main location',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
						exampleRequestBody: '{\n  "physical_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: '4v-bdOypbVZ',
								path: 'type',
								type: 'object'
							},
							{
								key: 'cXp_ItBGrmt',
								path: 'physical_location',
								type: 'object'
							},
							{
								key: 'h-lziJPYPXO',
								path: 'physical_location->longitude',
								type: 'number'
							},
							{
								key: 'aCGIVB5H6EO',
								path: 'physical_location->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: '6tLXDRkrSaS',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'LwttM_OaWJ_',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'rDhRpMdA38C',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'dVdEgIURe3j',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'XxaBLO7HAOk',
								code: '<no code>',
								description: 'the view does not allow adding a physical location'
							},
							{
								key: 'jnFXWDvn8ta',
								code: '<no code>',
								description: 'Coordinates not possible'
							},
							{
								key: 'p5tbLrRHU-V',
								code: '<no code>',
								description: 'Physical Location cannot be added'
							},
							{
								key: 'v3YjrCXCwAL',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 56,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add public alias to other bank account.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Creates the public alias for the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n\nNote: Public aliases are automatically generated for new \'other accounts / counterparties\', so this call should only be used if\nthe public alias was deleted.\n\nThe VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
						exampleRequestBody: '{\n  "alias": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'o2uuElYt4Zm',
								path: 'type',
								type: 'object'
							},
							{
								key: 'HBe2o_6QfmI',
								path: 'alias',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'cIfWAS5EZa6',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '3zbzjs4BRkG',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'N845FHDl-HU',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'uiKdY4ui1Ou',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: '-x5-oZmuhmO',
								code: '<no code>',
								description: 'the view does not allow adding a public alias'
							},
							{
								key: 'pRGkH9hTLRP',
								code: '<no code>',
								description: 'Alias cannot be added'
							},
							{
								key: '8bt2Ek2r9fz',
								code: '<no code>',
								description: 'public alias added'
							}
						]
					}
				},
				{
					index: 57,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Add url to other bank account.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'A url which represents the counterparty (home page url etc.)',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
						exampleRequestBody: '{\n  "URL": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'z8X7GBqNyto',
								path: 'type',
								type: 'object'
							},
							{
								key: 'VKfQK2PLCE2',
								path: 'URL',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'Ds1Owfeqiw0',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'HDBKXpatHze',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '4JDRHuWbeZm',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'ujmsrzWr2Fp',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'iUM8IL-1H5l',
								code: '<no code>',
								description: 'the view does not allow adding a url'
							},
							{
								key: 'MKam4kJs3s8',
								code: '<no code>',
								description: 'URL cannot be added'
							},
							{
								key: 'afynJ05Cbx9',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 58,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Create Other Account Private Alias',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Creates a private alias for the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
						exampleRequestBody: '{\n  "alias": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'Z_2Ap3Rygnf',
								path: 'type',
								type: 'object'
							},
							{
								key: '4lIu6N2coqe',
								path: 'alias',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'VYz9mdQcGeI',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'ORMxuYGOzVQ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '9sdw5vMb_ka',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '5pAYrsW1RP5',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'gu2Ko3XEb85',
								code: '<no code>',
								description: 'the view does not allow adding a private alias'
							},
							{
								key: '04Kuw08igHV',
								code: '<no code>',
								description: 'Alias cannot be added'
							},
							{
								key: 'hTlM_mCqmUB',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 59,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete Counterparty Corporate Location.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete corporate location of other bank account. Delete the geolocation of the counterparty\'s registered address',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'rAzbis0n0R',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Du-sxrLvmu',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'lyQNwrBMce',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'IlDTamhjY7',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'Zz4Po0gfKM',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'sFiFdH0qi4',
								code: '<no code>',
								description: 'Corporate Location cannot be deleted'
							},
							{
								key: 'e_3SQZ3XP_',
								code: '<no code>',
								description: 'Delete not completed'
							},
							{
								key: 'JCxZpwrkYV',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 60,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete Counterparty Image URL',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete image url of other bank account.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'n8gShzFg7',
								path: 'type',
								type: 'object'
							},
							{
								key: '_1fKACzLk',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
							key: '6yBQq-gap',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 61,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete Counterparty Open Corporates URL',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete open corporate url of other bank account.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: '4efW_pkyacS',
								path: 'type',
								type: 'object'
							},
							{
								key: 'AERTa31t9gM',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'Uv8w8_6cfJ2',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'GCPOjpCBkNV',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'jko0_su3mOU',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'Z-YGEvs7w06',
								code: '<no code>',
								description: 'the view does not allow deleting an open corporate url'
							},
							{
								key: '4goQX2WmqDx',
								code: '<no code>',
								description: 'URL cannot be deleted'
							},
							{
								key: 'h6tHo2WwDmi',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 62,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete Counterparty Physical Location.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete physical location of other bank account.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'TqKsPxufTaj',
								path: 'type',
								type: 'object'
							},
							{
								key: '8k-GNSOdhh1',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'UPqo4nr3qY4',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'o1ylKNeBJdZ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'pi0yed0anT2',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'IA2Zb1bqGXX',
								code: '<no code>',
								description: 'Physical Location cannot be deleted'
							},
							{
								key: '9YrMZ_SQOxC',
								code: '<no code>',
								description: 'Delete not completed'
							},
							{
								key: '7KwvrZgjLeh',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 63,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete Counterparty Private Alias',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the private alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'Z75OZc8XGOG',
								path: 'type',
								type: 'object'
							},
							{
								key: 'f1kbEFCjDy9',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'byjgiRAydxO',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'dUoKUIk6vEB',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'hJ419AG4UOR',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'fRgzx0tPN32',
								code: '<no code>',
								description: 'the view does not allow deleting the private alias'
							},
							{
								key: 'OyCxRdiSNaY',
								code: '<no code>',
								description: 'Alias cannot be deleted'
							},
							{
								key: 'FX5WSFhulk_',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 64,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete Counterparty Public Alias',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the public alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'FRcOI8jx_wY',
								path: 'type',
								type: 'object'
							},
							{
								key: 'sTF3-FlwHwN',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'jA-qyiuFhMA',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'GgjKws-lKhU',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: '_-hwLt3HvdQ',
								code: '<no code>',
								description: 'the view does not allow deleting the public alias'
							},
							{
								key: 'An1RM3KLpwK',
								code: '<no code>',
								description: 'Alias cannot be deleted'
							},
							{
								key: 'Jm7_PMEutjN',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 65,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete more info of other bank account.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: '',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: '0R_f4Kp-Usv',
								path: 'type',
								type: 'object'
							},
							{
								key: 'XBCbrmXXO_2',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'tMn4GPZsoSX',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'VkyAD_l_6sC',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'M3wAsywmuLp',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'HzhF-XJOfiO',
								code: '<no code>',
								description: 'the view does not allow deleting more info'
							},
							{
								key: 'UXLUZtNeAmL',
								code: '<no code>',
								description: 'More Info cannot be deleted'
							},
							{
								key: '-BPUs6euMpl',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 66,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Delete url of other bank account.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: '',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'Jio8kSv_Zp0',
								path: 'type',
								type: 'object'
							},
							{
								key: 'b0Do6Ql1wYB',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '8HhrtNLBTYZ',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'gCQD3gmKFjo',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'FAW2US3TgFe',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'zPJGAPH4ZMo',
								code: '<no code>',
								description: 'the view does not allow deleting a url'
							},
							{
								key: '3xDlEPEBliy',
								code: '<no code>',
								description: 'URL cannot be deleted'
							},
							{
								key: 'JEzWNqZL_QC',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 67,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Get Other Account Metadata.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get metadata of one other account.\nReturns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.\n\nAuthentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata',
						exampleResponseBody: '{\n  "public_alias": "NONE",\n  "private_alias": "NONE",\n  "more_info": "www.openbankproject.com",\n  "URL": "www.openbankproject.com",\n  "image_URL": "www.openbankproject.com",\n  "open_corporates_URL": "www.openbankproject.com",\n  "corporate_location": {\n    "latitude": 1.231,\n    "longitude": 1.231,\n    "date": "2017-09-19T00:00:00Z",\n    "user": {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  },\n  "physical_location": {\n    "latitude": 1.231,\n    "longitude": 1.231,\n    "date": "2017-09-19T00:00:00Z",\n    "user": {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: '756xUHuuI04',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'u4fQj_1fwLJ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: '97GPdNUYZa2',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							}
						]
					}
				},
				{
					index: 68,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Get Other Account Private Alias',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the private alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
						exampleResponseBody: '{\n  "alias": "String"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'NxlIiuYnfOI',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'W2zxmiH1gO4',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'EPG0RlXJpsj',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'HFLSdQiftpJ',
								code: '<no code>',
								description: 'the view does not allow private alias access'
							},
							{
								key: '3xDPnuHNlVa',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 69,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Get public alias of other bank account.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the public alias of the other account OTHER_ACCOUNT_ID.\nAuthentication is Optional\nAuthentication is Mandatory if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
						exampleResponseBody: '{\n  "alias": "String"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'hSFs6njL2pO',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'sNEqGvfjPWj',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'P78DSbxfxR1',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'd2eCsGA5hju',
								code: '<no code>',
								description: 'the view does not allow public alias access'
							}
						]
					}
				},
				{
					index: 70,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update Counterparty Corporate Location',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the geolocation of the counterparty\'s registered address',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
						exampleRequestBody: '{\n  "corporate_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'ycYD1AUiDGi',
								path: 'type',
								type: 'object'
							},
							{
								key: 'ajMWTfTnNon',
								path: 'corporate_location',
								type: 'object'
							},
							{
								key: 'INvxufdBtWm',
								path: 'corporate_location->longitude',
								type: 'number'
							},
							{
								key: 'rD-95PTMpPg',
								path: 'corporate_location->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: 'muTFJweIQrU',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'MiKuexhK2UZ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'Fw2WmOpulq5',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'dVSf2jd0Osg',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'VYymodPLdOl',
								code: '<no code>',
								description: 'the view does not allow updating a corporate location'
							},
							{
								key: 'SPZ9SoWoXuS',
								code: '<no code>',
								description: 'Coordinates not possible'
							},
							{
								key: 'E_eoGcdniT-',
								code: '<no code>',
								description: 'Corporate Location cannot be updated'
							},
							{
								key: '-f3hdM6kJsY',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 71,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update Counterparty Image Url',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the url that points to the logo of the counterparty',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
						exampleRequestBody: '{\n  "image_URL": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: '7ER-W_gn_rG',
								path: 'type',
								type: 'object'
							},
							{
								key: 'giv8i9bm_hr',
								path: 'image_URL',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'RezeBZQDw9r',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'Gl-CJh1F-Ec',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'gkhC2tsnYyH',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'SQrSP9jyrEH',
								code: '<no code>',
								description: 'the view does not allow updating an image url'
							},
							{
								key: 'z9cR1oq7UDZ',
								code: '<no code>',
								description: 'URL cannot be updated'
							},
							{
								key: 'eP51xll68ZC',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 72,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update Counterparty More Info',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the more info description of the counter party from the perpestive of the account e.g. My dentist.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
						exampleRequestBody: '{\n  "more_info": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'khn6vIpw6-7',
								path: 'type',
								type: 'object'
							},
							{
								key: 'xKZ7RAyDz6M',
								path: 'more_info',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'aT_pFza7F4D',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'mWueM4HsQxP',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'KpxuDnmJ2YY',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'D20z6IyfLGB',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'cSywqLGVYNk',
								code: '<no code>',
								description: 'the view does not allow updating more info'
							},
							{
								key: 'tQx1X49Eixx',
								code: '<no code>',
								description: 'More Info cannot be updated'
							},
							{
								key: 'AHi_VBtilhz',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 73,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update Counterparty Physical Location',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update geocoordinates of the counterparty\'s main location',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
						exampleRequestBody: '{\n  "physical_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'u0QBuJxtukY',
								path: 'type',
								type: 'object'
							},
							{
								key: 'eQJRfYHUuji',
								path: 'physical_location',
								type: 'object'
							},
							{
								key: 'SO-lTn3GKoN',
								path: 'physical_location->longitude',
								type: 'number'
							},
							{
								key: 'ryfxvH1BYF5',
								path: 'physical_location->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: 'wzzbRa4qz2_',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Ew9I33lsPCf',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'p8Kfu9IADaH',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'anJiOkDQldU',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'NlXqY52aFOL',
								code: '<no code>',
								description: 'the view does not allow updating a physical location'
							},
							{
								key: 'DUA8hbZkwyq',
								code: '<no code>',
								description: 'Coordinates not possible'
							},
							{
								key: 'wUvRiCceHNM',
								code: '<no code>',
								description: 'Physical Location cannot be updated'
							},
							{
								key: '8CzysQisDGM',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 74,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update Counterparty Private Alias',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
						exampleRequestBody: '{\n  "alias": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'UsKrYrSeB1',
								path: 'type',
								type: 'object'
							},
							{
								key: '_zvyEfn47F',
								path: 'alias',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'ZiJlQh9Ok9',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '5YTITW2pz2',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'dddxEtMeUE',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '324joUgSPz',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'CanwCNpJRY',
								code: '<no code>',
								description: 'the view does not allow updating the private alias'
							},
							{
								key: 'eC5ZaCyuzl',
								code: '<no code>',
								description: 'Alias cannot be updated'
							},
							{
								key: '876NbtGTrG',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 75,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update Open Corporates Url of Counterparty',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update open corporate url of other bank account.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
						exampleRequestBody: '{\n  "open_corporates_URL": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'faYS8vTN8sg',
								path: 'type',
								type: 'object'
							},
							{
								key: 'po_zCpGAIVD',
								path: 'open_corporates_URL',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'W670sziA12E',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'TvSqYp3f2F8',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '5tAVqnt1qb9',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '6_DiC-0JEAe',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'PT3LENW1_pk',
								code: '<no code>',
								description: 'the view does not allow updating an open corporate url'
							},
							{
								key: 'rc6hProEAfG',
								code: '<no code>',
								description: 'URL cannot be updated'
							},
							{
								key: 'Dih57wEW4Qu',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 76,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update public alias of other bank account.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
						exampleRequestBody: '{\n  "alias": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'wKD0TxtHlc',
								path: 'type',
								type: 'object'
							},
							{
								key: '5CmAAQgGT8',
								path: 'alias',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'BZSNBH5vkE',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'n6SrXNNHGD',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'EIBF9HvnpX',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'HX1hMEoApA',
								code: '<no code>',
								description: 'the view does not allow metadata access'
							},
							{
								key: 'hxyXd-VCC1',
								code: '<no code>',
								description: 'the view does not allow updating the public alias'
							},
							{
								key: '8Y67-6hyeJ',
								code: '<no code>',
								description: 'Alias cannot be updated'
							},
							{
								key: 'a9YGFJR2Tn',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 77,
					section: {
						tag: 'Counterparty Metadata',
						title: 'Update url of other bank account.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'A url which represents the counterparty (home page url etc.)',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
						exampleRequestBody: '{\n  "URL": "String"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'AQ5A7suSajo',
								path: 'type',
								type: 'object'
							},
							{
								key: 'HtVQUXLckkS',
								path: 'URL',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'rWcx6INh9zK',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'i6ppQyQyoJM',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'psh_R3lFqoY',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '_AXu_U3fCQ6',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: '4_Jmel5EZcE',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'zCH2Rv2jFTj',
								code: '<no code>',
								description: 'URL cannot be updated'
							},
							{
								key: 'IwPB6gCdoI_',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Customer: [{
					index: 78,
					section: {
						tag: 'Customer',
						title: 'Add Address to Customer',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add an Address to the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/address',
						exampleRequestBody: '{\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK"\n}',
						exampleResponseBody: '{\n  "customer_address_id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK",\n  "insert_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: 'AOuSllRtxl',
								path: 'type',
								type: 'object'
							},
							{
								key: 'wpDyL6riwj',
								path: 'city',
								type: 'string'
							},
							{
								key: 'oDX4x77B-5',
								path: 'tags',
								type: 'array'
							},
							{
								key: 'NaTUHKKLSY',
								path: 'tags->items',
								type: 'string'
							},
							{
								key: 'Fc02l-nZvw',
								path: 'postcode',
								type: 'string'
							},
							{
								key: 'lEIOTJ3h_d',
								path: 'line_1',
								type: 'string'
							},
							{
								key: '10-TvmcbiM',
								path: 'line_2',
								type: 'string'
							},
							{
								key: 'RavcsMb8J1',
								path: 'line_3',
								type: 'string'
							},
							{
								key: 'Ja7eACbHJw',
								path: 'state',
								type: 'string'
							},
							{
								key: 'aUwUQVAiIs',
								path: 'status',
								type: 'string'
							},
							{
								key: 'VtjxG9iNVu',
								path: 'country_code',
								type: 'string'
							},
							{
								key: 'NQ5uC0tOwX',
								path: 'county',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'UxsapZWFb9',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'a_USWqid1_',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'AngE1IrnoE',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'zoJmsHeseL',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 79,
					section: {
						tag: 'Customer',
						title: 'Add Social Media Handle',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add a social media handle for the customer specified by CUSTOMER_ID.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles',
						exampleRequestBody: '{\n  "customer_number": "5987953",\n  "type": "PlaceholderString",\n  "handle": "PlaceholderString",\n  "date_added": "2017-09-19T00:00:00Z",\n  "date_activated": "2017-09-19T00:00:00Z"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'kVJ0ba-Bid',
								path: 'type',
								type: 'object'
							},
							{
								key: 'WC6lzX12H-',
								path: 'type',
								type: 'string'
							},
							{
								key: 'lWfj_rD7Hn',
								path: 'customer_number',
								type: 'string'
							},
							{
								key: 'eZMq_TvFS3',
								path: 'date_activated',
								type: 'string'
							},
							{
								key: 'Tak4rGmn2k',
								path: 'date_activated->format',
								type: 'date-time'
							},
							{
								key: 'eYTD9i5-IJ',
								path: 'handle',
								type: 'string'
							},
							{
								key: 'Q4eoBwHrJr',
								path: 'date_added',
								type: 'string'
							},
							{
								key: 'UeLAivEOJk',
								path: 'date_added->format',
								type: 'date-time'
							}
						],
						possibleErrors: [{
								key: 'JvvLcEZBnW',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'SPNEQsDfD1',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'FD5iEC9Jk8',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'OiEoFpIcuo',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'U-lIhBwJKe',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'eHlhG9gVRR',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 80,
					section: {
						tag: 'Customer',
						title: 'Add Tax Residence to Customer',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Add a Tax Residence to the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residence',
						exampleRequestBody: '{\n  "domain": "Enter some domain",\n  "tax_number": "Enter some number"\n}',
						exampleResponseBody: '{\n  "domain": "Enter some domain",\n  "tax_number": "Enter some number",\n  "tax_residence_id": "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n}',
						typedBody: [{
								key: '_XJrBTFiMvt',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Hn4IG9bZLy3',
								path: 'tax_number',
								type: 'string'
							},
							{
								key: '7U0nfTw0E41',
								path: 'domain',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'FOkYYod8tkW',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'aI2J3L3FRPh',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'Q6vj7LvbS-P',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'dMAo2O3k58D',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 81,
					section: {
						tag: 'Customer',
						title: 'Create Credit Limit Order Request',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '**NOTE: This endpoint currently only returns example data.**\n\n      \nCreate credit limit order request\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests',
						exampleRequestBody: '{\n  "requested_current_rate_amount1": "String",\n  "requested_current_rate_amount2": "String",\n  "requested_current_valid_end_date": "String",\n  "current_credit_documentation": "String",\n  "temporary_requested_current_amount": "String",\n  "requested_temporary_valid_end_date": "String",\n  "temporary_credit_documentation": "String"\n}',
						exampleResponseBody: '{\n  "execution_time": "String",\n  "execution_date": "String",\n  "token": "String",\n  "short_reference": "String"\n}',
						typedBody: [{
								key: '48c5lrASD0r',
								path: 'type',
								type: 'object'
							},
							{
								key: 'qPqrW5xX0O7',
								path: 'requested_temporary_valid_end_date',
								type: 'string'
							},
							{
								key: 'hywbvrPwEdu',
								path: 'requested_temporary_valid_end_date->format',
								type: 'date-time'
							},
							{
								key: 'fmgjLna65ua',
								path: 'current_credit_documentation',
								type: 'string'
							},
							{
								key: '4myZNAELrz3',
								path: 'temporary_requested_current_amount',
								type: 'string'
							},
							{
								key: 'z_jkLU35YL_',
								path: 'requested_current_valid_end_date',
								type: 'string'
							},
							{
								key: 'QGzTA6-egr_',
								path: 'requested_current_valid_end_date->format',
								type: 'date-time'
							},
							{
								key: 'k5hQ8mgp3oi',
								path: 'requested_current_rate_amount1',
								type: 'string'
							},
							{
								key: 'b-7M4bN40hw',
								path: 'requested_current_rate_amount2',
								type: 'string'
							},
							{
								key: 'fRdijazKBZB',
								path: 'temporary_credit_documentation',
								type: 'string'
							}
						],
						possibleErrors: [{
							key: 'Om1tL87WOOM',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 82,
					section: {
						tag: 'Customer',
						title: 'Create Customer.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\nThe Customer resource stores the customer number, legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.\nDates need to be in the format 2013-01-21T23:08:00Z\n\nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers',
						exampleRequestBody: '{\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'NjyfZqD69br',
								path: 'type',
								type: 'object'
							},
							{
								key: 'YOkGrO1z9rH',
								path: 'nameSuffix',
								type: 'string'
							},
							{
								key: 'rqFET0p7eXg',
								path: 'email',
								type: 'string'
							},
							{
								key: 'pw1upzQkBy1',
								path: 'employment_status',
								type: 'string'
							},
							{
								key: 'WJAXf-RGZ5I',
								path: 'last_ok_date',
								type: 'string'
							},
							{
								key: '1iOp0_DlYzP',
								path: 'last_ok_date->format',
								type: 'date-time'
							},
							{
								key: 'q-_hhdaMTEf',
								path: 'relationship_status',
								type: 'string'
							},
							{
								key: 'Tqi84p47IO0',
								path: 'date_of_birth',
								type: 'string'
							},
							{
								key: '4T2b_1-Kr1E',
								path: 'date_of_birth->format',
								type: 'date-time'
							},
							{
								key: 'Rq-4PCFe8jB',
								path: 'dob_of_dependants',
								type: 'array'
							},
							{
								key: 'k9nvqFYUOzA',
								path: 'dob_of_dependants->items',
								type: 'string'
							},
							{
								key: '9wFwCKQLY6V',
								path: 'dob_of_dependants->items->format',
								type: 'date-time'
							},
							{
								key: '6Tpmn5Ft-MI',
								path: 'highest_education_attained',
								type: 'string'
							},
							{
								key: 'wt8Dtr0gldS',
								path: 'credit_limit',
								type: 'object'
							},
							{
								key: 'Oul0I-KovkP',
								path: 'credit_limit->amount',
								type: 'string'
							},
							{
								key: 'id7DtO55iCZ',
								path: 'credit_limit->currency',
								type: 'string'
							},
							{
								key: 'I15aOX5j6pW',
								path: 'branchId',
								type: 'string'
							},
							{
								key: 'ojJFyO2MfTl',
								path: 'face_image',
								type: 'object'
							},
							{
								key: '7dSR8zmAiep',
								path: 'face_image->date',
								type: 'string'
							},
							{
								key: '5_yzJHklFK2',
								path: 'face_image->date->format',
								type: 'date-time'
							},
							{
								key: 'z0QUUedMNyu',
								path: 'face_image->url',
								type: 'string'
							},
							{
								key: 'gG_osvL2H2x',
								path: 'dependants',
								type: 'integer'
							},
							{
								key: 'juCTqi_Q3p1',
								path: 'legal_name',
								type: 'string'
							},
							{
								key: '3hCg8d8LGXe',
								path: 'title',
								type: 'string'
							},
							{
								key: 'InSsBzf7hE0',
								path: 'mobile_phone_number',
								type: 'string'
							},
							{
								key: 'cjj9flKjibn',
								path: 'kyc_status',
								type: 'boolean'
							},
							{
								key: 't-DGd3Lie9y',
								path: 'credit_rating',
								type: 'object'
							},
							{
								key: 'iZAQgA6J03P',
								path: 'credit_rating->source',
								type: 'string'
							},
							{
								key: 'LSfGVz5wIvZ',
								path: 'credit_rating->rating',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'zMMyqoKXK12',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '50kQ0aFBRJT',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'e5ZdXSkk2h-',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '20tuSg_7iEj',
								code: 'OBP-30006',
								description: 'Customer Number already exists. Please specify a different value for BANK_ID or CUSTOMER_NUMBER.'
							},
							{
								key: 'GpNbts7Novx',
								code: 'OBP-20005',
								description: 'User not found. Please specify a valid value for USER_ID.'
							},
							{
								key: 'XHrqyB1pZV2',
								code: 'OBP-30007',
								description: 'The User is already linked to a Customer at the bank specified by BANK_ID'
							},
							{
								key: 'QH_ph7cC7a0',
								code: 'OBP-30024',
								description: 'Could not create Consumer '
							},
							{
								key: '8yWIshvBa6y',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 83,
					section: {
						tag: 'Customer',
						title: 'Create User Customer Link.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Link a User to a Customer\n\nAuthentication is Mandatory\n\nCanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/user_customer_links',
						exampleRequestBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
						exampleResponseBody: '{\n  "user_customer_link_id": "String",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "date_inserted": "2017-09-19T00:00:00Z",\n  "is_active": true\n}',
						typedBody: [{
								key: 'B3nJxo33qR1',
								path: 'type',
								type: 'object'
							},
							{
								key: 'BeyqouShFfD',
								path: 'customer_id',
								type: 'string'
							},
							{
								key: 'yEWII4PHCj7',
								path: 'user_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'RF4MyziJFDz',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'X9zjFja5qLN',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'RWmeFRykhPd',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'w1tAjfijnuR',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'GNgp1I5KMl5',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'S6RnmYNx-YL',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'KY83ETxVpOu',
								code: 'OBP-30007',
								description: 'The User is already linked to a Customer at the bank specified by BANK_ID'
							},
							{
								key: '2nSwowpWTTm',
								code: 'OBP-30025',
								description: 'Could not create user_customer_links '
							},
							{
								key: 'slA8nLdw-04',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 84,
					section: {
						tag: 'Customer',
						title: 'Delete Customer Address',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'NLOjykUkNZV',
								path: 'type',
								type: 'object'
							},
							{
								key: 'R_F8dsAmv6w',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'dIVSxdpd62G',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'VzaM0gNVbVU',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'JsYRAb2Ojpn',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 85,
					section: {
						tag: 'Customer',
						title: 'Delete Tax Residence',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax_residencies/TAX_RESIDENCE_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'Anr4jUxO_C',
								path: 'type',
								type: 'object'
							},
							{
								key: 'RvJo4QkkeJ',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'O-PGJEEhQX',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 've3sobrmYC',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'wdKhm1Dlmx',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 86,
					section: {
						tag: 'Customer',
						title: 'Get Credit Limit Order Request By Request Id',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '**NOTE: This endpoint currently only returns example data.**\n\n      \n        Get Credit Limit Order Request By Request Id\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests/REQUEST_ID',
						exampleResponseBody: '{\n  "rank_amount_1": "String",\n  "nominal_interest_1": "String",\n  "rank_amount_2": "String",\n  "nominal_interest_2": "String"\n}',
						typedBody: [],
						possibleErrors: [{
							key: 'voXie4x49wU',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 87,
					section: {
						tag: 'Customer',
						title: 'Get Credit Limit Order Requests ',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '**NOTE: This endpoint currently only returns example data.**\n\n      \nGet Credit Limit Order Requests \n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests',
						exampleResponseBody: '{\n  "rank_amount_1": "String",\n  "nominal_interest_1": "String",\n  "rank_amount_2": "String",\n  "nominal_interest_2": "String"\n}',
						typedBody: [],
						possibleErrors: [{
							key: '7VP-q3JlNW',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 88,
					section: {
						tag: 'Customer',
						title: 'Get CRM Events',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/crm-events',
						exampleResponseBody: '{\n  "crm_events": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "bank_id": "GENODEM1GLS",\n      "customer_name": "String",\n      "customer_number": "5987953",\n      "category": "String",\n      "detail": "String",\n      "channel": "String",\n      "scheduled_date": "2017-09-19T00:00:00Z",\n      "actual_date": "2017-09-19T00:00:00Z",\n      "result": "String"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'Ez13PXgIKa',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'kIhguiJiwm',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '0s4IStXtYq',
								code: '<no code>',
								description: 'No CRM Events available.'
							},
							{
								key: '2kZ9c6vsBQ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 89,
					section: {
						tag: 'Customer',
						title: 'Get Customer Addresses',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the Addresses of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses',
						exampleResponseBody: '{\n  "addresses": [\n    {\n      "customer_address_id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "line_1": "No 1 the Road",\n      "line_2": "The Place",\n      "line_3": "The Hill",\n      "city": "Berlin",\n      "county": "",\n      "state": "Brandenburg",\n      "postcode": "13359",\n      "country_code": "DE",\n      "tags": [\n        "mailing",\n        "home"\n      ],\n      "status": "OK",\n      "insert_date": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'nBwTY6tdwy',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '-IhR0dM3ZJ',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '5EQGiGAsZ9',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 90,
					section: {
						tag: 'Customer',
						title: 'Get Customer by CUSTOMER_ID',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Gets the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'CGKZhOQOam4',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'M6db4pUXu17',
								code: 'OBP-30008',
								description: 'User Customer Link not found by USER_ID'
							},
							{
								key: 'keH3OnKK6q4',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 91,
					section: {
						tag: 'Customer',
						title: 'Get Customer by CUSTOMER_NUMBER',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Gets the Customer specified by CUSTOMER_NUMBER.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/customer-number',
						exampleRequestBody: '{\n  "customer_number": "5987953"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'pXHb729diS',
								path: 'type',
								type: 'object'
							},
							{
								key: 'lhI1cFqTtY',
								path: 'customer_number',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'qdnGKRpoUF',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'BI918IC9E2',
								code: 'OBP-30008',
								description: 'User Customer Link not found by USER_ID'
							},
							{
								key: 'rsTORf3mbL',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 92,
					section: {
						tag: 'Customer',
						title: 'Get Customer Social Media Handles',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get social media handles for a customer specified by CUSTOMER_ID.\n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles',
						exampleResponseBody: '{\n  "checks": [\n    {\n      "customer_number": "5987953",\n      "type": "PlaceholderString",\n      "handle": "PlaceholderString",\n      "date_added": "2017-09-19T00:00:00Z",\n      "date_activated": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '507kJVAyKbt',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Ljsb86YfGEM',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '2JsvngnFMUf',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'TgbyXo7Cdn8',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 93,
					section: {
						tag: 'Customer',
						title: 'Get Customers for Current User',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Gets all Customers that are linked to a User.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/current/customers',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "19900101",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "19900101"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'RwFImmQRyEy',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'i8Zge_rOTmJ',
								code: 'OBP-30008',
								description: 'User Customer Link not found by USER_ID'
							},
							{
								key: 'C6VSrf2kniJ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 94,
					section: {
						tag: 'Customer',
						title: 'Get Customers for current User at Bank',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Retuns a list of Customers at the Bank that are linked to the currently authenticated User.\n\n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'fqBvxJbm7zA',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'C6ZsSnCR1WU',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'qZ1Cc8JrnyN',
								code: 'OBP-30008',
								description: 'User Customer Link not found by USER_ID'
							},
							{
								key: 'kthk3T2Y6hZ',
								code: 'OBP-30008',
								description: 'User Customer Link not found by USER_ID'
							},
							{
								key: 'NBbDdLhRPRa',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: '3qBuCsY8Kcp',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 95,
					section: {
						tag: 'Customer',
						title: 'Get Tax Residences of Customer',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the Tax Residences of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residences',
						exampleResponseBody: '{\n  "tax_residence": [\n    {\n      "domain": "Enter some domain",\n      "tax_number": "Enter some number",\n      "tax_residence_id": "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'HHdiP-NwKX',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'ZibZfFTcRG',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'mktDe2Btd3',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 96,
					section: {
						tag: 'Customer',
						title: 'Update the Address of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID',
						exampleRequestBody: '{\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK"\n}',
						exampleResponseBody: '{\n  "customer_address_id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK",\n  "insert_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: '9B2EvYRO6bu',
								path: 'type',
								type: 'object'
							},
							{
								key: 'veWPSpLE_RX',
								path: 'city',
								type: 'string'
							},
							{
								key: 'v08d-t4YCga',
								path: 'tags',
								type: 'array'
							},
							{
								key: 'CPO8-w9o2ME',
								path: 'tags->items',
								type: 'string'
							},
							{
								key: 'fuiL5kM3i6x',
								path: 'postcode',
								type: 'string'
							},
							{
								key: 'LcentR0Xcge',
								path: 'line_1',
								type: 'string'
							},
							{
								key: '9dI6hIahs-1',
								path: 'line_2',
								type: 'string'
							},
							{
								key: 'IYLbUkrSM0s',
								path: 'line_3',
								type: 'string'
							},
							{
								key: 'SpMqS72xXdU',
								path: 'state',
								type: 'string'
							},
							{
								key: 'Qj1CnpawBl-',
								path: 'status',
								type: 'string'
							},
							{
								key: 'YsFTijgNMv2',
								path: 'country_code',
								type: 'string'
							},
							{
								key: '1WyCM9RaWEV',
								path: 'county',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'hOHgah9ZdgQ',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '_QSqWyAllA1',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '_SU6FqbkQMk',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '5mUvTdJ3bYu',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 97,
					section: {
						tag: 'Customer',
						title: 'Update the Branch of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the Branch of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/branch',
						exampleRequestBody: '{\n  "branch_id": "123"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'drI5Lv0lAwd',
								path: 'type',
								type: 'object'
							},
							{
								key: 'KeyDDujdHGA',
								path: 'branch_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '7yTPHYM44Ka',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'FnKL2L1Avl5',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'gvpteuuePAq',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'Stdz662Fw61',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 98,
					section: {
						tag: 'Customer',
						title: 'Update the credit limit of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the credit limit of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-limit',
						exampleRequestBody: '{\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "1000"\n  }\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: '9ws6ncE9b76',
								path: 'type',
								type: 'object'
							},
							{
								key: 'KrZTvCtMFaK',
								path: 'credit_limit',
								type: 'object'
							},
							{
								key: 'vj53eeCA-8X',
								path: 'credit_limit->amount',
								type: 'string'
							},
							{
								key: 'OE3V3Ca9IuC',
								path: 'credit_limit->currency',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'jfF3-zddTVP',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '7XKHEABOBL4',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'xzCRKMJWJIA',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'JOc1LZBDFkd',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 99,
					section: {
						tag: 'Customer',
						title: 'Update the credit rating and source of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the credit rating and source of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-rating-and-source',
						exampleRequestBody: '{\n  "credit_rating": "Good",\n  "credit_source": "Bank"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'NP-S8kFxf-X',
								path: 'type',
								type: 'object'
							},
							{
								key: '00iA4Anv7Vn',
								path: 'credit_source',
								type: 'string'
							},
							{
								key: 'CztdNmf-6x2',
								path: 'credit_rating',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'iZagLdpeL9z',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'NhD3YPahHz-',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'A9W8N1kC0ew',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'ch_TR_EK1Oh',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 100,
					section: {
						tag: 'Customer',
						title: 'Update the email of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update an email of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/email',
						exampleRequestBody: '{\n  "email": "marko@tesobe.com"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'OBScO3XFuEi',
								path: 'type',
								type: 'object'
							},
							{
								key: 'foheV2pkmi_',
								path: 'email',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'FZCpVvoKy9-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '6cB2LTHAgf1',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'cGUaMsAUX-W',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'OT_xyALJy7k',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 101,
					section: {
						tag: 'Customer',
						title: 'Update the identity data of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the identity data of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/identity',
						exampleRequestBody: '{\n  "legal_name": "Eveline Tripman",\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "name_suffix": "Sr"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'xOC5YL4Y3ku',
								path: 'type',
								type: 'object'
							},
							{
								key: '6LpJOxxuJJp',
								path: 'name_suffix',
								type: 'string'
							},
							{
								key: 'kiv6KdmrHnO',
								path: 'title',
								type: 'string'
							},
							{
								key: 'zU_KoM06RyR',
								path: 'date_of_birth',
								type: 'string'
							},
							{
								key: 'Tmqr0trOV62',
								path: 'date_of_birth->format',
								type: 'date-time'
							},
							{
								key: '5yZHbuesDz9',
								path: 'legal_name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'lMCNJqtoZ8S',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '1WvCwMxDrgq',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '_amhlKng3YB',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'mNsvHDxxECi',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 102,
					section: {
						tag: 'Customer',
						title: 'Update the mobile number of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the mobile number of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/mobile-number',
						exampleRequestBody: '{\n  "mobile_phone_number": "+381631954907"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'jjSm4BSBXRV',
								path: 'type',
								type: 'object'
							},
							{
								key: '1YSwq1ZQyng',
								path: 'mobile_phone_number',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'GVmG_GTAWxl',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '2TfndW_aAD1',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'Y1Q8ehL1Fa0',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'FdGZM2bb4KN',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 103,
					section: {
						tag: 'Customer',
						title: 'Update the number of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the number of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/number',
						exampleRequestBody: '{\n  "customer_number": "5987953"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'bFOGVCb7ehM',
								path: 'type',
								type: 'object'
							},
							{
								key: 'ufe6zU8z2tJ',
								path: 'customer_number',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'WrR9RVQXj_Q',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'hRZ4uZUNvN1',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'leYocR_vXzJ',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'GKI6NfJ0sDY',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 104,
					section: {
						tag: 'Customer',
						title: 'Update the other data of a Customer',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update the other data of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/data',
						exampleRequestBody: '{\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "relationship_status": "single",\n  "dependants": 10,\n  "highest_education_attained": "Master",\n  "employment_status": "worker"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
						typedBody: [{
								key: 'GO_Uv_05NL',
								path: 'type',
								type: 'object'
							},
							{
								key: 'D3KcSLyn_m',
								path: 'employment_status',
								type: 'string'
							},
							{
								key: 'GFeenho48d',
								path: 'relationship_status',
								type: 'string'
							},
							{
								key: '0RKm4pFwO5',
								path: 'highest_education_attained',
								type: 'string'
							},
							{
								key: '2L2nYR8SFD',
								path: 'face_image',
								type: 'object'
							},
							{
								key: 'Sc-SuQRUSh',
								path: 'face_image->date',
								type: 'string'
							},
							{
								key: 'Pbx5_15aFZ',
								path: 'face_image->date->format',
								type: 'date-time'
							},
							{
								key: 'lPIIriSv8J',
								path: 'face_image->url',
								type: 'string'
							},
							{
								key: 'WWyW2NdcTj',
								path: 'dependants',
								type: 'integer'
							}
						],
						possibleErrors: [{
								key: 'AZ-eBpEyHr',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Zt3wmiEWhH',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '4a3B77eOfK',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'eWUVgh1o7u',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			FX: [{
					index: 105,
					section: {
						tag: 'FX',
						title: 'Create Fx',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Create or Update Fx for the Bank.\n\nExample:\n\n“from_currency_code”:“EUR”,\n“to_currency_code”:“USD”,\n“conversion_value”: 1.136305,\n“inverse_conversion_value”: 1 / 1.136305 = 0.8800454103431737,\n\n Thus 1 Euro = 1.136305 US Dollar\n and\n 1 US Dollar = 0.8800 Euro\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx',
						exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "from_currency_code": "EUR",\n  "to_currency_code": "USD",\n  "conversion_value": 1.136305,\n  "inverse_conversion_value": 0.8800454103431737,\n  "effective_date": "2017-09-19T00:00:00Z"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "from_currency_code": "EUR",\n  "to_currency_code": "USD",\n  "conversion_value": 1.136305,\n  "inverse_conversion_value": 0.8800454103431737,\n  "effective_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: 'Hj653A8OObC',
								path: 'type',
								type: 'object'
							},
							{
								key: 'NkWVxr_o6gc',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: 'uxWBQxFedBO',
								path: 'conversion_value',
								type: 'number'
							},
							{
								key: 'YAyLRK9uepR',
								path: 'from_currency_code',
								type: 'string'
							},
							{
								key: 'sTRq2dPJPW7',
								path: 'effective_date',
								type: 'string'
							},
							{
								key: 'Xb8pV_Ccy8n',
								path: 'effective_date->format',
								type: 'date-time'
							},
							{
								key: 'DI6Vmp9G5Gq',
								path: 'inverse_conversion_value',
								type: 'number'
							},
							{
								key: 'UU92hxcxn-n',
								path: 'to_currency_code',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '8GKeTsvmtRI',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'ed5ofjsbaBl',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'tPSK_fJumQP',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'ElMZ-Zsdd_h',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 106,
					section: {
						tag: 'FX',
						title: 'Get Current FxRate',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the latest FX rate specified by BANK_ID, FROM_CURRENCY_CODE and TO_CURRENCY_CODE\n\nOBP may try different sources of FX rate information depending on the Connector in operation.\n\nFor example we want to convert EUR => USD:\n\nOBP will:\n1st try - Connector (database, core banking system or external FX service)\n2nd try part 1 - fallbackexchangerates/eur.json\n2nd try part 2 - fallbackexchangerates/usd.json (the inverse rate is used)\n3rd try - Hardcoded map of FX rates.\n\n![FX Flow](https://user-images.githubusercontent.com/485218/60005085-1eded600-966e-11e9-96fb-798b102d9ad0.png)\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx/FROM_CURRENCY_CODE/TO_CURRENCY_CODE',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "from_currency_code": "EUR",\n  "to_currency_code": "GBP",\n  "conversion_value": 1.001,\n  "inverse_conversion_value": 0.998,\n  "effective_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'olGlvrP938D',
								code: 'OBP-10003',
								description: 'Invalid Currency Value. It should be three letters ISO Currency Code. '
							},
							{
								key: 'uoklNvF5BKs',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'M_lgyTAtfVn',
								code: 'OBP-10004',
								description: 'ISO Currency code combination not supported for FX. Please modify the FROM_CURRENCY_CODE or TO_CURRENCY_CODE. '
							},
							{
								key: 'St8vt8QmROo',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			KYC: [{
					index: 107,
					section: {
						tag: 'KYC',
						title: 'Add KYC Check',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_check/KYC_CHECK_ID',
						exampleRequestBody: '{\n  "customer_number": "5987953",\n  "date": "2017-09-19T00:00:00Z",\n  "how": "online_meeting",\n  "staff_user_id": "67876",\n  "staff_name": "Simon",\n  "satisfied": true,\n  "comments": "String"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "id": "PlaceholderString",\n  "customer_number": "5987953",\n  "date": "2017-09-19T00:00:00Z",\n  "how": "PlaceholderString",\n  "staff_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "staff_name": "PlaceholderString",\n  "satisfied": true,\n  "comments": "PlaceholderString"\n}',
						typedBody: [{
								key: 'jZ6fBsOGev8',
								path: 'type',
								type: 'object'
							},
							{
								key: '8SEN7eevcuC',
								path: 'date',
								type: 'string'
							},
							{
								key: '9nyED36XfQH',
								path: 'date->format',
								type: 'date-time'
							},
							{
								key: 'o42UMG76bjl',
								path: 'customer_number',
								type: 'string'
							},
							{
								key: 'H6wA-vTKy_m',
								path: 'staff_user_id',
								type: 'string'
							},
							{
								key: 'RDrBz3xDxm6',
								path: 'staff_name',
								type: 'string'
							},
							{
								key: 'h9euMOOvoLK',
								path: 'comments',
								type: 'string'
							},
							{
								key: '1h_Vdnc9zld',
								path: 'how',
								type: 'string'
							},
							{
								key: 'QPl4XtDWopb',
								path: 'satisfied',
								type: 'boolean'
							}
						],
						possibleErrors: [{
								key: 'QpM4m3h8og-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'zsNzFiIuG7-',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'kL2LAgWrw8O',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'wlCjJ31PoFg',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'X-4XRmZrWU6',
								code: 'OBP-00004',
								description: 'Server error'
							},
							{
								key: '-Y7FB90yRfe',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 108,
					section: {
						tag: 'KYC',
						title: 'Add KYC Document.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc. ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_documents/KYC_DOCUMENT_ID',
						exampleRequestBody: '{\n  "customer_number": "5987953",\n  "type": "passport",\n  "number": "12345",\n  "issue_date": "2017-09-19T00:00:00Z",\n  "issue_place": "Berlin",\n  "expiry_date": "2017-09-19T00:00:00Z"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "id": "PlaceholderString",\n  "customer_number": "5987953",\n  "type": "PlaceholderString",\n  "number": "PlaceholderString",\n  "issue_date": "2017-09-19T00:00:00Z",\n  "issue_place": "PlaceholderString",\n  "expiry_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: '0ou4Dx6fD29',
								path: 'type',
								type: 'object'
							},
							{
								key: 'JWKnuJ0sbv9',
								path: 'issue_place',
								type: 'string'
							},
							{
								key: 'xy0kMU9dSCM',
								path: 'customer_number',
								type: 'string'
							},
							{
								key: 'GMTMRoBRqOE',
								path: 'expiry_date',
								type: 'string'
							},
							{
								key: 'qx5UVa6rUvh',
								path: 'expiry_date->format',
								type: 'date-time'
							},
							{
								key: 'A0xJtZ6iPbL',
								path: 'type',
								type: 'string'
							},
							{
								key: '9Fc5qzl6xei',
								path: 'number',
								type: 'string'
							},
							{
								key: 'EFNM5lBl4or',
								path: 'issue_date',
								type: 'string'
							},
							{
								key: 'xQ7z2ep2hkN',
								path: 'issue_date->format',
								type: 'date-time'
							}
						],
						possibleErrors: [{
								key: 'roB6LElzTwr',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'TYlIlpBDC2V',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '9pmjSR3ixvJ',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '4epK9RJ3WvZ',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'vjvUP9fzm9X',
								code: 'Server error',
								description: 'could not add KycDocument'
							},
							{
								key: 'pCfm9KId2oU',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 109,
					section: {
						tag: 'KYC',
						title: 'Add KYC Media.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_media/KYC_MEDIA_ID',
						exampleRequestBody: '{\n  "customer_number": "5987953",\n  "type": "image",\n  "url": "http://www.example.com/id-docs/123/image.png",\n  "date": "2017-09-19T00:00:00Z",\n  "relates_to_kyc_document_id": "123",\n  "relates_to_kyc_check_id": "123"\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "PlaceholderString",\n  "id": "PlaceholderString",\n  "customer_number": "5987953",\n  "type": "PlaceholderString",\n  "url": "PlaceholderString",\n  "date": "2017-09-19T00:00:00Z",\n  "relates_to_kyc_document_id": "PlaceholderString",\n  "relates_to_kyc_check_id": "PlaceholderString"\n}',
						typedBody: [{
								key: 'uZzFmSXNGKC',
								path: 'type',
								type: 'object'
							},
							{
								key: 'LKRlKTQO71a',
								path: 'date',
								type: 'string'
							},
							{
								key: 'mFn2qXhiZw0',
								path: 'date->format',
								type: 'date-time'
							},
							{
								key: 'VFnF1ICzR0s',
								path: 'url',
								type: 'string'
							},
							{
								key: '6l3haTsqf-W',
								path: 'customer_number',
								type: 'string'
							},
							{
								key: 'UoSGFejoKkF',
								path: 'relates_to_kyc_check_id',
								type: 'string'
							},
							{
								key: 'ip8aME8lb8w',
								path: 'relates_to_kyc_document_id',
								type: 'string'
							},
							{
								key: '3iQrGzvP0U6',
								path: 'type',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '-0QJ9tpz6rP',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'eSxIrjM2fg4',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'uG3EKTR_oL2',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'X18EMSPLdRa',
								code: 'OBP-00004',
								description: 'Server error'
							},
							{
								key: 'XR2z7ez-FrK',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 110,
					section: {
						tag: 'KYC',
						title: 'Add KYC Status',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_statuses',
						exampleRequestBody: '{\n  "customer_number": "5987953",\n  "ok": true,\n  "date": "2017-09-19T00:00:00Z"\n}',
						exampleResponseBody: '{\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "ok": true,\n  "date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: 'Labn99W1vF',
								path: 'type',
								type: 'object'
							},
							{
								key: '_QOQ4gh2TQ',
								path: 'date',
								type: 'string'
							},
							{
								key: 'tdyOiDQnvy',
								path: 'date->format',
								type: 'date-time'
							},
							{
								key: 'ZELqBeHGsX',
								path: 'ok',
								type: 'boolean'
							},
							{
								key: 'U8ZCac5YNb',
								path: 'customer_number',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'yoJAiU3A9U',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'KaJFnSb04s',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'rZltFA77FK',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'ZqDHQ-FG5i',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'NKV3UZ124n',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'GhaOdA99Zl',
								code: 'OBP-00004',
								description: 'Server error'
							},
							{
								key: 'Lfw3Gl3rni',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							}
						]
					}
				},
				{
					index: 111,
					section: {
						tag: 'KYC',
						title: 'Get Customer KYC Checks',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get KYC checks for the Customer specified by CUSTOMER_ID.\n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_checks',
						exampleResponseBody: '{\n  "checks": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "id": "PlaceholderString",\n      "customer_number": "5987953",\n      "date": "2017-09-19T00:00:00Z",\n      "how": "PlaceholderString",\n      "staff_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "staff_name": "PlaceholderString",\n      "satisfied": true,\n      "comments": "PlaceholderString"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'qz85n-7UvxW',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'ok3Wa8OXhMh',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'fX7pWAa5ewA',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 112,
					section: {
						tag: 'KYC',
						title: 'Get Customer KYC Documents',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID\nGet a list of documents that affirm the identity of the customer\nPassport, driving licence etc.\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_documents',
						exampleResponseBody: '{\n  "documents": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "id": "PlaceholderString",\n      "customer_number": "5987953",\n      "type": "PlaceholderString",\n      "number": "PlaceholderString",\n      "issue_date": "2017-09-19T00:00:00Z",\n      "issue_place": "PlaceholderString",\n      "expiry_date": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'nDzYZzWx9yq',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'gI2SPScPoZo',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: '7RPDU1Nh19b',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 113,
					section: {
						tag: 'KYC',
						title: 'Get Customer KYC statuses',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the KYC statuses for a customer specified by CUSTOMER_ID over time.\n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_statuses',
						exampleResponseBody: '{\n  "statuses": [\n    {\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "customer_number": "5987953",\n      "ok": true,\n      "date": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'EAeU5fzgdT2',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'zn2yyvoIIzL',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: '3AGuXc108EG',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 114,
					section: {
						tag: 'KYC',
						title: 'Get KYC Media for a customer',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get KYC media (scans, pictures, videos) that affirms the identity of the customer.\n\nAuthentication is Mandatory',
						specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_media',
						exampleResponseBody: '{\n  "medias": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "customer_id": "PlaceholderString",\n      "id": "PlaceholderString",\n      "customer_number": "5987953",\n      "type": "PlaceholderString",\n      "url": "PlaceholderString",\n      "date": "2017-09-19T00:00:00Z",\n      "relates_to_kyc_document_id": "PlaceholderString",\n      "relates_to_kyc_check_id": "PlaceholderString"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'pKzyg_thQsL',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'w5HTpsb0Ihr',
								code: 'OBP-30046',
								description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
							},
							{
								key: 'aatPF7EtThB',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Product: [{
					index: 115,
					section: {
						tag: 'Product',
						title: 'Create Product',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Create or Update Product for the Bank.\n\n\nTypical Super Family values / Asset classes are:\n\nDebt\nEquity\nFX\nCommodity\nDerivative\n\n\n\nProduct hiearchy vs Product Collections:\n\n* You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.\n\n* You can define a collection (also known as baskets or buckets) of products using Product Collections.\n\n      \n\n\nAuthentication is Mandatory\n\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE',
						exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "name": "product name",\n  "parent_product_code": "parent product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  }\n}',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "code": "product_code",\n  "parent_product_code": "parent",\n  "name": "product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "product_attributes": [\n    {\n      "product_code": "saving1",\n      "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
						typedBody: [{
								key: 'xYSkF1Ehcxq',
								path: 'type',
								type: 'object'
							},
							{
								key: 'IYa0bwJt16K',
								path: 'super_family',
								type: 'string'
							},
							{
								key: 'L_f740odCwS',
								path: 'bank_id',
								type: 'string'
							},
							{
								key: '_bjfoTN0wC2',
								path: 'description',
								type: 'string'
							},
							{
								key: 'PKf-wcuWDfG',
								path: 'details',
								type: 'string'
							},
							{
								key: 'nPxyZ6fJfFe',
								path: 'more_info_url',
								type: 'string'
							},
							{
								key: 'fZcTUpbjE2C',
								path: 'family',
								type: 'string'
							},
							{
								key: 'MTy_sylWtCb',
								path: 'parent_product_code',
								type: 'string'
							},
							{
								key: 'sz3JTqL_Y1G',
								path: 'meta',
								type: 'object'
							},
							{
								key: '_flSdPNVuCc',
								path: 'meta->license',
								type: 'object'
							},
							{
								key: 'R8U9Wu6vkJi',
								path: 'meta->license->name',
								type: 'string'
							},
							{
								key: 'UDxBOAKiQzl',
								path: 'meta->license->id',
								type: 'string'
							},
							{
								key: 'GJ1gfDNN8uS',
								path: 'name',
								type: 'string'
							},
							{
								key: '-voGQL3BEpM',
								path: 'category',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'nUyy-OxFJPp',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'OQtLyk2pqNz',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'SpIFZzXUWgc',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'hMbdhD8QRoy',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 116,
					section: {
						tag: 'Product',
						title: 'Create Product Attribute',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: ' Create Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nTypical product attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attribute',
						exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						exampleResponseBody: '{\n  "product_code": "saving1",\n  "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						typedBody: [{
								key: 'bsosdO7wZ8',
								path: 'type',
								type: 'object'
							},
							{
								key: 'lT90csScJh',
								path: 'value',
								type: 'string'
							},
							{
								key: '1sTy_t9u1Q',
								path: 'type',
								type: 'string'
							},
							{
								key: '9NxIV-hBxE',
								path: 'name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'yMM0IG-aWE',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'Smoh36OzlH',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 117,
					section: {
						tag: 'Product',
						title: 'Delete Product Attribute',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: ' Delete Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nDelete a Product Attribute by its id.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'Y9Arh9XmBMe',
								path: 'type',
								type: 'object'
							},
							{
								key: 'zc78YudqRuO',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '69kgRlqTWGi',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'gPSXGzipNGf',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 118,
					section: {
						tag: 'Product',
						title: 'Get Bank Product',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about a financial Product offered by the bank specified by BANK_ID and PRODUCT_CODE including:\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License the data under this endpoint is released under\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE',
						exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "code": "product_code",\n  "parent_product_code": "parent",\n  "name": "product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "product_attributes": [\n    {\n      "product_code": "saving1",\n      "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'AcYnW1QfZI',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'vDI-HoH9I6',
								code: 'OBP-30011',
								description: 'Product not found. Please specify a valid value for PRODUCT_CODE.'
							},
							{
								key: 'rlzsXmNeOz',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 119,
					section: {
						tag: 'Product',
						title: 'Get Product Attribute',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: ' Get Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nGet one product attribute by its id.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
						exampleResponseBody: '{\n  "product_code": "saving1",\n  "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'm0Dh6C220uu',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'AdiCyAqe1lw',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 120,
					section: {
						tag: 'Product',
						title: 'Get Product Tree',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about a particular financial product specified by BANK_ID and PRODUCT_CODE\nand it\'s parent product(s) recursively as specified by parent_product_code.\n\nEach product includes the following information.\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License: The licence under which this product data is released. Licence can be an Open Data licence such as Open Data Commons Public Domain Dedication and License (PDDL) or Copyright etc.\n\n\n\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-tree/PRODUCT_CODE',
						exampleResponseBody: '{\n  "bank_id": "testBank2",\n  "code": "PRODUCT_CODE",\n  "name": "product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "parent_product": {\n    "bank_id": "testBank2",\n    "code": "PARENT_CODE",\n    "name": "product name",\n    "category": "category",\n    "family": "family",\n    "super_family": "super family",\n    "more_info_url": "www.example.com/prod1/more-info.html",\n    "details": "Details",\n    "description": "Description",\n    "meta": {\n      "license": {\n        "id": "5",\n        "name": "TESOBE"\n      }\n    },\n    "parent_product": {\n      "bank_id": "testBank2",\n      "code": "GRANDPARENT_CODE",\n      "name": "product name",\n      "category": "category",\n      "family": "family",\n      "super_family": "super family",\n      "more_info_url": "www.example.com/prod1/more-info.html",\n      "details": "Details",\n      "description": "Description",\n      "meta": {\n        "license": {\n          "id": "5",\n          "name": "TESOBE"\n        }\n      }\n    }\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'bJGtnNJWBNj',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'qXCIowQlsFp',
								code: 'OBP-30011',
								description: 'Product not found. Please specify a valid value for PRODUCT_CODE.'
							},
							{
								key: 'znpeXUZ1WM0',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 121,
					section: {
						tag: 'Product',
						title: 'Get Products',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about the financial products offered by a bank specified by BANK_ID including:\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License the data under this endpoint is released under\nAuthentication is Optional',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products',
						exampleResponseBody: '{\n  "products": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "code": "product_code",\n      "parent_product_code": "parent",\n      "name": "product name",\n      "category": "category",\n      "family": "family",\n      "super_family": "super family",\n      "more_info_url": "www.example.com/prod1/more-info.html",\n      "details": "Details",\n      "description": "Description",\n      "meta": {\n        "license": {\n          "id": "5",\n          "name": "TESOBE"\n        }\n      },\n      "product_attributes": [\n        {\n          "product_code": "saving1",\n          "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n          "name": "OVERDRAFT_START_DATE",\n          "type": "DATE_WITH_DAY",\n          "value": "2012-04-23"\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'oUn1cQcsJ3z',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '18_tbiR4MKb',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'Mk0Rz8_90kA',
								code: 'OBP-30011',
								description: 'Product not found. Please specify a valid value for PRODUCT_CODE.'
							},
							{
								key: 'xBbT2nTj2lF',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 122,
					section: {
						tag: 'Product',
						title: 'Update Product Attribute',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: ' Update Product Attribute. \n\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nUpdate one Product Attribute by its id.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
						exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						exampleResponseBody: '{\n  "product_code": "saving1",\n  "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
						typedBody: [{
								key: 'ch8QOk8Yw2z',
								path: 'type',
								type: 'object'
							},
							{
								key: 'zKDUhvA7YlJ',
								path: 'value',
								type: 'string'
							},
							{
								key: 'PkCRVI9j6KX',
								path: 'type',
								type: 'string'
							},
							{
								key: 'r6T3-XaU8QP',
								path: 'name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'YIS81_WloIW',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'wNcmbUh9bV9',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			'Product Collection': [{
					index: 123,
					section: {
						tag: 'Product Collection',
						title: 'Create Product Collection',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Create or Update a Product Collection at the Bank.\n\nUse Product Collections to create Product "Baskets", "Portfolios", "Indices", "Collections", "Underlyings-lists", "Buckets" etc. etc.\n\nThere is a many to many relationship between Products and Product Collections:\n\n* A Product can exist in many Collections\n\n* A Collection can contain many Products.\n\nA collection has collection code, one parent Product and one or more child Products.\n\n\n\n\nProduct hiearchy vs Product Collections:\n\n* You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.\n\n* You can define a collection (also known as baskets or buckets) of products using Product Collections.\n\n      \n\nAuthentication is Mandatory\n\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE',
						exampleRequestBody: '{\n  "parent_product_code": "A",\n  "children_product_codes": [\n    "B",\n    "C",\n    "D"\n  ]\n}',
						exampleResponseBody: '{\n  "product_collection": [\n    {\n      "collection_code": "C",\n      "product_code": "D",\n      "items": [\n        {\n          "member_product_code": "A"\n        },\n        {\n          "member_product_code": "B"\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [{
								key: 'y_kUPBfvtUM',
								path: 'type',
								type: 'object'
							},
							{
								key: 'McW31s7sxMF',
								path: 'children_product_codes',
								type: 'array'
							},
							{
								key: '0EQ9JuHC9we',
								path: 'children_product_codes->items',
								type: 'string'
							},
							{
								key: '76iXl8wveTt',
								path: 'parent_product_code',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'OgZBf_pq0UA',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'X2MywbDyi-G',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'cbcj-gxWNQx',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'YGVB_WlbuxY',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 124,
					section: {
						tag: 'Product Collection',
						title: 'Get Product Collection',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns information about the financial Product Collection specified by BANK_ID and COLLECTION_CODE:\n\n          ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE',
						exampleResponseBody: '{\n  "collection_code": "A",\n  "products": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "code": "product_code",\n      "parent_product_code": "parent",\n      "name": "product name",\n      "category": "category",\n      "family": "family",\n      "super_family": "super family",\n      "more_info_url": "www.example.com/prod1/more-info.html",\n      "details": "Details",\n      "description": "Description",\n      "meta": {\n        "license": {\n          "id": "5",\n          "name": "TESOBE"\n        }\n      },\n      "product_attributes": [\n        {\n          "product_code": "saving1",\n          "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n          "name": "OVERDRAFT_START_DATE",\n          "type": "DATE_WITH_DAY",\n          "value": "2012-04-23"\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'kqLP8D5BY7H',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'UWeKzPfUn5P',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '4-x6m6Q41hJ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Role: [{
					index: 125,
					section: {
						tag: 'Role',
						title: 'Add Entitlement for a User.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create Entitlement. Grant Role to User.\n\nEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\n\nFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. "bank_id":""\n\nFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. "bank_id":"my-bank-id"\n\nAuthentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.',
						specificUrl: '/obp/v4.0.0/users/USER_ID/entitlements',
						exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "role_name": "String"\n}',
						exampleResponseBody: '{\n  "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n  "role_name": "CanQueryOtherUser",\n  "bank_id": "GENODEM1GLS"\n}',
						typedBody: [{
								key: 'LjX0NXhrp9I',
								path: 'type',
								type: 'object'
							},
							{
								key: '3J5mNxwpLHo',
								path: 'role_name',
								type: 'string'
							},
							{
								key: 'u57DiMGuKwz',
								path: 'bank_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'XOgkjcD8J53',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'ojTx_SpI55T',
								code: 'OBP-20005',
								description: 'User not found. Please specify a valid value for USER_ID.'
							},
							{
								key: 'g8eXnIa4QFg',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'RrIRMDNpzXJ',
								code: 'OBP-10007',
								description: 'Incorrect Role name'
							},
							{
								key: 'yIR9mY2m-A8',
								code: 'OBP-30205',
								description: 'This entitlement is a Bank Role. Please set bank_id to a valid bank id.'
							},
							{
								key: 'uItovD7eQAg',
								code: 'OBP-30206',
								description: 'This entitlement is a System Role. Please set bank_id to empty string.'
							},
							{
								key: 'SZoEySu62EA',
								code: 'OBP-30216',
								description: 'Entitlement already exists for the user.'
							},
							{
								key: '4GL6U2v7JWu',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 126,
					section: {
						tag: 'Role',
						title: 'Add Entitlement Request for current User.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create Entitlement Request.\n\nAny logged in User can use this endpoint to request an Entitlement\n\nEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\n\nFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. "bank_id":""\n\nFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. "bank_id":"my-bank-id"\n\n\n\nAuthentication is Mandatory\n\n        ',
						specificUrl: '/obp/v4.0.0/entitlement-requests',
						exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "role_name": "String"\n}',
						exampleResponseBody: '{\n  "entitlement_request_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith",\n    "entitlements": {\n      "list": [\n        {\n          "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n          "role_name": "CanQueryOtherUser",\n          "bank_id": "GENODEM1GLS"\n        }\n      ]\n    }\n  },\n  "role_name": "CanQueryOtherUser",\n  "bank_id": "GENODEM1GLS",\n  "created": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: 'tv93oo4Us3d',
								path: 'type',
								type: 'object'
							},
							{
								key: 'JB5xUUT81D7',
								path: 'role_name',
								type: 'string'
							},
							{
								key: 'yCYQmSmtYhd',
								path: 'bank_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '9XBlF4DuMe5',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'dbpSzg0Zbuo',
								code: 'OBP-20005',
								description: 'User not found. Please specify a valid value for USER_ID.'
							},
							{
								key: 'stMvuTiHGEf',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'gdZoWApptWz',
								code: 'OBP-10007',
								description: 'Incorrect Role name'
							},
							{
								key: 'xVIm0SpDwWs',
								code: 'OBP-30205',
								description: 'This entitlement is a Bank Role. Please set bank_id to a valid bank id.'
							},
							{
								key: 'Zuf0J3zpWVh',
								code: 'OBP-30206',
								description: 'This entitlement is a System Role. Please set bank_id to empty string.'
							},
							{
								key: 'hvKgZjJ_NaR',
								code: 'OBP-30214',
								description: 'Entitlement Request already exists for the user.'
							},
							{
								key: 'H43-tk63Jak',
								code: 'OBP-30217',
								description: 'Entitlement Request cannot be added.'
							},
							{
								key: 'XTZ-A8yfNMy',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 127,
					section: {
						tag: 'Role',
						title: 'Delete Entitlement',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID\n\nAuthentication is required and the user needs to be a Super Admin.\nSuper Admins are listed in the Props file.\n\n\n      ',
						specificUrl: '/obp/v4.0.0/users/USER_ID/entitlement/ENTITLEMENT_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'BpBPBgGd57M',
								path: 'type',
								type: 'object'
							},
							{
								key: 'w_spGeOx3pS',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'c8gfBBxzTK3',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'vlvKWlG0x4e',
								code: 'OBP-20050',
								description: 'Current User is not a Super Admin!'
							},
							{
								key: 'AT1Znr52X34',
								code: 'OBP-30212',
								description: 'EntitlementId not found'
							},
							{
								key: 'bHzIdcIxcQl',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 128,
					section: {
						tag: 'Role',
						title: 'Get all Entitlements',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\n\nLogin is required.\n\nPossible filter on the role field:\n\neg: /entitlements?role=CanGetCustomer\n\n\n\n      ',
						specificUrl: '/obp/v4.0.0/entitlements',
						exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '4pF_PJf8JQ-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Qog7yUBAASK',
								code: 'OBP-20050',
								description: 'Current User is not a Super Admin!'
							},
							{
								key: '2vlVt62I2kQ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 129,
					section: {
						tag: 'Role',
						title: 'Get Entitlement Requests for a User.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get Entitlement Requests for a User.\n\n\nAuthentication is Mandatory\n\n        ',
						specificUrl: '/obp/v4.0.0/users/USER_ID/entitlement-requests',
						exampleResponseBody: '{\n  "entitlement_requests": [\n    {\n      "entitlement_request_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "user": {\n        "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n        "email": "eveline@example.com",\n        "provider_id": "Chris",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith",\n        "entitlements": {\n          "list": [\n            {\n              "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n              "role_name": "CanQueryOtherUser",\n              "bank_id": "GENODEM1GLS"\n            }\n          ]\n        }\n      },\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS",\n      "created": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '5LHSL44TS6D',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'ax_7026eJP7',
								code: 'OBP-20050',
								description: 'Current User is not a Super Admin!'
							},
							{
								key: 'XUfs0RntAGa',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'TUhz825PZS9',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 130,
					section: {
						tag: 'Role',
						title: 'Get Entitlement Requests for the current User.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get Entitlement Requests for the current User.\n\n\nAuthentication is Mandatory\n\n        ',
						specificUrl: '/obp/v4.0.0/my/entitlement-requests',
						exampleResponseBody: '{\n  "entitlement_requests": [\n    {\n      "entitlement_request_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "user": {\n        "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n        "email": "eveline@example.com",\n        "provider_id": "Chris",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith",\n        "entitlements": {\n          "list": [\n            {\n              "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n              "role_name": "CanQueryOtherUser",\n              "bank_id": "GENODEM1GLS"\n            }\n          ]\n        }\n      },\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS",\n      "created": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'EGkBrkYKS18',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '9WVmNv1nnjp',
								code: 'OBP-20050',
								description: 'Current User is not a Super Admin!'
							},
							{
								key: 'fn9hWTHUOfN',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: '6lxPsCS7mk7',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 131,
					section: {
						tag: 'Role',
						title: 'Get Entitlements for the current User.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get Entitlements for the current User.\n\n\nAuthentication is Mandatory\n\n        ',
						specificUrl: '/obp/v4.0.0/my/entitlements',
						exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'ouo7a8k0uaS',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'uCkTHA0R1JQ',
								code: 'OBP-20050',
								description: 'Current User is not a Super Admin!'
							},
							{
								key: 'h_cYs4uDeOu',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'WFyxKGlyAL_',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 132,
					section: {
						tag: 'Role',
						title: 'Get Entitlements for User',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\n\nAuthentication is Mandatory\n\n\n      ',
						specificUrl: '/obp/v4.0.0/users/USER_ID/entitlements',
						exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'vJ94TyLDDI',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'e8PLPArOe-',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'Oz2BRTCFz4',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 133,
					section: {
						tag: 'Role',
						title: 'Get Entitlements for User at Bank.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\n\nGet Entitlements specified by BANK_ID and USER_ID\n\nAuthentication is Mandatory\n\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/USER_ID/entitlements',
						exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'B6cs6jaIJv9',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '7_Oa7NFDURV',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'h6Bb2C6LBk7',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 134,
					section: {
						tag: 'Role',
						title: 'Get Roles',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns all available roles\n\nAuthentication is Mandatory\n      ',
						specificUrl: '/obp/v4.0.0/roles',
						exampleResponseBody: '{\n  "roles": [\n    {\n      "role": "eBranch",\n      "requires_bank_id": true\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'nw-NtxMo1gt',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'tb3ojC4MjOi',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			'System View': [{
					index: 135,
					section: {
						tag: 'System View',
						title: 'Create System View.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create a system view\n\n Authentication is Mandatory and the user needs to have access to the owner view.\n The \'alias\' field in the JSON can take one of three values:\n\n * _public_: to use the public alias if there is one specified for the other account.\n * _private_: to use the public alias if there is one specified for the other account.\n\n * _\'\'(empty string)_: to use no alias; the view shows the real name of the other account.\n\n The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to `true` and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\n\n The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to `true` on the view creation, the rest will be set to `false`.\n ',
						specificUrl: '/obp/v4.0.0/system-views',
						exampleRequestBody: '{\n  "name": "_test",\n  "description": "This view is for family",\n  "metadata_view": "_test",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": false,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
						exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
						typedBody: [{
								key: 'O8tsyJNUMQ8',
								path: 'type',
								type: 'object'
							},
							{
								key: 'sQiuNjZRkXE',
								path: 'allowed_actions',
								type: 'array'
							},
							{
								key: 'c9RfAOPT5fB',
								path: 'allowed_actions->items',
								type: 'string'
							},
							{
								key: 'bwXP_5cLuH1',
								path: 'hide_metadata_if_alias_used',
								type: 'boolean'
							},
							{
								key: 'oG-YuBU2haU',
								path: 'name',
								type: 'string'
							},
							{
								key: 'mUUvMBsIJZR',
								path: 'description',
								type: 'string'
							},
							{
								key: 'c4T8peiqKhm',
								path: 'is_public',
								type: 'boolean'
							},
							{
								key: 'sCgM9cBwkEb',
								path: 'metadata_view',
								type: 'string'
							},
							{
								key: 'wAqlcOazlRN',
								path: 'which_alias_to_use',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'UoZerLV1Q8_',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'D-ET2C1olxP',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'MIdgm0Re61X',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 136,
					section: {
						tag: 'System View',
						title: 'Delete System View',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the system view specified by VIEW_ID.',
						specificUrl: '/obp/v4.0.0/system-views/VIEW_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'Lx7gIUJrYX',
								path: 'type',
								type: 'object'
							},
							{
								key: 'k4IHb6mNB1',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '-S6EWTldJK',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '2UfKr0mlUE',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '1paU-RuEYz',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'G9ILv0cpRq',
								code: '<no code>',
								description: 'user does not have owner access'
							}
						]
					}
				},
				{
					index: 137,
					section: {
						tag: 'System View',
						title: 'Get System View',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get System View\n\nAuthentication is Mandatory\n\n      ',
						specificUrl: '/obp/v4.0.0/system-views/VIEW_ID',
						exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'f6FHX7LR3Ig',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'U3b2Z9_PIfl',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '1iQCOTD6yR9',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 138,
					section: {
						tag: 'System View',
						title: 'Update System View.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update an existing view on a bank account\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nThe json sent is the same as during view creation (above), with one difference: the \'name\' field\nof a view is not editable (it is only set when a view is created)',
						specificUrl: '/obp/v4.0.0/system-views/VIEW_ID',
						exampleRequestBody: '{\n  "description": "this is for family",\n  "metadata_view": "owner",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": true,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
						exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
						typedBody: [{
								key: '1Zy54KrvF',
								path: 'type',
								type: 'object'
							},
							{
								key: 'vJf15_lNl',
								path: 'allowed_actions',
								type: 'array'
							},
							{
								key: '9BvUHbfqM',
								path: 'allowed_actions->items',
								type: 'string'
							},
							{
								key: 'islL4Uwhf',
								path: 'description',
								type: 'string'
							},
							{
								key: 'MRTSvjZId',
								path: 'hide_metadata_if_alias_used',
								type: 'boolean'
							},
							{
								key: 'ND6eZA0SC',
								path: 'metadata_view',
								type: 'string'
							},
							{
								key: 'NI2AOqVOM',
								path: 'is_public',
								type: 'boolean'
							},
							{
								key: 'XrHkzOzDb',
								path: 'which_alias_to_use',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'C90TM-AlZ',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'dW4zlsxar',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '1pXExWKrwQ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'WSeNw3APFG',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Transaction: [{
					index: 139,
					section: {
						tag: 'Transaction',
						title: 'Get Other Account of Transaction',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get other account of a transaction.\nReturns details of the other party involved in the transaction, moderated by the [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n          Authentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/other_account',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "holder": {\n    "name": "OBP",\n    "is_alias": true\n  },\n  "number": "123",\n  "kind": "3456",\n  "IBAN": "UK234DB",\n  "swift_bic": "UK12321DB",\n  "bank": {\n    "national_identifier": "OBP",\n    "name": "OBP"\n  },\n  "metadata": {\n    "public_alias": "NONE",\n    "private_alias": "NONE",\n    "more_info": "www.openbankproject.com",\n    "URL": "www.openbankproject.com",\n    "image_URL": "www.openbankproject.com",\n    "open_corporates_URL": "www.openbankproject.com",\n    "corporate_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    },\n    "physical_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'k04QhuMVKOq',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'N9OqjEmKyx8',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 140,
					section: {
						tag: 'Transaction',
						title: 'Get Transaction by Id.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and [moderated](#1_2_1-getViewsForBankAccount) by the view (VIEW_ID).\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/transaction',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "this_account": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "holders": [\n      {\n        "name": "OBP",\n        "is_alias": true\n      }\n    ],\n    "number": "123",\n    "kind": "AC",\n    "IBAN": "UK1234AD",\n    "swift_bic": "UK1234AD",\n    "bank": {\n      "national_identifier": "OBP",\n      "name": "OBP"\n    }\n  },\n  "other_account": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "holder": {\n      "name": "OBP",\n      "is_alias": true\n    },\n    "number": "123",\n    "kind": "3456",\n    "IBAN": "UK234DB",\n    "swift_bic": "UK12321DB",\n    "bank": {\n      "national_identifier": "OBP",\n      "name": "OBP"\n    },\n    "metadata": {\n      "public_alias": "NONE",\n      "private_alias": "NONE",\n      "more_info": "www.openbankproject.com",\n      "URL": "www.openbankproject.com",\n      "image_URL": "www.openbankproject.com",\n      "open_corporates_URL": "www.openbankproject.com",\n      "corporate_location": {\n        "latitude": 1.231,\n        "longitude": 1.231,\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      },\n      "physical_location": {\n        "latitude": 1.231,\n        "longitude": 1.231,\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    }\n  },\n  "details": {\n    "type": "AC",\n    "description": "this is for family",\n    "posted": "2017-09-19T00:00:00Z",\n    "completed": "2017-09-19T00:00:00Z",\n    "new_balance": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  },\n  "metadata": {\n    "narrative": "NONE",\n    "comments": [\n      {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "value": "OBP",\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    ],\n    "tags": [\n      {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "value": "OBP",\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    ],\n    "images": [\n      {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "label": "NONE",\n        "URL": "www.openbankproject.com",\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    ],\n    "where": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'wmfbY4GYU7',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'tHSQH35OPB',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'cBRV09IM8i',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'uB_cA-KBE-',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'ZnYNM1kp1W',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 141,
					section: {
						tag: 'Transaction',
						title: 'Get Transactions for Account (Core)',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns transactions list (Core info) of the account specified by ACCOUNT_ID.\n\nAuthentication is Mandatory\n\nPossible custom headers for pagination:\n\n* sort_direction=ASC/DESC ==> default value: DESC. The sort field is the completed date.\n* limit=NUMBER ==> default value: 50\n* offset=NUMBER ==> default value: 0\n* from_date=DATE => default value: 0000-00-00T00:00:00.000Z\n* to_date=DATE => default value: 3049-01-01T00:00:00.000Z\n\n**Date format parameter**: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==> time zone is UTC.',
						specificUrl: '/obp/v4.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/transactions',
						exampleResponseBody: '{\n  "transactions": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "this_account": {\n        "id": "String",\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ],\n        "holders": [\n          {\n            "name": "OBP",\n            "is_alias": true\n          }\n        ]\n      },\n      "other_account": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "holder": {\n          "name": "OBP",\n          "is_alias": true\n        },\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ]\n      },\n      "details": {\n        "type": "AC",\n        "description": "OBP",\n        "posted": "2017-09-19T00:00:00Z",\n        "completed": "2017-09-19T00:00:00Z",\n        "new_balance": {\n          "currency": "EUR",\n          "amount": "10"\n        },\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'bPqDXVYC-Gd',
								code: 'OBP-10023',
								description: 'obp_sort_direction parameter can only take two values'
							},
							{
								key: 'xw8Lo9S2fda',
								code: 'OBP-10024',
								description: 'wrong value for obp_offset parameter. Please send a positive integer (=>0)!'
							},
							{
								key: 'zRnXf_caQyP',
								code: 'OBP-10025',
								description: 'wrong value for obp_limit parameter. Please send a positive integer (=>1)!'
							},
							{
								key: 'b29eoPGSuTt',
								code: 'OBP-10026',
								description: 'Failed to parse date string. Please use this format yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'!'
							},
							{
								key: 'R_1yU7PuDx-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'iHtBSv5RRq9',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'QSfQzkJRXNX',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'kQqZMokmiZB',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 142,
					section: {
						tag: 'Transaction',
						title: 'Get Transactions for Account (Full)',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns transactions list of the account specified by ACCOUNT_ID and [moderated](#1_2_1-getViewsForBankAccount) by the view (VIEW_ID).\n\nAuthentication is Optional\n\nAuthentication is required if the view is not public.\n\nPossible custom headers for pagination:\n\n* sort_direction=ASC/DESC ==> default value: DESC. The sort field is the completed date.\n* limit=NUMBER ==> default value: 50\n* offset=NUMBER ==> default value: 0\n* from_date=DATE => default value: 0000-00-00T00:00:00.000Z\n* to_date=DATE => default value: 3049-01-01T00:00:00.000Z\n\n**Date format parameter**: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==> time zone is UTC.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions',
						exampleResponseBody: '{\n  "transactions": [\n    {\n      "id": "String",\n      "this_account": {\n        "id": "String",\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ],\n        "holders": [\n          {\n            "name": "OBP",\n            "is_alias": true\n          }\n        ]\n      },\n      "other_account": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "holder": {\n          "name": "OBP",\n          "is_alias": true\n        },\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ],\n        "metadata": {\n          "public_alias": "NONE",\n          "private_alias": "NONE",\n          "more_info": "www.openbankproject.com",\n          "URL": "www.openbankproject.com",\n          "image_URL": "www.openbankproject.com",\n          "open_corporates_URL": "www.openbankproject.com",\n          "corporate_location": {\n            "latitude": 1.231,\n            "longitude": 1.231,\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          },\n          "physical_location": {\n            "latitude": 1.231,\n            "longitude": 1.231,\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        }\n      },\n      "details": {\n        "type": "AC",\n        "description": "this is for family",\n        "posted": "2017-09-19T00:00:00Z",\n        "completed": "2017-09-19T00:00:00Z",\n        "new_balance": {\n          "currency": "EUR",\n          "amount": "10"\n        },\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      },\n      "metadata": {\n        "narrative": "NONE",\n        "comments": [\n          {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "value": "OBP",\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        ],\n        "tags": [\n          {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "value": "OBP",\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        ],\n        "images": [\n          {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "label": "NONE",\n            "URL": "www.openbankproject.com",\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        ],\n        "where": {\n          "latitude": 1.231,\n          "longitude": 1.231,\n          "date": "2017-09-19T00:00:00Z",\n          "user": {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "provider": "http://127.0.0.1:8080",\n            "display_name": "OBP"\n          }\n        }\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: '9T3vKhDdfp5',
								code: 'OBP-10023',
								description: 'obp_sort_direction parameter can only take two values'
							},
							{
								key: 'GvrZaMiO-A1',
								code: 'OBP-10024',
								description: 'wrong value for obp_offset parameter. Please send a positive integer (=>0)!'
							},
							{
								key: 'xkziOrqvVCR',
								code: 'OBP-10025',
								description: 'wrong value for obp_limit parameter. Please send a positive integer (=>1)!'
							},
							{
								key: 'XAnxX4PX7vY',
								code: 'OBP-10026',
								description: 'Failed to parse date string. Please use this format yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'!'
							},
							{
								key: 'HNY59cvn1gO',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'hxi8Ojz5GTQ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'mCWq5yMDVGx',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'Z1aq8B-w3FW',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			'Transaction Metadata': [{
					index: 143,
					section: {
						tag: 'Transaction Metadata',
						title: 'Add a tag.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Posts a tag about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\nAuthentication is Mandatory\n\nAuthentication is required as the tag is linked with the user.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags',
						exampleRequestBody: '{\n  "value": "String"\n}',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "value": "OBP",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
						typedBody: [{
								key: 'IrluXNKbQS-',
								path: 'type',
								type: 'object'
							},
							{
								key: '9uZxeuNCn-4',
								path: 'value',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'uLifq5uyiLE',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'T-nWhCZ56D9',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '941dMwvE9b_',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'fg31GMjBfMU',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'Ew01Z__Ru0v',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'duCz4Y5Cltj',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 144,
					section: {
						tag: 'Transaction Metadata',
						title: 'Add an image.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Posts an image about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\nAuthentication is Mandatory\n\nThe image is linked with the user.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images',
						exampleRequestBody: '{\n  "label": "String",\n  "URL": "String"\n}',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "label": "NONE",\n  "URL": "www.openbankproject.com",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
						typedBody: [{
								key: 'PadYcepbTah',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Z_7Z9KHV_HQ',
								path: 'URL',
								type: 'string'
							},
							{
								key: 'fihXa7QP84e',
								path: 'label',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'aJJR6Uakl68',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'MhYiGjgfelO',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '0zvxzDi_QAP',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'gONA80A0Iw9',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'upJxxzIsyAN',
								code: 'OBP-10017',
								description: 'Incorrect URL Format. '
							},
							{
								key: 'iwtddBB24uO',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 145,
					section: {
						tag: 'Transaction Metadata',
						title: 'Add comment.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Posts a comment about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\n${authenticationRequiredMessage(false)}\n\nAuthentication is required since the comment is linked with the user.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments',
						exampleRequestBody: '{\n  "value": "String"\n}',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "value": "OBP",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
						typedBody: [{
								key: 'KJQIthvs9O',
								path: 'type',
								type: 'object'
							},
							{
								key: 'vKmzJuJMv8',
								path: 'value',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'PUQ2PQQIon',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'gmaMVoNkia',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'zuQmcVUfhc',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'EO6PeEKNCB',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'oevsILtsEC',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'gn_BdiCd10',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 146,
					section: {
						tag: 'Transaction Metadata',
						title: 'Add narrative.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Creates a description of the transaction TRANSACTION_ID.\n\nNote: Unlike other items of metadata, there is only one "narrative" per transaction accross all views.\nIf you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
						exampleRequestBody: '{\n  "narrative": "narative"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'f9Pjetfu_6w',
								path: 'type',
								type: 'object'
							},
							{
								key: 'xOIo7Gr9lY5',
								path: 'narrative',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'csnJW1VYJn1',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'mL_y0joeBEy',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'j6lwB9fVyVC',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'SVzKmBFPNQc',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'YMpFYplYgC1',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 147,
					section: {
						tag: 'Transaction Metadata',
						title: 'Add where tag.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Creates a "where" Geo tag on a transaction TRANSACTION_ID in a [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe geo tag is linked with the user.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
						exampleRequestBody: '{\n  "where": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'bLOOW5-kezg',
								path: 'type',
								type: 'object'
							},
							{
								key: 'DXOIg5PTWgC',
								path: 'where',
								type: 'object'
							},
							{
								key: 'HflyiyJ-a6F',
								path: 'where->longitude',
								type: 'number'
							},
							{
								key: 'IZuIXas86QA',
								path: 'where->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: 'lasjboL0mWE',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'HQxAjSI5q4G',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'aN2Mg2dFP_4',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'O3TlMvNEWNs',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'abMla4kAQ9_',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'BAeURTF_Sfh',
								code: '<no code>',
								description: 'Coordinates not possible'
							},
							{
								key: 'HtHM6EcvV8T',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 148,
					section: {
						tag: 'Transaction Metadata',
						title: 'Delete a tag.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the tag TAG_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\nAuthentication via OAuth is required. The user must either have owner privileges for this account, \nor must be the user that posted the tag.\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags/TAG_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'F48QQ9iQFna',
								path: 'type',
								type: 'object'
							},
							{
								key: '1GQNoVGbKcF',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'TEr__SRNyLV',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'P8gQ5tbDe-I',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: '8AnkiUDhyXK',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 149,
					section: {
						tag: 'Transaction Metadata',
						title: 'Delete an image',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the image IMAGE_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images/IMAGE_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: '1oULxzSFYFN',
								path: 'type',
								type: 'object'
							},
							{
								key: 'DKRYBEaBp4L',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'yX-kdAhRWk2',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '5ZD1xmKcGCs',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: '7qjIbmOUIDh',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Ay0yIrfE-xr',
								code: '<no code>',
								description: 'You must be able to see images in order to delete them'
							},
							{
								key: '0iqY3amxCxP',
								code: '<no code>',
								description: 'Image not found for this transaction'
							},
							{
								key: 'IEvkx0v65Ny',
								code: '<no code>',
								description: 'Deleting images not permitted for this view'
							},
							{
								key: 'OhzqbF__lcm',
								code: '<no code>',
								description: 'Deleting images not permitted for the current user'
							},
							{
								key: 'KpSm2KDwe8K',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 150,
					section: {
						tag: 'Transaction Metadata',
						title: 'Delete comment.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete the comment COMMENT_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments/COMMENT_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'glX0qDrk6xm',
								path: 'type',
								type: 'object'
							},
							{
								key: 'ruIgNAbJA0n',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'dX1P0LVBhre',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'LHXfP3IRJ8r',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'BP2XomSU4dj',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: '06wMGQ2GSsH',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'i2Pa0IX6YQG',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 151,
					section: {
						tag: 'Transaction Metadata',
						title: 'Delete narrative.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the description of the transaction TRANSACTION_ID.\n\nAuthentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'PfQTMvdnLh4',
								path: 'type',
								type: 'object'
							},
							{
								key: 'ucHt_sFtyM0',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'p0F14OrFv00',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Jcfd6pSsDPY',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '6JrSrLeEL3v',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: '1_N-5FDnhuS',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 152,
					section: {
						tag: 'Transaction Metadata',
						title: 'Delete where tag.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the where tag of the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe user must either have owner privileges for this account, or must be the user that posted the geo tag.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'rHITOcXTSb0',
								path: 'type',
								type: 'object'
							},
							{
								key: 'x6RIk2dAkFw',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'fURXM6hxvHm',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'sW9GdjddB09',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'hQ1RqoSoCve',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'lT5iMW21luZ',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '_rJKJf9esZ5',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'W10gCvZ2SkP',
								code: '<no code>',
								description: 'there is no tag to delete'
							},
							{
								key: 'H6mAk56Z4kf',
								code: '<no code>',
								description: 'Delete not completed'
							},
							{
								key: 'clg4p58vPEQ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 153,
					section: {
						tag: 'Transaction Metadata',
						title: 'Get comments.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the transaction TRANSACTION_ID comments made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n\nAuthentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments',
						exampleResponseBody: '{\n  "comments": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "value": "OBP",\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'Wox4T6V_ocK',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'k6oFjyhaLiQ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'tSiJVPjTkrj',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'kpRrL0eB6fI',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'cilV5zOQh4A',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 154,
					section: {
						tag: 'Transaction Metadata',
						title: 'Get images.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the transaction TRANSACTION_ID images made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n         Authentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images',
						exampleResponseBody: '{\n  "images": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "label": "NONE",\n      "URL": "www.openbankproject.com",\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'PkFRb-TOJsq',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'vPCAg2dGPZ3',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'Bk8vUPepRhS',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'SmC1ACl51HZ',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'nA0XP8WZv8f',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 155,
					section: {
						tag: 'Transaction Metadata',
						title: 'Get narrative.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the account owner description of the transaction [moderated](#1_2_1-getViewsForBankAccount) by the view.\n\nAuthentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
						exampleResponseBody: '{\n  "narrative": "narative"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'MiFLbGSS5gZ',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'A1nsWz6yBAN',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'qQIRxRiK5m4',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'Xx9Ft8iT5qF',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 156,
					section: {
						tag: 'Transaction Metadata',
						title: 'Get tags.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the transaction TRANSACTION_ID tags made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n         Authentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags',
						exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "value": "OBP",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'rX63jOCCCr_',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'yronYiwCntt',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'nNGBRJoRwoq',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'ErpN5_jM3E_',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 157,
					section: {
						tag: 'Transaction Metadata',
						title: 'Get where tag.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the "where" Geo tag added to the transaction TRANSACTION_ID made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\nIt represents the location where the transaction has been initiated.\n\nAuthentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
						exampleResponseBody: '{\n  "where": {\n    "latitude": 1.231,\n    "longitude": 1.231,\n    "date": "2017-09-19T00:00:00Z",\n    "user": {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'k9NlUJYcVtK',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'Uu0xoMRM8RG',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'o4sXmhiOMTG',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'hXfqMiz0FxJ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 158,
					section: {
						tag: 'Transaction Metadata',
						title: 'Update narrative.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Updates the description of the transaction TRANSACTION_ID.\n\nAuthentication via OAuth is required if the view is not public.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
						exampleRequestBody: '{\n  "narrative": "narative"\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: '7Mh0YtvW1BL',
								path: 'type',
								type: 'object'
							},
							{
								key: 'q3flXxxuR9N',
								path: 'narrative',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '6rFKhvexN5q',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'cyU88fcn5ZR',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: '7QoY2paDq9S',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'KauzCrgEstd',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'rCuuZ8O-7y8',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 159,
					section: {
						tag: 'Transaction Metadata',
						title: 'Update where tag.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Updates the "where" Geo tag on a transaction TRANSACTION_ID in a [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe geo tag is linked with the user.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
						exampleRequestBody: '{\n  "where": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
						exampleResponseBody: '{\n  "success": "Success"\n}',
						typedBody: [{
								key: 'nW2vO_WO-k',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Mog46YPdw2',
								path: 'where',
								type: 'object'
							},
							{
								key: 's6rUGo6-cA',
								path: 'where->longitude',
								type: 'number'
							},
							{
								key: '-S93T_vX6v',
								path: 'where->latitude',
								type: 'number'
							}
						],
						possibleErrors: [{
								key: 'gJeJf499fk',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'jQWDXjTgvY',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'yEBnkU42F1',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'eLwRMaUohZ',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: '1Fdyb70VVU',
								code: 'OBP-30022',
								description: 'The current view does not have the permission'
							},
							{
								key: 'AsDdE5m3H8',
								code: '<no code>',
								description: 'Coordinates not possible'
							},
							{
								key: 'JKiF_w5k6Zg',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			'Transaction Request': [{
					index: 160,
					section: {
						tag: 'Transaction Request',
						title: 'Answer Transaction Request Challenge.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'In Sandbox mode, any string that can be converted to a positive integer will be accepted as an answer.\n\nThis endpoint totally depends on createTransactionRequest, it need get the following data from createTransactionRequest response body.\n\n1)`TRANSACTION_REQUEST_TYPE` : is the same as createTransactionRequest request URL .\n\n2)`TRANSACTION_REQUEST_ID` : is the `id` field in createTransactionRequest response body.\n\n3) `id` :  is `challenge.id` field in createTransactionRequest response body.\n\n4) `answer` : must be `123`. if it is in sandbox mode. If it kafka mode, the answer can be got by phone message or other security ways.\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/TRANSACTION_REQUEST_TYPE/transaction-requests/TRANSACTION_REQUEST_ID/challenge',
						exampleRequestBody: '{\n  "id": "This is challenge.id, you can get it from `Create Transaction Request.` response, only is useful if status ==`INITIATED` there.",\n  "answer": "123"\n}',
						exampleResponseBody: '{\n  "id": "82f92531-9c63-4246-abfc-96c20ec46188",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": "666666-9c63-4246-abfc-96c20ec46188",\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
						typedBody: [{
								key: 'd5eDKR1bG-G',
								path: 'type',
								type: 'object'
							},
							{
								key: 'mzZG9Nt_vfQ',
								path: 'answer',
								type: 'string'
							},
							{
								key: 'VshYQ4p_DNa',
								path: 'id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '0j92U7iOssE',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'eoVDExm3dGn',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'BCtLAkI1zdN',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'CNlzcoXQxKu',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '4se0lKaGHir',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '5jfhwGiFdkS',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'TXQ5Qvwmhot',
								code: 'OBP-40011',
								description: 'Transaction Request Status is not INITIATED.'
							},
							{
								key: 'hg1l8vktBkY',
								code: 'OBP-40009',
								description: 'The TRANSACTION_REQUEST_TYPE has changed.'
							},
							{
								key: 'ClK6cWDrmHv',
								code: 'OBP-40010',
								description: 'Invalid Challenge Id. Please specify a valid value for CHALLENGE_ID.'
							},
							{
								key: 'M6VHondaTLx',
								code: 'OBP-40014',
								description: 'Sorry, you\'ve used up your allowed attempts. '
							},
							{
								key: 'BsmVu_a20GB',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: 'z1pzAZhHRWS',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 161,
					section: {
						tag: 'Transaction Request',
						title: 'Create Transaction Request (ACCOUNT_OTP)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'When using ACCOUNT, the payee is set in the request body.\n\nMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT_OTP/transaction-requests',
						exampleRequestBody: '{\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work"\n}',
						exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
						typedBody: [{
								key: 'gUsNJibVDMC',
								path: 'type',
								type: 'object'
							},
							{
								key: 'FCuvNJzxbyC',
								path: 'description',
								type: 'string'
							},
							{
								key: '0iRODaNJgaP',
								path: 'value',
								type: 'object'
							},
							{
								key: 'oFqcV3utAbh',
								path: 'value->amount',
								type: 'string'
							},
							{
								key: '0XFGypJXCAO',
								path: 'value->currency',
								type: 'string'
							},
							{
								key: 'r1cXAs0u8vj',
								path: 'to',
								type: 'object'
							},
							{
								key: 'yaP9E3L6HJh',
								path: 'to->account_id',
								type: 'string'
							},
							{
								key: 'eS_RikbDVXF',
								path: 'to->bank_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'y7CO0iA881R',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'T9cjVB8Is33',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'OicWL7X6cuf',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'THpVBtu0X-j',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'AsAt7clK4qG',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '-zsPFvYJkZr',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '5R3Bm1zf5Q2',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: '2OPsfqzfOHD',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'kLwe_6o2gZB',
								code: 'OBP-40002',
								description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
							},
							{
								key: 'qCDXQy1YlWC',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'llGTniYCtmw',
								code: 'OBP-40001',
								description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
							},
							{
								key: 'zD5p2z4y37F',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'x2sH15hfZHm',
								code: 'OBP-10002',
								description: 'Invalid Number. Could not convert value to a number.'
							},
							{
								key: 'gwMZ5H_FMHp',
								code: 'OBP-40008',
								description: 'Can\'t send a payment with a value of 0 or less.'
							},
							{
								key: 'VJbUXX0F9eX',
								code: 'OBP-40003',
								description: 'Transaction Request Currency must be the same as From Account Currency.'
							},
							{
								key: 'fhIk8eyhiWu',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: 'yGkO1UWUOxW',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 162,
					section: {
						tag: 'Transaction Request',
						title: 'Create Transaction Request (ACCOUNT)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'When using ACCOUNT, the payee is set in the request body.\n\nMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT/transaction-requests',
						exampleRequestBody: '{\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work"\n}',
						exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
						typedBody: [{
								key: 'gl93ZZQDvYA',
								path: 'type',
								type: 'object'
							},
							{
								key: 'SmKYui7iNmu',
								path: 'description',
								type: 'string'
							},
							{
								key: 'H-jm_BFwM3U',
								path: 'value',
								type: 'object'
							},
							{
								key: '7BIghStOWmR',
								path: 'value->amount',
								type: 'string'
							},
							{
								key: 'xFJP6TYJ2lB',
								path: 'value->currency',
								type: 'string'
							},
							{
								key: 'Ad0r_X5LScs',
								path: 'to',
								type: 'object'
							},
							{
								key: 'NRBu9MusivZ',
								path: 'to->account_id',
								type: 'string'
							},
							{
								key: 'WWUc-MPeXcx',
								path: 'to->bank_id',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '2gT8qNw21I6',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'JL7g1FbpRI7',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'OjT1bVoHNfV',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'wsXSHcj0JfR',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'LwNatjbUgG-',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'xv1US0_ytyK',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'vkk6XoPIYzp',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'Nec2ofWiQQb',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'JylUHipTgUN',
								code: 'OBP-40002',
								description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
							},
							{
								key: 'j-53vGvdxBb',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'ccQuNdQZTKW',
								code: 'OBP-40001',
								description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
							},
							{
								key: 'expflGDVGPO',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '8aZe6_sXkrS',
								code: 'OBP-10002',
								description: 'Invalid Number. Could not convert value to a number.'
							},
							{
								key: 'zRWMU_8-iH1',
								code: 'OBP-40008',
								description: 'Can\'t send a payment with a value of 0 or less.'
							},
							{
								key: '7KUaeuZl54l',
								code: 'OBP-40003',
								description: 'Transaction Request Currency must be the same as From Account Currency.'
							},
							{
								key: '2NjsyvNd6vD',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: 'ikFFPAeGm8G',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 163,
					section: {
						tag: 'Transaction Request',
						title: 'Create Transaction Request (COUNTERPARTY)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\nSpecial instructions for COUNTERPARTY:\n\nWhen using a COUNTERPARTY to create a Transaction Request, specificy the counterparty_id in the body of the request.\nThe routing details of the counterparty will be forwarded for the transfer.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/COUNTERPARTY/transaction-requests',
						exampleRequestBody: '{\n  "to": {\n    "counterparty_id": "123456"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "A description for the transaction to the counterparty",\n  "charge_policy": "SHARED",\n  "future_date": "20881230"\n}',
						exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
						typedBody: [{
								key: 'w7tK5R7tXfY',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Q8CpTOXp2AY',
								path: 'description',
								type: 'string'
							},
							{
								key: 'xmPO4EbdMS9',
								path: 'to',
								type: 'object'
							},
							{
								key: 'MCfwRgvGEY2',
								path: 'to->counterparty_id',
								type: 'string'
							},
							{
								key: '2KFmQfWj48Y',
								path: 'value',
								type: 'object'
							},
							{
								key: '20RA5tlDDBq',
								path: 'value->amount',
								type: 'string'
							},
							{
								key: 'Rxe2XLdFMnX',
								path: 'value->currency',
								type: 'string'
							},
							{
								key: 'Mm57-2CICE_',
								path: 'charge_policy',
								type: 'string'
							},
							{
								key: 'qNShWZy3fvm',
								path: 'future_date',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'ycQALHeMv7G',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'CJbj6sdZjWJ',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Isyk70zIJfJ',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'ebLsAU7KpIX',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'BiIoOk1YzMX',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'a25eLDhip2T',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'p7sRWKrq10C',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'x2Zxk9CTJN6',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'PUrH7ljp_3n',
								code: 'OBP-40002',
								description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
							},
							{
								key: 'rYw-M02tkDO',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'u6aLfSocymX',
								code: 'OBP-40001',
								description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
							},
							{
								key: 'ZN81ct3uXP2',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'nD9PNfocLdC',
								code: 'OBP-10002',
								description: 'Invalid Number. Could not convert value to a number.'
							},
							{
								key: 'TSMk5V4EaxN',
								code: 'OBP-40008',
								description: 'Can\'t send a payment with a value of 0 or less.'
							},
							{
								key: 'IoIzU23pEsF',
								code: 'OBP-40003',
								description: 'Transaction Request Currency must be the same as From Account Currency.'
							},
							{
								key: 'hw8STigu7Rw',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: 'XY3lOseW6oW',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 164,
					section: {
						tag: 'Transaction Request',
						title: 'Create Transaction Request (FREE_FORM).',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Initiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/FREE_FORM/transaction-requests',
						exampleRequestBody: '{\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "This is a FREE_FORM Transaction Request"\n}',
						exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
						typedBody: [{
								key: 'qb0dzEZuZXs',
								path: 'type',
								type: 'object'
							},
							{
								key: 'N1gxw2vCTjy',
								path: 'description',
								type: 'string'
							},
							{
								key: 'skDZAUSI66L',
								path: 'value',
								type: 'object'
							},
							{
								key: 'ygFGjGIwIsR',
								path: 'value->amount',
								type: 'string'
							},
							{
								key: 'n6eMsAjC7MR',
								path: 'value->currency',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'j38oO18V2EP',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'isgf0IG8WL4',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'hhBsg4dkp6Z',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'n6bm3MbI2ch',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'brLg-WtmrOq',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'LWC-U7ScfQn',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'jESEUhicyLo',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'A0RpuJRjpV1',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: 'PL37SOD9kR5',
								code: 'OBP-40002',
								description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
							},
							{
								key: 'Jm6AzNfN5hF',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'Ep1rnlbGXQi',
								code: 'OBP-40001',
								description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
							},
							{
								key: 'Ty_EaNsSake',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '_-fEIRVFVBG',
								code: 'OBP-10002',
								description: 'Invalid Number. Could not convert value to a number.'
							},
							{
								key: '2jBl1-6PXQ4',
								code: 'OBP-40008',
								description: 'Can\'t send a payment with a value of 0 or less.'
							},
							{
								key: 'YnZeKZUZ9Cx',
								code: 'OBP-40003',
								description: 'Transaction Request Currency must be the same as From Account Currency.'
							},
							{
								key: '8T551pbIRUb',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: '-5vvMuIVs3v',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 165,
					section: {
						tag: 'Transaction Request',
						title: 'Create Transaction Request (SEPA)',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\nSpecial instructions for SEPA:\n\nWhen using a SEPA Transaction Request, you specify the IBAN of a Counterparty in the body of the request.\nThe routing details (IBAN) of the counterparty will be forwarded to the core banking system for the transfer.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/SEPA/transaction-requests',
						exampleRequestBody: '{\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "to": {\n    "iban": "123"\n  },\n  "description": "This is a SEPA Transaction Request",\n  "charge_policy": "SHARED",\n  "future_date": "20881230"\n}',
						exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
						typedBody: [{
								key: 'p6BsBATN6Ha',
								path: 'type',
								type: 'object'
							},
							{
								key: '0ZkoItLfbzo',
								path: 'value',
								type: 'object'
							},
							{
								key: 'C_WPw0Knted',
								path: 'value->amount',
								type: 'string'
							},
							{
								key: 'Xx-y85KuYG9',
								path: 'value->currency',
								type: 'string'
							},
							{
								key: 'XzgrsZ_aWCi',
								path: 'to',
								type: 'object'
							},
							{
								key: 'hVG7z3Uxqqe',
								path: 'to->iban',
								type: 'string'
							},
							{
								key: 'S67EXCgPh-2',
								path: 'description',
								type: 'string'
							},
							{
								key: 't1Fc7UTN5lM',
								path: 'charge_policy',
								type: 'string'
							},
							{
								key: 'F1Mqs9pzB3X',
								path: 'future_date',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'vwMqjnegs3O',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'bh3GERCsLXs',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'TBaPzaYdlel',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'sHAYw9fcShU',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: '6Qw8-7PKDDJ',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'M_6FvEJo_mn',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'XlUoXczCp52',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'n9fzcWKupRJ',
								code: 'OBP-30005',
								description: 'View not found for Account. Please specify a valid value for VIEW_ID'
							},
							{
								key: '3kBnBEAVcW_',
								code: 'OBP-40002',
								description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
							},
							{
								key: 'IYEa4kKqisE',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'mlcaGiqYpZe',
								code: 'OBP-40001',
								description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
							},
							{
								key: 'KRpca5LRmSf',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'zu0QBsTIKZ9',
								code: 'OBP-10002',
								description: 'Invalid Number. Could not convert value to a number.'
							},
							{
								key: 'iS3INA-eFev',
								code: 'OBP-40008',
								description: 'Can\'t send a payment with a value of 0 or less.'
							},
							{
								key: 'mMGIGxA82y5',
								code: 'OBP-40003',
								description: 'Transaction Request Currency must be the same as From Account Currency.'
							},
							{
								key: 'hDht6WSBmlh',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: 'Htfw3OgNGGa',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 166,
					section: {
						tag: 'Transaction Request',
						title: 'Get supported Transaction Request Types',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the list of the Transaction Request Types supported by the bank.\n\nAuthentication is Optional\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-request-types',
						exampleResponseBody: '{\n  "transaction_request_types": [\n    {\n      "transaction_request_type": "SandboxTan"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'MdG9zROb36U',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'RmHjT8yPG5f',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 167,
					section: {
						tag: 'Transaction Request',
						title: 'Get Transaction Request Types for Account',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the Transation Request Types that the account specified by ACCOUNT_ID and view specified by VIEW_ID has access to.\n\nThese are the ways this API Server can create a Transaction via a Transaction Request\n(as opposed to Transaction Types which include external types too e.g. for Transactions created by core banking etc.)\n\n A Transaction Request Type internally determines:\n\n * the required Transaction Request \'body\' i.e. fields that define the \'what\' and \'to\' of a Transaction Request,\n * the type of security challenge that may be be raised before the Transaction Request proceeds, and\n * the threshold of that challenge.\n\n For instance in a \'SANDBOX_TAN\' Transaction Request, for amounts over 1000 currency units, the user must supply a positive integer to complete the Transaction Request and create a Transaction.\n\n This approach aims to provide only one endpoint for initiating transactions, and one that handles challenges, whilst still allowing flexibility with the payload and internal logic.\n \n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types',
						exampleResponseBody: '{\n  "transaction_request_types": [\n    {\n      "value": "10",\n      "charge": {\n        "summary": "The bank fixed charge",\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'L6LjGzvXeKj',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Pucqi4W5aqC',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'NP2fYm4qeKC',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 's_8Pys5wWQK',
								code: '<no code>',
								description: 'Please specify a valid value for CURRENCY of your Bank Account. '
							},
							{
								key: '4XJv4CRqckK',
								code: '<no code>',
								description: 'Current user does not have access to the view '
							},
							{
								key: 'KVK22I226lM',
								code: '<no code>',
								description: 'account not found at bank'
							},
							{
								key: 'RQJtEEXqGuG',
								code: '<no code>',
								description: 'user does not have access to owner view'
							},
							{
								key: 'V3vjm5iVKLC',
								code: 'OBP-40018',
								description: 'Sorry, Transaction Requests are not enabled in this API instance.'
							},
							{
								key: 'V2f40yN6abG',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 168,
					section: {
						tag: 'Transaction Request',
						title: 'Get Transaction Requests.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns transaction requests for account specified by ACCOUNT_ID at bank specified by BANK_ID.\n\nThe VIEW_ID specified must be \'owner\' and the user must have access to this view.\n\nVersion 2.0.0 now returns charge information.\n\nTransaction Requests serve to initiate transactions that may or may not proceed. They contain information including:\n\n* Transaction Request Id\n* Type\n* Status (INITIATED, COMPLETED)\n* Challenge (in order to confirm the request)\n* From Bank / Account\n* Details including Currency, Value, Description and other initiation information specific to each type. (Could potentialy include a list of future transactions.)\n* Related Transactions\n\nPSD2 Context: PSD2 requires transparency of charges to the customer.\nThis endpoint provides the charge that would be applied if the Transaction Request proceeds - and a record of that charge there after.\nThe customer can proceed with the Transaction by answering the security challenge.\n\n      ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-requests',
						exampleResponseBody: '{\n  "transaction_requests_with_charges": [\n    {\n      "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n      "type": "SANDBOX_TAN",\n      "from": {\n        "bank_id": "GENODEM1GLS",\n        "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n      },\n      "details": {\n        "to_sandbox_tan": {\n          "bank_id": "String",\n          "account_id": "String"\n        },\n        "to_sepa": {\n          "iban": "String"\n        },\n        "to_counterparty": {\n          "counterparty_id": "String"\n        },\n        "to_transfer_to_phone": {\n          "value": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "description": "String",\n          "message": "String",\n          "from": {\n            "mobile_phone_number": "+44 07972 444 876",\n            "nickname": "String"\n          },\n          "to": {\n            "mobile_phone_number": "+44 07972 444 876"\n          }\n        },\n        "to_transfer_to_atm": {\n          "value": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "description": "String",\n          "message": "String",\n          "from": {\n            "mobile_phone_number": "+44 07972 444 876",\n            "nickname": "String"\n          },\n          "to": {\n            "legal_name": "Eveline Tripman",\n            "date_of_birth": "20181230",\n            "mobile_phone_number": "+44 07972 444 876",\n            "kyc_document": {\n              "type": "String",\n              "number": "String"\n            }\n          }\n        },\n        "to_transfer_to_account": {\n          "value": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "description": "String",\n          "transfer_type": "String",\n          "future_date": "20181230",\n          "to": {\n            "name": "String",\n            "bank_code": "String",\n            "branch_number": "String",\n            "account": {\n              "number": "String",\n              "iban": "String"\n            }\n          }\n        },\n        "to_sepa_credit_transfers": {\n          "debtorAccount": {\n            "iban": "12345"\n          },\n          "instructedAmount": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "creditorAccount": {\n            "iban": "54321"\n          },\n          "creditorName": "John Miles"\n        },\n        "value": {\n          "currency": "EUR",\n          "amount": "100"\n        },\n        "description": "String"\n      },\n      "transaction_ids": [\n        "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n      ],\n      "status": "COMPLETED",\n      "start_date": "2017-09-19T00:00:00Z",\n      "end_date": "2017-09-19T00:00:00Z",\n      "challenge": {\n        "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n        "allowed_attempts": 3,\n        "challenge_type": "SANDBOX_TAN"\n      },\n      "charge": {\n        "summary": "Rent the flat",\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      }\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'yaEI4fsYjuV',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'GUtgZghSlkA',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'EqYTj5JYdvp',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'VHdUGP8BZF1',
								code: 'OBP-20017',
								description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
							},
							{
								key: 'ecfsI3vgZ9v',
								code: 'OBP-20019',
								description: 'User does not have access to owner view. '
							},
							{
								key: 'prm-jzJvXpJ',
								code: 'OBP-60010',
								description: 'Get Transaction Requests Exception. '
							},
							{
								key: 'xBhB4BmUtEM',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 169,
					section: {
						tag: 'Transaction Request',
						title: 'Save Historical Transactions ',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\nImport the historical transactions.\n       ',
						specificUrl: '/obp/v4.0.0/management/historical/transactions ',
						exampleRequestBody: '{\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work",\n  "posted": "2017-09-19T02:31:05Z",\n  "completed": "2017-09-19T02:31:05Z",\n  "type": "SANDBOX_TAN",\n  "charge_policy": "SHARED"\n}',
						exampleResponseBody: '{\n  "transaction_id": "123",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work",\n  "posted": "2017-09-19T00:00:00Z",\n  "completed": "2017-09-19T00:00:00Z",\n  "transaction_request_type": "SANDBOX_TAN",\n  "charge_policy": "SHARED"\n}',
						typedBody: [{
								key: '6vrDVd4ZLOf',
								path: 'type',
								type: 'object'
							},
							{
								key: 'YD6P0hXo5kI',
								path: 'type',
								type: 'string'
							},
							{
								key: '46oO41NWNeF',
								path: 'description',
								type: 'string'
							},
							{
								key: 'Jx6sHRW67i7',
								path: 'value',
								type: 'object'
							},
							{
								key: '9NrWmqeV4uY',
								path: 'value->amount',
								type: 'string'
							},
							{
								key: 'IRLJ9CyOURX',
								path: 'value->currency',
								type: 'string'
							},
							{
								key: 'npahNtMFlqQ',
								path: 'posted',
								type: 'string'
							},
							{
								key: '_WYfOLAyBoK',
								path: 'to',
								type: 'object'
							},
							{
								key: 'C8us_xmYCVU',
								path: 'to->account_id',
								type: 'string'
							},
							{
								key: 'otVsiUL3ltx',
								path: 'to->bank_id',
								type: 'string'
							},
							{
								key: 'EnphmdV825V',
								path: 'completed',
								type: 'string'
							},
							{
								key: 'Q3xNTnB9gSz',
								path: 'from',
								type: 'object'
							},
							{
								key: '5b_0wXjteRo',
								path: 'from->account_id',
								type: 'string'
							},
							{
								key: 'SjyNK-F3Tvy',
								path: 'from->bank_id',
								type: 'string'
							},
							{
								key: 'JufmG6ynyYT',
								path: 'charge_policy',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'ne2w5HlIpLe',
								code: 'OBP-30111',
								description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'SZBpvafL2yU',
								code: 'OBP-30110',
								description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
							},
							{
								key: 'vunLc6BSy3n',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '04hPPx12lo5',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'IQutHWnRdEJ',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'pcIdiEzZL0g',
								code: 'OBP-10002',
								description: 'Invalid Number. Could not convert value to a number.'
							},
							{
								key: 'rquBwU5yfKK',
								code: 'OBP-40008',
								description: 'Can\'t send a payment with a value of 0 or less.'
							},
							{
								key: 'yNvwBxIR4qq',
								code: 'OBP-40003',
								description: 'Transaction Request Currency must be the same as From Account Currency.'
							},
							{
								key: 'kK9SglkdDUp',
								code: 'OBP-00003',
								description: 'Transaction Requests is disabled in this API instance.'
							},
							{
								key: '6WmsUsZKNRH',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			User: [{
					index: 170,
					section: {
						tag: 'User',
						title: 'Answer Auth Context Update Challenge',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: '\nAnswer Auth Context Update Challenge.\n',
						specificUrl: '/obp/v4.0.0/users/current/auth-context-updates/AUTH_CONTEXT_UPDATE_ID/challenge',
						exampleRequestBody: '{\n  "answer": "12345678"\n}',
						exampleResponseBody: '{\n  "user_auth_context_update_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432",\n  "status": "INITIATED"\n}',
						typedBody: [{
								key: '6WhnWeuHoLP',
								path: 'type',
								type: 'object'
							},
							{
								key: 'P841ktjF3Ig',
								path: 'answer',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'pbiI7MN5xTm',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'G9oG68AtC61',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: '0WZ66C_fxgq',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: '8wh_iyL5eIA',
								code: 'OBP-50200',
								description: 'Connector cannot return the data we requested.'
							},
							{
								key: 'DGxQLYshhg7',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 171,
					section: {
						tag: 'User',
						title: 'Create User Auth Context',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create User Auth Context. These key value pairs will be propagated over connector to adapter. Normally used for mapping OBP user and \n Bank User/Customer. \nAuthentication is Mandatory\n',
						specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context',
						exampleRequestBody: '{\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432"\n}',
						exampleResponseBody: '{\n  "user_auth_context_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432"\n}',
						typedBody: [{
								key: '9dFPnhmFWJt',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Dlbugb3BOGl',
								path: 'value',
								type: 'string'
							},
							{
								key: 'acfe3WpXp5y',
								path: 'key',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '1wfiGu7MbtD',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'NWMKGMD7z2s',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'e7FOBnAT_DZ',
								code: 'OBP-30053',
								description: 'Could not insert the UserAuthContext'
							},
							{
								key: 'D8FCYMIuzvv',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 172,
					section: {
						tag: 'User',
						title: 'Create User Auth Context Update',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create User Auth Context Update.\nAuthentication is Mandatory\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/current/auth-context-updates/SCA_METHOD',
						exampleRequestBody: '{\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432"\n}',
						exampleResponseBody: '{\n  "user_auth_context_update_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432",\n  "status": "INITIATED"\n}',
						typedBody: [{
								key: 'ta5l-3Qv3KQ',
								path: 'type',
								type: 'object'
							},
							{
								key: 'tEhBQ5i8LNM',
								path: 'value',
								type: 'string'
							},
							{
								key: '6ViXzJsflyn',
								path: 'key',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'LJ3LTPvAjfl',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'VqtbHxxvqdj',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'y02yvDvXdKb',
								code: 'OBP-30053',
								description: 'Could not insert the UserAuthContext'
							},
							{
								key: 'FLA5jivP90d',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 173,
					section: {
						tag: 'User',
						title: 'Create User.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Creates OBP user.\n No authorisation (currently) required.\n\n Mimics current webform to Register.\n\n Requires username(email) and password.\n\n Returns 409 error if username not unique.\n\n May require validation of email address.\n\n',
						specificUrl: '/obp/v4.0.0/users',
						exampleRequestBody: '{\n  "email": "eveline@example.com",\n  "username": "felixsmith",\n  "password": "String",\n  "first_name": "Simon",\n  "last_name": "Redfern"\n}',
						exampleResponseBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "email": "eveline@example.com",\n  "provider_id": "Chris",\n  "provider": "http://127.0.0.1:8080",\n  "username": "felixsmith",\n  "entitlements": {\n    "list": [\n      {\n        "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n        "role_name": "CanQueryOtherUser",\n        "bank_id": "GENODEM1GLS"\n      }\n    ]\n  }\n}',
						typedBody: [{
								key: 'htAcFvTx-CO',
								path: 'type',
								type: 'object'
							},
							{
								key: 'zk0SKTgtjOw',
								path: 'email',
								type: 'string'
							},
							{
								key: 'kMnV3tsLjH4',
								path: 'first_name',
								type: 'string'
							},
							{
								key: 'RhfXItEwmaV',
								path: 'password',
								type: 'string'
							},
							{
								key: '_OYWLWtTV-G',
								path: 'username',
								type: 'string'
							},
							{
								key: 'pYujOB8jRgH',
								path: 'last_name',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'AqQ-gFx1_mV',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'u4PSpSDgKKU',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'RadiWpzmQkq',
								code: 'OBP-30207',
								description: 'Invalid Password Format. Your password should EITHER be at least 10 characters long and contain mixed numbers and both upper and lower case letters and at least one special character, OR be longer than 16 characters.'
							},
							{
								key: '5zjRvBZgwb9',
								code: '<no code>',
								description: 'Error occurred during user creation.'
							},
							{
								key: '8KYrCL5Ca71',
								code: '<no code>',
								description: 'User with the same username already exists.'
							},
							{
								key: '2BFDJ4UUdDV',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 174,
					section: {
						tag: 'User',
						title: 'Delete User Auth Context',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete a User AuthContext of the User specified by USER_AUTH_CONTEXT_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context/USER_AUTH_CONTEXT_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'un9yGTg43q',
								path: 'type',
								type: 'object'
							},
							{
								key: '3YL3AH-7nm',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'cY1uwJvlon',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'HSFx4wJk-w',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'i9F-Vv95zh',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 175,
					section: {
						tag: 'User',
						title: 'Delete User\'s Auth Contexts',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Delete the Auth Contexts of a User specified by USER_ID.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'V8GKXiPmkr',
								path: 'type',
								type: 'object'
							},
							{
								key: 'awvg1LIesu',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '1AY6d7F8iW',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: '2W7B32Yyju',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'gC1w_IsHkZ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 176,
					section: {
						tag: 'User',
						title: 'Get User (Current)',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get the logged in user\n\nAuthentication is Mandatory\n      ',
						specificUrl: '/obp/v4.0.0/users/current',
						exampleResponseBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "email": "eveline@example.com",\n  "provider_id": "Chris",\n  "provider": "http://127.0.0.1:8080",\n  "username": "felixsmith",\n  "entitlements": {\n    "list": [\n      {\n        "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n        "role_name": "CanQueryOtherUser",\n        "bank_id": "GENODEM1GLS"\n      }\n    ]\n  }\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'iS_6Wfdt5h',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'f4WQWdEYWo',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 177,
					section: {
						tag: 'User',
						title: 'Get User Auth Contexts',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get User Auth Contexts for a User.\n\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context',
						exampleResponseBody: '{\n  "user_auth_contexts": [\n    {\n      "user_auth_context_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "key": "CUSTOMER_NUMBER",\n      "value": "78987432"\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'NM7Ri-Lp7Im',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 's_Yd99Mh4Ie',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'udh6PTYFQBR',
								code: 'OBP-30053',
								description: 'Could not insert the UserAuthContext'
							},
							{
								key: 'etk1cjJprHr',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 178,
					section: {
						tag: 'User',
						title: 'Get User Lock Status',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '\nGet User Login Status.\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/USERNAME/lock-status',
						exampleResponseBody: '{\n  "username": "felixsmith",\n  "bad_attempts_since_last_success_or_reset": 0,\n  "last_failure_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'TmuLsY-GfYR',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Uoj6kD0Yxga',
								code: 'OBP-20027',
								description: 'User not found by username.'
							},
							{
								key: 'SoismnBnZyK',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'Bn4lKQbLPty',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 179,
					section: {
						tag: 'User',
						title: 'Refresh User.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: ' The endpoint is used for updating the accounts, views, account holders for the user.\n As to the Json body, you can leave it as Empty. \n This call will get data from backend, no need to prepare the json body in api side.\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/USER_ID/refresh',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "duration_time": "10 ms"\n}',
						typedBody: [{
								key: 'ixiqTBvoXsU',
								path: 'type',
								type: 'object'
							},
							{
								key: '9qGRlE9KCDi',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: '2sxeZ0nP1JZ',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'FNgZ6UfDo-G',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 180,
					section: {
						tag: 'User',
						title: 'Unlock the user',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: '\nUnlock a User.\n\n(Perhaps the user was locked due to multiple failed login attempts)\n\nAuthentication is Mandatory\n\n',
						specificUrl: '/obp/v4.0.0/users/USERNAME/lock-status',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "username": "felixsmith",\n  "bad_attempts_since_last_success_or_reset": 0,\n  "last_failure_date": "2017-09-19T00:00:00Z"\n}',
						typedBody: [{
								key: 'FOHbF25Yvs',
								path: 'type',
								type: 'object'
							},
							{
								key: 'tIfr2buwAl',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'EDpHpV5L8m',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'TdX-Tg1V_z',
								code: 'OBP-20027',
								description: 'User not found by username.'
							},
							{
								key: 'oil374t1cl',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: '9YEL7lRv--',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			View: [{
					index: 181,
					section: {
						tag: 'View',
						title: 'Create View.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create a view on bank account\n\n Authentication is Mandatory and the user needs to have access to the owner view.\n The \'alias\' field in the JSON can take one of three values:\n\n * _public_: to use the public alias if there is one specified for the other account.\n * _private_: to use the public alias if there is one specified for the other account.\n\n * _\'\'(empty string)_: to use no alias; the view shows the real name of the other account.\n\n The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to `true` and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\n\n The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to `true` on the view creation, the rest will be set to `false`.\n\n You MUST use a leading _ (underscore) in the view name because other view names are reserved for OBP system views.\n ',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views',
						exampleRequestBody: '{\n  "name": "_test",\n  "description": "This view is for family",\n  "metadata_view": "_test",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": false,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
						exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
						typedBody: [{
								key: 'M6Jg4X25zXx',
								path: 'type',
								type: 'object'
							},
							{
								key: 'KeDSNtBfGq1',
								path: 'allowed_actions',
								type: 'array'
							},
							{
								key: 'HQTkhB84Q3Z',
								path: 'allowed_actions->items',
								type: 'string'
							},
							{
								key: 'iph5tHZGR-Q',
								path: 'hide_metadata_if_alias_used',
								type: 'boolean'
							},
							{
								key: 'VvIotv4WB-l',
								path: 'name',
								type: 'string'
							},
							{
								key: 'XcxjPRxw1cN',
								path: 'description',
								type: 'string'
							},
							{
								key: 'fpPlGM_xIE8',
								path: 'is_public',
								type: 'boolean'
							},
							{
								key: '8uRPwKNIO3D',
								path: 'metadata_view',
								type: 'string'
							},
							{
								key: '04ev-3ncOt_',
								path: 'which_alias_to_use',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'p2zv9mSoXq3',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'Ftt7MVdFDDU',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'VE3AzAcN4_V',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 't5ovnP_I77E',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 182,
					section: {
						tag: 'View',
						title: 'Delete View',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Deletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'v9VU7ztX2l',
								path: 'type',
								type: 'object'
							},
							{
								key: 'GJy_JNFUaz',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'z0tfnRkHEk',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'GX6ql6yHGW',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'HflJ8Md4Mn',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'OI8on77QFi',
								code: '<no code>',
								description: 'user does not have owner access'
							}
						]
					}
				},
				{
					index: 183,
					section: {
						tag: 'View',
						title: 'Get access.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.\n\nAuthentication is Mandatory\nand the user needs to have access to the owner view.\n\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions',
						exampleResponseBody: '{\n  "permissions": [\n    {\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      },\n      "views": [\n        {\n          "id": "123",\n          "short_name": "short_name",\n          "description": "description",\n          "is_public": true,\n          "alias": "None",\n          "hide_metadata_if_alias_used": true,\n          "can_add_comment": true,\n          "can_add_corporate_location": true,\n          "can_add_image": true,\n          "can_add_image_url": true,\n          "can_add_more_info": true,\n          "can_add_open_corporates_url": true,\n          "can_add_physical_location": true,\n          "can_add_private_alias": true,\n          "can_add_public_alias": true,\n          "can_add_tag": true,\n          "can_add_url": true,\n          "can_add_where_tag": true,\n          "can_delete_comment": true,\n          "can_delete_corporate_location": true,\n          "can_delete_image": true,\n          "can_delete_physical_location": true,\n          "can_delete_tag": true,\n          "can_delete_where_tag": true,\n          "can_edit_owner_comment": true,\n          "can_see_bank_account_balance": true,\n          "can_see_bank_account_bank_name": true,\n          "can_see_bank_account_currency": true,\n          "can_see_bank_account_iban": true,\n          "can_see_bank_account_label": true,\n          "can_see_bank_account_national_identifier": true,\n          "can_see_bank_account_number": true,\n          "can_see_bank_account_owners": true,\n          "can_see_bank_account_swift_bic": true,\n          "can_see_bank_account_type": true,\n          "can_see_comments": true,\n          "can_see_corporate_location": true,\n          "can_see_image_url": true,\n          "can_see_images": true,\n          "can_see_more_info": true,\n          "can_see_open_corporates_url": true,\n          "can_see_other_account_bank_name": true,\n          "can_see_other_account_iban": true,\n          "can_see_other_account_kind": true,\n          "can_see_other_account_metadata": true,\n          "can_see_other_account_national_identifier": true,\n          "can_see_other_account_number": true,\n          "can_see_other_account_swift_bic": true,\n          "can_see_owner_comment": true,\n          "can_see_physical_location": true,\n          "can_see_private_alias": true,\n          "can_see_public_alias": true,\n          "can_see_tags": true,\n          "can_see_transaction_amount": true,\n          "can_see_transaction_balance": true,\n          "can_see_transaction_currency": true,\n          "can_see_transaction_description": true,\n          "can_see_transaction_finish_date": true,\n          "can_see_transaction_metadata": true,\n          "can_see_transaction_other_bank_account": true,\n          "can_see_transaction_start_date": true,\n          "can_see_transaction_this_bank_account": true,\n          "can_see_transaction_type": true,\n          "can_see_url": true,\n          "can_see_where_tag": true\n        }\n      ]\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'ghQwtPIO2PL',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'B74IJfCZW2n',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'plioaBJdXtH',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'O5Id5tGAfJx',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 184,
					section: {
						tag: 'View',
						title: 'Get Account access for User.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Returns the list of the views at BANK_ID for account ACCOUNT_ID that a user identified by PROVIDER_ID at their provider PROVIDER has access to.\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for USER_ID and PROVIDER.\n\nAuthentication is Mandatory\n\nThe user needs to have access to the owner view.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID',
						exampleResponseBody: '{\n  "views": [\n    {\n      "id": "1234",\n      "short_name": "short_name",\n      "description": "description",\n      "metadata_view": "owner",\n      "is_public": true,\n      "alias": "No",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_add_counterparty": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_query_available_funds": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true,\n      "can_see_bank_routing_scheme": true,\n      "can_see_bank_routing_address": true,\n      "can_see_bank_account_routing_scheme": true,\n      "can_see_bank_account_routing_address": true,\n      "can_see_other_bank_routing_scheme": true,\n      "can_see_other_bank_routing_address": true,\n      "can_see_other_account_routing_scheme": true,\n      "can_see_other_account_routing_address": true,\n      "can_add_transaction_request_to_own_account": true,\n      "can_add_transaction_request_to_any_account": true,\n      "can_see_bank_account_credit_limit": true\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 's4va06CasD-',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'LRx0L5RXB5c',
								code: 'OBP-30001',
								description: 'Bank not found. Please specify a valid value for BANK_ID.'
							},
							{
								key: 'CsGS4BgZfxt',
								code: 'OBP-30003',
								description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
							},
							{
								key: 'KhksxS2cBIn',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 185,
					section: {
						tag: 'View',
						title: 'Get Views for Account.',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: '#Views\n\n\nViews in Open Bank Project provide a mechanism for fine grained access control and delegation to Accounts and Transactions. Account holders use the \'owner\' view by default. Delegated access is made through other views for example \'accountants\', \'share-holders\' or \'tagging-application\'. Views can be created via the API and each view has a list of entitlements.\n\nViews on accounts and transactions filter the underlying data to redact certain fields for certain users. For instance the balance on an account may be hidden from the public. The way to know what is possible on a view is determined in the following JSON.\n\n**Data:** When a view moderates a set of data, some fields my contain the value `null` rather than the original value. This indicates either that the user is not allowed to see the original data or the field is empty.\n\nThere is currently one exception to this rule; the \'holder\' field in the JSON contains always a value which is either an alias or the real name - indicated by the \'is_alias\' field.\n\n**Action:** When a user performs an action like trying to post a comment (with POST API call), if he is not allowed, the body response will contain an error message.\n\n**Metadata:**\nTransaction metadata (like images, tags, comments, etc.) will appears *ONLY* on the view where they have been created e.g. comments posted to the public view only appear on the public view.\n\nThe other account metadata fields (like image_URL, more_info, etc.) are unique through all the views. Example, if a user edits the \'more_info\' field in the \'team\' view, then the view \'authorities\' will show the new value (if it is allowed to do it).\n\n# All\n*Optional*\n\nReturns the list of the views created for account ACCOUNT_ID at BANK_ID.\n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views',
						exampleResponseBody: '{\n  "views": [\n    {\n      "id": "1234",\n      "short_name": "short_name",\n      "description": "description",\n      "metadata_view": "owner",\n      "is_public": true,\n      "alias": "No",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_add_counterparty": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_query_available_funds": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true,\n      "can_see_bank_routing_scheme": true,\n      "can_see_bank_routing_address": true,\n      "can_see_bank_account_routing_scheme": true,\n      "can_see_bank_account_routing_address": true,\n      "can_see_other_bank_routing_scheme": true,\n      "can_see_other_bank_routing_address": true,\n      "can_see_other_account_routing_scheme": true,\n      "can_see_other_account_routing_address": true,\n      "can_add_transaction_request_to_own_account": true,\n      "can_add_transaction_request_to_any_account": true,\n      "can_see_bank_account_credit_limit": true\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'x0rVQ8afkw6',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'OP7rdPyBAaL',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'zHaupK_pJyz',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 186,
					section: {
						tag: 'View',
						title: 'Grant User access to a list of views.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Grants the user identified by PROVIDER_ID at their provider PROVIDER access to a list of views at BANK_ID for account ACCOUNT_ID.\n\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for PROVIDER_ID and PROVIDER.\n\nAuthentication is Mandatory\n\nThe User needs to have access to the owner view.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views',
						exampleRequestBody: '{\n  "views": [\n    "_family",\n    "_work"\n  ]\n}',
						exampleResponseBody: '{\n  "views": [\n    {\n      "id": "123",\n      "short_name": "short_name",\n      "description": "description",\n      "is_public": true,\n      "alias": "None",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true\n    }\n  ]\n}',
						typedBody: [{
								key: 'XAPiMlsxZ_',
								path: 'type',
								type: 'object'
							},
							{
								key: 'wFXjdjXOor',
								path: 'views',
								type: 'array'
							},
							{
								key: 'fM8GZ0nDgB',
								path: 'views->items',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'N9o-gRfamt',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'chH-8ecS_u',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'M1aeM8wL9-',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'M3BFWPL76H',
								code: '<no code>',
								description: 'wrong format JSON'
							},
							{
								key: 'KZtBF-qBXb',
								code: '<no code>',
								description: 'could not save the privilege'
							},
							{
								key: 'j_RNF-i0py',
								code: '<no code>',
								description: 'user does not have access to owner view on account'
							}
						]
					}
				},
				{
					index: 187,
					section: {
						tag: 'View',
						title: 'Grant User access to View.',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Grants the User identified by PROVIDER_ID at PROVIDER access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.\n\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for PROVIDER and PROVIDER_ID.\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nGranting access to a public view will return an error message, as the user already has access.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "id": "123",\n  "short_name": "short_name",\n  "description": "description",\n  "is_public": true,\n  "alias": "None",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true\n}',
						typedBody: [{
								key: '8pvFEjvwYqn',
								path: 'type',
								type: 'object'
							},
							{
								key: 'Xq4VbUbG-a4',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'iQSF-Y-5mYB',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'AEpAvUD5GGD',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'NzEQVM2c8fQ',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: 'qsZBICqTy4w',
								code: '<no code>',
								description: 'could not save the privilege'
							},
							{
								key: '5GXG9C24OIt',
								code: '<no code>',
								description: 'user does not have access to owner view on account'
							}
						]
					}
				},
				{
					index: 188,
					section: {
						tag: 'View',
						title: 'Revoke access to all Views on Account',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: '"Revokes access to all Views on an Account for a certain User.\n\n\nThe User is identified by PROVIDER_ID at their PROVIDER.\n\nThe Account is specified by BANK_ID and ACCOUNT_ID.\n\nThe View is specified by VIEW_ID.\n\n\nPROVIDER (may be a URL so) must be URL Encoded.\n\nPROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.\n\nAttempting to revoke access to a public view will return an error message.\n\nAn Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.\n\n      \n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'QXFoQR4MX8G',
								path: 'type',
								type: 'object'
							},
							{
								key: 'LvLZlSM9faZ',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'Bl4_LK-zEyF',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'QlZ7zNu0LDB',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'RXJWIrc5aJM',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							},
							{
								key: '2ah6vLCwDn8',
								code: '<no code>',
								description: 'user does not have access to owner view on account'
							}
						]
					}
				},
				{
					index: 189,
					section: {
						tag: 'View',
						title: 'Revoke access to one View.',
						requestType: {
							type: 'DELETE',
							color: '#EF476F'
						},
						description: 'Revokes access to a View on an Account for a certain User.\n\n\nThe User is identified by PROVIDER_ID at their PROVIDER.\n\nThe Account is specified by BANK_ID and ACCOUNT_ID.\n\nThe View is specified by VIEW_ID.\n\n\nPROVIDER (may be a URL so) must be URL Encoded.\n\nPROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.\n\nAttempting to revoke access to a public view will return an error message.\n\nAn Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.\n\n      \n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID',
						exampleRequestBody: '{\n  "jsonString": "{}"\n}',
						exampleResponseBody: '{\n  "jsonString": "{}"\n}',
						typedBody: [{
								key: 'i7vx4R1JdpZ',
								path: 'type',
								type: 'object'
							},
							{
								key: 'xtdafkQPUzQ',
								path: 'jsonString',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'rWP3qQ_Fq-Q',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'xSKY71oXWMo',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'vaYZun7TBPG',
								code: '<no code>',
								description: 'could not save the privilege'
							},
							{
								key: 'nTwQxBd6Km4',
								code: '<no code>',
								description: 'user does not have access to owner view on account'
							},
							{
								key: 'Y6kEEXg328B',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				},
				{
					index: 190,
					section: {
						tag: 'View',
						title: 'Update View.',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Update an existing view on a bank account\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nThe json sent is the same as during view creation (above), with one difference: the \'name\' field\nof a view is not editable (it is only set when a view is created)',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID',
						exampleRequestBody: '{\n  "description": "this is for family",\n  "metadata_view": "owner",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": true,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
						exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
						typedBody: [{
								key: 'dls9rEbzoiS',
								path: 'type',
								type: 'object'
							},
							{
								key: 'v9cudInRrUT',
								path: 'allowed_actions',
								type: 'array'
							},
							{
								key: 'lcKiznStRpj',
								path: 'allowed_actions->items',
								type: 'string'
							},
							{
								key: 'wCKWt72zrAZ',
								path: 'description',
								type: 'string'
							},
							{
								key: '4Mu9Fxsr39A',
								path: 'hide_metadata_if_alias_used',
								type: 'boolean'
							},
							{
								key: 'enTNLLPQEwV',
								path: 'metadata_view',
								type: 'string'
							},
							{
								key: 'MTKSbwxmXtG',
								path: 'is_public',
								type: 'boolean'
							},
							{
								key: 'VNv_cIphAEP',
								path: 'which_alias_to_use',
								type: 'string'
							}
						],
						possibleErrors: [{
								key: 'n74sdFxX-bY',
								code: 'OBP-10001',
								description: 'Incorrect json format.'
							},
							{
								key: 'RUz5bMh-LGi',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'YUMgCAm_qD6',
								code: 'OBP-30018',
								description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
							},
							{
								key: 'X4zW8lg4TS2',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			],
			Webhook: [{
					index: 191,
					section: {
						tag: 'Webhook',
						title: 'Create an Account Webhook',
						requestType: {
							type: 'POST',
							color: '#005EB8'
						},
						description: 'Create an Account Webhook\n\nWebhooks are used to call external URLs when certain events happen.\n\nAccount Webhooks focus on events around accounts.\n\nFor instance, a webhook could be used to notify an external service if a balance changes on an account.\n\nThis functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
						exampleRequestBody: '{\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "trigger_name": "OnBalanceChange",\n  "url": "https://localhost.openbankproject.com",\n  "http_method": "POST",\n  "http_protocol": "HTTP/1.1",\n  "is_active": "true"\n}',
						exampleResponseBody: '{\n  "account_webhook_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "bank_id": "GENODEM1GLS",\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "trigger_name": "OnBalanceChange",\n  "url": "https://localhost.openbankproject.com",\n  "http_method": "POST",\n  "http_protocol": "HTTP/1.1",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "is_active": true\n}',
						typedBody: [{
								key: 'gbaPh-CUetd',
								path: 'type',
								type: 'object'
							},
							{
								key: 'GnkBODeT4hw',
								path: 'http_method',
								type: 'string'
							},
							{
								key: 'c8t5bAXaUbj',
								path: 'is_active',
								type: 'string'
							},
							{
								key: 'ftJCtDEbPKd',
								path: 'http_protocol',
								type: 'string'
							},
							{
								key: 'kzE1JZv7pG-',
								path: 'trigger_name',
								type: 'string'
							},
							{
								key: 'n9nwsFxAXbJ',
								path: 'account_id',
								type: 'string'
							},
							{
								key: 'm7GjsWX0ngY',
								path: 'url',
								type: 'string'
							}
						],
						possibleErrors: [{
							key: '2Uxlu70x4sd',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 192,
					section: {
						tag: 'Webhook',
						title: 'Enable/Disable an Account Webhook',
						requestType: {
							type: 'PUT',
							color: '#FFD166'
						},
						description: 'Enable/Disable an Account Webhook\n\n\nWebhooks are used to call external URLs when certain events happen.\n\nAccount Webhooks focus on events around accounts.\n\nFor instance, a webhook could be used to notify an external service if a balance changes on an account.\n\nThis functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange\n',
						specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
						exampleRequestBody: '{\n  "account_webhook_id": "fc23a7e2-7dd2-4bdf-a0b4-ae31232a4762",\n  "is_active": "true"\n}',
						exampleResponseBody: '{\n  "account_webhook_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "bank_id": "GENODEM1GLS",\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "trigger_name": "OnBalanceChange",\n  "url": "https://localhost.openbankproject.com",\n  "http_method": "POST",\n  "http_protocol": "HTTP/1.1",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "is_active": true\n}',
						typedBody: [{
								key: 'qq82I-AnAvc',
								path: 'type',
								type: 'object'
							},
							{
								key: 'f4x6n4jD8VP',
								path: 'is_active',
								type: 'string'
							},
							{
								key: 'BMTxdc0INjq',
								path: 'account_webhook_id',
								type: 'string'
							}
						],
						possibleErrors: [{
							key: 'CH62feOugnb',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}]
					}
				},
				{
					index: 193,
					section: {
						tag: 'Webhook',
						title: 'Get Account Webhooks',
						requestType: {
							type: 'GET',
							color: '#06D6A0'
						},
						description: 'Get Account Webhooks.\n\nPossible custom URL parameters for pagination:\n\n* limit=NUMBER\n* offset=NUMBER\n* account_id=STRING\n* user_id=STRING\n\n\n',
						specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
						exampleResponseBody: '{\n  "web_hooks": [\n    {\n      "account_webhook_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "bank_id": "GENODEM1GLS",\n      "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n      "trigger_name": "OnBalanceChange",\n      "url": "https://localhost.openbankproject.com",\n      "http_method": "POST",\n      "http_protocol": "HTTP/1.1",\n      "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "is_active": true\n    }\n  ]\n}',
						typedBody: [],
						possibleErrors: [{
								key: 'xIM0u4YlNde',
								code: 'OBP-20001',
								description: 'User not logged in. Authentication is required!'
							},
							{
								key: 'pC6nhB0wBL8',
								code: 'OBP-20006',
								description: 'User is missing one or more roles'
							},
							{
								key: 'qw2ClswCSNM',
								code: 'OBP-50000',
								description: 'Unknown Error.'
							}
						]
					}
				}
			]
		},
		orderedApiDocs: [{
				index: 0,
				section: {
					tag: 'ATM',
					title: 'Create ATM',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create ATM for the Bank.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms',
					exampleRequestBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
					exampleResponseBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
					typedBody: [{
							key: 'hvvvund7lPi',
							path: 'type',
							type: 'object'
						},
						{
							key: 'gUnuDgaBwAp',
							path: 'has_deposit_capability',
							type: 'string'
						},
						{
							key: '1qoV1986AE1',
							path: 'name',
							type: 'string'
						},
						{
							key: 'Fy-A-kbFI7R',
							path: 'friday',
							type: 'object'
						},
						{
							key: 'xKdYIA-_CMi',
							path: 'friday->closing_time',
							type: 'string'
						},
						{
							key: 'hmpsB4eNwwv',
							path: 'friday->opening_time',
							type: 'string'
						},
						{
							key: 'tqg7dvkOYCB',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: '2CNT4FZBCXE',
							path: 'more_info',
							type: 'string'
						},
						{
							key: '2ukegzcrhAY',
							path: 'is_accessible',
							type: 'string'
						},
						{
							key: 'ccgo1R4MEqs',
							path: 'monday',
							type: 'object'
						},
						{
							key: 'HFQaJn_Ugr3',
							path: 'monday->closing_time',
							type: 'string'
						},
						{
							key: 'RC83I20eOZz',
							path: 'monday->opening_time',
							type: 'string'
						},
						{
							key: 'RDWYp8prwiv',
							path: 'saturday',
							type: 'object'
						},
						{
							key: '9dTmCwouav5',
							path: 'saturday->closing_time',
							type: 'string'
						},
						{
							key: 'jQ9B7GOBzDm',
							path: 'saturday->opening_time',
							type: 'string'
						},
						{
							key: '5g3TRFjRaNe',
							path: 'thursday',
							type: 'object'
						},
						{
							key: '3GDVQmJMQ0W',
							path: 'thursday->closing_time',
							type: 'string'
						},
						{
							key: 'Ucn2gKwA0TA',
							path: 'thursday->opening_time',
							type: 'string'
						},
						{
							key: 'OjaWxW9lT8m',
							path: 'tuesday',
							type: 'object'
						},
						{
							key: '0v3a5uX0pyx',
							path: 'tuesday->closing_time',
							type: 'string'
						},
						{
							key: 'gxbkQ1SbdeR',
							path: 'tuesday->opening_time',
							type: 'string'
						},
						{
							key: '_fp3_OC94tG',
							path: 'wednesday',
							type: 'object'
						},
						{
							key: 'CbtA5WFn1OK',
							path: 'wednesday->closing_time',
							type: 'string'
						},
						{
							key: 'cZ1waEE9d8h',
							path: 'wednesday->opening_time',
							type: 'string'
						},
						{
							key: 'qBmHeTYGlNJ',
							path: 'sunday',
							type: 'object'
						},
						{
							key: 'dVOqZwf-AYs',
							path: 'sunday->closing_time',
							type: 'string'
						},
						{
							key: '9CgwpkcKylH',
							path: 'sunday->opening_time',
							type: 'string'
						},
						{
							key: 'k4y2gV0sb0d',
							path: 'meta',
							type: 'object'
						},
						{
							key: 'lh652RKTJsT',
							path: 'meta->license',
							type: 'object'
						},
						{
							key: 'GLEl2QbANqN',
							path: 'meta->license->name',
							type: 'string'
						},
						{
							key: 'yClMGoPv5NR',
							path: 'meta->license->id',
							type: 'string'
						},
						{
							key: '0mjr6hsWvcr',
							path: 'address',
							type: 'object'
						},
						{
							key: 'XrkYMcqiUhF',
							path: 'address->city',
							type: 'string'
						},
						{
							key: 'oTFOpkXCl-L',
							path: 'address->postcode',
							type: 'string'
						},
						{
							key: 'tS0r4eGgDUL',
							path: 'address->line_1',
							type: 'string'
						},
						{
							key: 'MqNNgt3Y9yY',
							path: 'address->line_2',
							type: 'string'
						},
						{
							key: '41vWiAj_u27',
							path: 'address->line_3',
							type: 'string'
						},
						{
							key: 'suS-m6CMB4o',
							path: 'address->state',
							type: 'string'
						},
						{
							key: 'doFuilEg9bv',
							path: 'address->country_code',
							type: 'string'
						},
						{
							key: '-8c4k6WHNlJ',
							path: 'address->county',
							type: 'string'
						},
						{
							key: 'BYfBAl6BWXo',
							path: 'id',
							type: 'string'
						},
						{
							key: 'ibggfkZlVq3',
							path: 'location',
							type: 'object'
						},
						{
							key: 'Y_RX63aiCsv',
							path: 'location->longitude',
							type: 'number'
						},
						{
							key: 'u1A2Sc8ZUS1',
							path: 'location->latitude',
							type: 'number'
						},
						{
							key: 'p_ZwWE-LpIQ',
							path: 'located_at',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '7ANu8gvrui0',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'R-7hn5iUbki',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'QVYv3UGQpj4',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'pCGB2sdmwsu',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 1,
				section: {
					tag: 'ATM',
					title: 'Get Bank ATM',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about ATM for a single bank specified by BANK_ID and ATM_ID including:\n\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n\n\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms/ATM_ID',
					exampleResponseBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'uv_VHFbLVGN',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'MVg-Amh8jmJ',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'YNzhf_qu3Wb',
							code: 'OBP-30009',
							description: 'ATM not found. Please specify a valid value for ATM_ID.'
						},
						{
							key: 'b7_8wE4h8LF',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 2,
				section: {
					tag: 'ATM',
					title: 'Get Bank ATMS',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about ATMs for a single bank specified by BANK_ID including:\n\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n\nPagination:\n\nBy default, 100 records are returned.\n\nYou can use the url query parameters *limit* and *offset* for pagination\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/atms',
					exampleResponseBody: '{\n  "id": "atm-id-123",\n  "bank_id": "GENODEM1GLS",\n  "name": "Atm by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "monday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "tuesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "wednesday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "thursday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "friday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "saturday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "sunday": {\n    "opening_time": "10:00",\n    "closing_time": "18:00"\n  },\n  "is_accessible": "true",\n  "located_at": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "has_deposit_capability": "true"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'ehSI3GqdgXU',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'XGGs1mo4TI6',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'IalHjH8rgT6',
							code: '<no code>',
							description: 'No ATMs available. License may not be set.'
						},
						{
							key: 'A7BDBMDSj-B',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 3,
				section: {
					tag: 'Account',
					title: 'Check Available Funds',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Check Available Funds\nMandatory URL parameters:\n\n* amount=NUMBER\n* currency=STRING\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/funds-available',
					exampleResponseBody: '{\n  "answer": "yes",\n  "date": "2019-09-03T17:59:14Z",\n  "available_funds_request_id": "c4ykz59svsr9b7fmdxk8ezs7"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'WHGvCsMDgV_',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Pz3GD9tfBoo',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '9RTtSi3UH2T',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'd3aOp7cIBES',
							code: 'OBP-20054',
							description: 'Invalid amount. Please specify a valid value for amount.'
						},
						{
							key: '9rfRt0mZlKV',
							code: 'OBP-10003',
							description: 'Invalid Currency Value. It should be three letters ISO Currency Code. '
						},
						{
							key: 'x9d_P2QRxEo',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 4,
				section: {
					tag: 'Account',
					title: 'Create Account',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Create Account at bank specified by BANK_ID with Id specified by ACCOUNT_ID.\n\nThe User can create an Account for themself  - or -  the User that has the USER_ID specified in the POST body.\n\nIf the PUT body USER_ID *is* specified, the logged in user must have the Role canCreateAccount. Once created, the Account will be owned by the User specified by USER_ID.\n\nIf the PUT body USER_ID is *not* specified, the account will be owned by the logged in User.\n\nThe \'type\' field SHOULD be a product_code from Product.\nIf the type matches a product_code from Product, account attributes will be created that match the Product Attributes.\n\nNote: The Amount MUST be zero.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
					exampleRequestBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "label": "Label",\n  "type": "CURRENT",\n  "balance": {\n    "currency": "EUR",\n    "amount": "0"\n  },\n  "branch_id": "1234",\n  "account_routing": {\n    "scheme": "OBP",\n    "address": "UK123456"\n  }\n}',
					exampleResponseBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "label": "My Account",\n  "type": "AC",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "branch_id": "DERBY6",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  },\n  "account_attributes": [\n    {\n      "product_code": "saving1",\n      "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
					typedBody: [{
							key: 'ug01LBEBn-6',
							path: 'type',
							type: 'object'
						},
						{
							key: '8HvgQ9IrNHi',
							path: 'branch_id',
							type: 'string'
						},
						{
							key: 'OaCIPOBGOW_',
							path: 'label',
							type: 'string'
						},
						{
							key: '61dnw3wzCDc',
							path: 'type',
							type: 'string'
						},
						{
							key: 'qblgwbECCMm',
							path: 'balance',
							type: 'object'
						},
						{
							key: '9HIU9WCBJhZ',
							path: 'balance->amount',
							type: 'string'
						},
						{
							key: '9BDNrHavcQK',
							path: 'balance->currency',
							type: 'string'
						},
						{
							key: '6Dx61kVYpN4',
							path: 'account_routing',
							type: 'object'
						},
						{
							key: 'jux1aONkHmi',
							path: 'account_routing->address',
							type: 'string'
						},
						{
							key: '8X3FBCOTT0D',
							path: 'account_routing->scheme',
							type: 'string'
						},
						{
							key: 'BFK1LJfrAZz',
							path: 'user_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'FjM4KlA5fNt',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'AlQ1YcnS2nL',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'Kf5l0FP6vf6',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Oaj8f-25eli',
							code: 'OBP-30107',
							description: 'Invalid User Id.'
						},
						{
							key: 'A4lgkGmQ6CP',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: '7mFsPqAdBfY',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: '38XuzOFNXhj',
							code: 'OBP-20005',
							description: 'User not found. Please specify a valid value for USER_ID.'
						},
						{
							key: 'AN8fMOtd3Jm',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'AFRuhCAixsg',
							code: 'OBP-30106',
							description: 'Invalid Balance Amount.'
						},
						{
							key: 'W_tkOAIX-hi',
							code: 'OBP-30112',
							description: 'Invalid Number. Initial balance must be a number, e.g 1000.00'
						},
						{
							key: 'kHUYEKSyLTX',
							code: 'OBP-30109',
							description: 'Initial Balance of Account must be Zero (0).'
						},
						{
							key: 'SSq0FQIhyAl',
							code: 'OBP-30105',
							description: 'Invalid Balance Currency.'
						},
						{
							key: 'y4UuwW4bK1P',
							code: 'OBP-30208',
							description: 'Account_ID already exists at the Bank.'
						},
						{
							key: 'GXSIzW0REPS',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 5,
				section: {
					tag: 'Account',
					title: 'Create Account Attribute',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: ' Create Account Attribute\n\n\nAccount Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Account Attribute is linked to its Account by ACCOUNT_ID\n\n\n       \n\nTypical account attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attribute',
					exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					exampleResponseBody: '{\n  "product_code": "saving1",\n  "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					typedBody: [{
							key: '-zMDfUYhPJ5',
							path: 'type',
							type: 'object'
						},
						{
							key: 'um9A9s3SGdz',
							path: 'value',
							type: 'string'
						},
						{
							key: 'm62i196P6xf',
							path: 'type',
							type: 'string'
						},
						{
							key: 'MUOGcaqxbZj',
							path: 'name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'TwQg1eBRYUa',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Sab5yc3civT',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'ITkI81Ycyn0',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 6,
				section: {
					tag: 'Account',
					title: 'Get Account by Id (Core)',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Information returned about the account specified by ACCOUNT_ID:\n\n* Number - The human readable account number given by the bank that identifies the account.\n* Label - A label given by the owner of the account\n* Owners - Users that own this account\n* Type - The type of account\n* Balance - Currency and Value\n* Account Routings - A list that might include IBAN or national account identifiers\n* Account Rules - A list that might include Overdraft and other bank specific rules\n\nThis call returns the owner view and requires access to that view.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/account',
					exampleResponseBody: '{\n  "id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "bank_id": "GENODEM1GLS",\n  "label": "My Account",\n  "number": "546387432",\n  "owners": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  ],\n  "type": "AC",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "account_routings": [\n    {\n      "scheme": "AccountNumber",\n      "address": "4930396"\n    }\n  ],\n  "views_basic": [\n    {\n      "id": "owner",\n      "short_name": "Owner",\n      "description": "This view is for the owner for the account.",\n      "is_public": false\n    }\n  ],\n  "account_attributes": [\n    {\n      "product_code": "saving1",\n      "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '_t32pcFpEDr',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'xR5TMKjbMxl',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 7,
				section: {
					tag: 'Account',
					title: 'Get Account by Id (Full)',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Information returned about an account specified by ACCOUNT_ID as moderated by the view (VIEW_ID):\n\n* Number\n* Owners\n* Type\n* Balance\n* IBAN\n* Available views (sorted by short_name)\n\nMore details about the data moderation by the view [here](#1_2_1-getViewsForBankAccount).\n\nPSD2 Context: PSD2 requires customers to have access to their account information via third party applications.\nThis call provides balance and other account information via delegated authentication using OAuth.\n\nAuthentication is required if the \'is_public\' field in view (VIEW_ID) is not set to `true`.\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/account',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "label": "NoneLabel",\n  "number": "123",\n  "owners": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  ],\n  "type": "OBP",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "views_available": [\n    {\n      "id": "123",\n      "short_name": "short_name",\n      "description": "description",\n      "is_public": true,\n      "alias": "None",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true\n    }\n  ],\n  "bank_id": "GENODEM1GLS",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  },\n  "account_attributes": [\n    {\n      "product_code": "saving1",\n      "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'OlnjjBBgJ5H',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 's8miO7pP8d9',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'VCT0O9ujtaR',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'V1xyWC8VM6e',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'TSASr1FEWEV',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 8,
				section: {
					tag: 'Account',
					title: 'Get Accounts at Bank (IDs only).',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns only the list of accounts ids at BANK_ID that the user has access to.\n\nEach account must have at least one private View.\n\nFor each account the API returns its account ID.\n\nIf you want to see more information on the Views, use the Account Detail call.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/account_ids/private',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'PDcNR5d9zYG',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'NwWn9vK3Ex7',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'IwMNt49xo1A',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 9,
				section: {
					tag: 'Account',
					title: 'Get Accounts at Bank (Minimal).',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the minimal list of private accounts at BANK_ID that the user has access to.\nFor each account, the API returns the ID, routing addresses and the views available to the current user.\n\nIf you want to see more information on the Views, use the Account Detail call.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/private',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "label": "String",\n      "bank_id": "GENODEM1GLS",\n      "account_type": "330",\n      "account_routings": [\n        {\n          "scheme": "AccountNumber",\n          "address": "4930396"\n        }\n      ],\n      "views": [\n        {\n          "id": "owner",\n          "short_name": "Owner",\n          "description": "This view is for the owner for the account.",\n          "is_public": false\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'ge3-ZL5YhwB',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'T1DPwwGaYe3',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '7-UAAKvZNsr',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 10,
				section: {
					tag: 'Account',
					title: 'Get Accounts at Bank.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\nReturns the list of accounts at BANK_ID that the user has access to.\nFor each account the API returns the account ID and the views available to the user..\nEach account must have at least one private View.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "label": "NoneLabel",\n      "bank_id": "GENODEM1GLS",\n      "views_available": [\n        {\n          "id": "1",\n          "short_name": "HHH",\n          "is_public": true\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'Ox9gr3jeZJA',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'tbvkxBzajKU',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 11,
				section: {
					tag: 'Account',
					title: 'Get Accounts Balances',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the Balances for the Accounts of the current User at one bank.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/balances',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n      "label": "My Account",\n      "bank_id": "GENODEM1GLS",\n      "account_routings": [\n        {\n          "scheme": "accountNumber",\n          "address": "123456"\n        }\n      ],\n      "balance": {\n        "currency": "EUR",\n        "amount": "100"\n      }\n    }\n  ],\n  "overall_balance": {\n    "currency": "EUR",\n    "amount": "100"\n  },\n  "overall_balance_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [],
					possibleErrors: [{
						key: 'tnpEzpF_3j',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 12,
				section: {
					tag: 'Account',
					title: 'Get Accounts Held',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get Accounts held by the current User if even the User has not been assigned the owner View yet.\n\nCan be used to onboard the account to the API - since all other account and transaction endpoints require views to be assigned.\n\n\noptional request parameters:\n\n* account_type_filter: one or many accountType value, split by comma\n* account_type_filter_operation: the filter type of account_type_filter, value must be INCLUDE or EXCLUDE\n\nwhole url example:\n/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held?account_type_filter=330,CURRENT+PLUS&account_type_filter_operation=INCLUDE\n    \n\nAuthentication is Mandatory\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts-held',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "12314",\n      "bank_id": "123",\n      "number": "123",\n      "account_routings": [\n        {\n          "scheme": "AccountNumber",\n          "address": "4930396"\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
						key: '_UvPrHWMY9w',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 13,
				section: {
					tag: 'Account',
					title: 'Get Checkbook orders',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '**NOTE: This endpoint currently only returns example data.**\n\n      Get all checkbook orders',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/checkbook/orders',
					exampleResponseBody: '{\n  "account": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n    "account_type": "330",\n    "account_routings": [\n      {\n        "scheme": "AccountNumber",\n        "address": "4930396"\n      }\n    ],\n    "branch_routings": [\n      {\n        "scheme": "BranchNumber",\n        "address": "678"\n      }\n    ]\n  },\n  "orders": [\n    {\n      "order": {\n        "order_id": "xjksajfkj",\n        "order_date": "07082013",\n        "number_of_checkbooks": "4",\n        "distribution_channel": "1201",\n        "status": "2",\n        "first_check_number": "5165276",\n        "shipping_code": "1"\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'v2r3rFrPnd1',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Zj3A_UvtJbf',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '7kViPIbHyrS',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'FsmlLQEb7Wu',
							code: 'OBP-50211',
							description: 'Connector did not return the set of check book.'
						},
						{
							key: '6hRVcVDBnRR',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 14,
				section: {
					tag: 'Account',
					title: 'Update Account Attribute',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: ' Update Account Attribute\n\n\nAccount Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Account Attribute is linked to its Account by ACCOUNT_ID\n\n\n       \n\nTypical account attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/products/PRODUCT_CODE/attributes/ACCOUNT_ATTRIBUTE_ID',
					exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					exampleResponseBody: '{\n  "product_code": "saving1",\n  "account_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					typedBody: [{
							key: 'NK2BzDFgXh',
							path: 'type',
							type: 'object'
						},
						{
							key: 'ReQFDNok6Q',
							path: 'value',
							type: 'string'
						},
						{
							key: 'Fxxsmclrn3',
							path: 'type',
							type: 'string'
						},
						{
							key: '8Y3LWFokES',
							path: 'name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'KTLDbKNDV6',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '0L7aq5Fbsf',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'Qv7xWi9Y0l',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 15,
				section: {
					tag: 'Account',
					title: 'Update Account Label.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Update the label for the account. The label is how the account is known to the account owner e.g. \'My savings account\'\n\n\nAuthentication is Mandatory\n\n       ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
					exampleRequestBody: '{\n  "id": "123123",\n  "label": "label",\n  "bank_id": "GENODEM1GLS"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: '1mZvtLm1hzl',
							path: 'type',
							type: 'object'
						},
						{
							key: 'zs6FbjYAkm2',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: 'MKo_S76mVNg',
							path: 'label',
							type: 'string'
						},
						{
							key: 'TuJPB42AYb7',
							path: 'id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'Vp94os72SnC',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'Y1uboPFSFgA',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'USXstYbROnL',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'Ryx8pvjX-dP',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '01kELflYbg0',
							code: '<no code>',
							description: 'user does not have access to owner view on account'
						}
					]
				}
			},
			{
				index: 16,
				section: {
					tag: 'Account',
					title: 'Update Account.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the account. \n\nAuthentication is Mandatory\n\n       ',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID',
					exampleRequestBody: '{\n  "label": "Label",\n  "type": "CURRENT",\n  "branch_id": "1234",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  }\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "label": "Label",\n  "type": "CURRENT",\n  "branch_id": "1234",\n  "account_routing": {\n    "scheme": "AccountNumber",\n    "address": "4930396"\n  }\n}',
					typedBody: [{
							key: 'x8iakuMMY0N',
							path: 'type',
							type: 'object'
						},
						{
							key: 'vhaG_4tEzGQ',
							path: 'account_routing',
							type: 'object'
						},
						{
							key: 'PtHq6DBjuwR',
							path: 'account_routing->address',
							type: 'string'
						},
						{
							key: '3gz8MTfJLLj',
							path: 'account_routing->scheme',
							type: 'string'
						},
						{
							key: '0p0EyWAD-tZ',
							path: 'branch_id',
							type: 'string'
						},
						{
							key: 'NFx-LpbfOSE',
							path: 'type',
							type: 'string'
						},
						{
							key: 'oifmXZFkSAE',
							path: 'label',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'mFopMuwlIIt',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '-Xn6vb7_jws',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'jSoozdD0FYs',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'yp77jzJ-ZE3',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						}
					]
				}
			},
			{
				index: 17,
				section: {
					tag: 'Account Application',
					title: 'Create Account Application',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: ' Create Account Application\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications',
					exampleRequestBody: '{\n  "product_code": "saveing1",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
					exampleResponseBody: '{\n  "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n  "product_code": "saveing1",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith"\n  },\n  "customer": {\n    "bank_id": "GENODEM1GLS",\n    "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n    "customer_number": "5987953",\n    "legal_name": "Eveline Tripman",\n    "mobile_phone_number": "+44 07972 444 876",\n    "email": "eveline@example.com",\n    "face_image": {\n      "url": "www.openbankproject",\n      "date": "2017-09-19T00:00:00Z"\n    },\n    "date_of_birth": "2017-09-19T00:00:00Z",\n    "relationship_status": "single",\n    "dependants": 10,\n    "dob_of_dependants": [\n      "2017-09-19T00:00:00Z"\n    ],\n    "credit_rating": {\n      "rating": "OBP",\n      "source": "OBP"\n    },\n    "credit_limit": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "highest_education_attained": "Master",\n    "employment_status": "worker",\n    "kyc_status": true,\n    "last_ok_date": "2017-09-19T00:00:00Z",\n    "title": "Dr.",\n    "branchId": "DERBY6",\n    "nameSuffix": "Sr"\n  },\n  "date_of_application": "2017-09-19T00:00:00Z",\n  "status": "REQUESTED"\n}',
					typedBody: [{
							key: 'tmQQG5jvNOT',
							path: 'type',
							type: 'object'
						},
						{
							key: 'rqlZKiFrb-i',
							path: 'customer_id',
							type: 'string'
						},
						{
							key: '49FjV-XDJz_',
							path: 'user_id',
							type: 'string'
						},
						{
							key: 'gtDA2IOWDCY',
							path: 'product_code',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'DVVL8m8EoPi',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'BmaqLpeXrUR',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 18,
				section: {
					tag: 'Account Application',
					title: 'Get Account Application by Id',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the Account Application.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID',
					exampleResponseBody: '{\n  "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n  "product_code": "saveing1",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith"\n  },\n  "customer": {\n    "bank_id": "GENODEM1GLS",\n    "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n    "customer_number": "5987953",\n    "legal_name": "Eveline Tripman",\n    "mobile_phone_number": "+44 07972 444 876",\n    "email": "eveline@example.com",\n    "face_image": {\n      "url": "www.openbankproject",\n      "date": "2017-09-19T00:00:00Z"\n    },\n    "date_of_birth": "2017-09-19T00:00:00Z",\n    "relationship_status": "single",\n    "dependants": 10,\n    "dob_of_dependants": [\n      "2017-09-19T00:00:00Z"\n    ],\n    "credit_rating": {\n      "rating": "OBP",\n      "source": "OBP"\n    },\n    "credit_limit": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "highest_education_attained": "Master",\n    "employment_status": "worker",\n    "kyc_status": true,\n    "last_ok_date": "2017-09-19T00:00:00Z",\n    "title": "Dr.",\n    "branchId": "DERBY6",\n    "nameSuffix": "Sr"\n  },\n  "date_of_application": "2017-09-19T00:00:00Z",\n  "status": "REQUESTED"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'i5bSMPfP',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'DSc5dyzpV',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'otqfSs3ED',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 19,
				section: {
					tag: 'Account Application',
					title: 'Get Account Applications',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the Account Applications.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications',
					exampleResponseBody: '{\n  "account_applications": [\n    {\n      "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n      "product_code": "saveing1",\n      "user": {\n        "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n        "email": "eveline@example.com",\n        "provider_id": "Chris",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      },\n      "customer": {\n        "bank_id": "GENODEM1GLS",\n        "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n        "customer_number": "5987953",\n        "legal_name": "Eveline Tripman",\n        "mobile_phone_number": "+44 07972 444 876",\n        "email": "eveline@example.com",\n        "face_image": {\n          "url": "www.openbankproject",\n          "date": "2017-09-19T00:00:00Z"\n        },\n        "date_of_birth": "2017-09-19T00:00:00Z",\n        "relationship_status": "single",\n        "dependants": 10,\n        "dob_of_dependants": [\n          "2017-09-19T00:00:00Z"\n        ],\n        "credit_rating": {\n          "rating": "OBP",\n          "source": "OBP"\n        },\n        "credit_limit": {\n          "currency": "EUR",\n          "amount": "10"\n        },\n        "highest_education_attained": "Master",\n        "employment_status": "worker",\n        "kyc_status": true,\n        "last_ok_date": "2017-09-19T00:00:00Z",\n        "title": "Dr.",\n        "branchId": "DERBY6",\n        "nameSuffix": "Sr"\n      },\n      "date_of_application": "2017-09-19T00:00:00Z",\n      "status": "REQUESTED"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'o-IlDhPSgM',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Ph36fyfTcT',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'PBRKJrev-w',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 20,
				section: {
					tag: 'Account Application',
					title: 'Update Account Application Status',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update an Account Application status\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-applications/ACCOUNT_APPLICATION_ID',
					exampleRequestBody: '{\n  "status": "ACCEPTED"\n}',
					exampleResponseBody: '{\n  "account_application_id": "gc23a7e2-7dd2-4bdf-a0b4-ae31232a4763",\n  "product_code": "saveing1",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith"\n  },\n  "customer": {\n    "bank_id": "GENODEM1GLS",\n    "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n    "customer_number": "5987953",\n    "legal_name": "Eveline Tripman",\n    "mobile_phone_number": "+44 07972 444 876",\n    "email": "eveline@example.com",\n    "face_image": {\n      "url": "www.openbankproject",\n      "date": "2017-09-19T00:00:00Z"\n    },\n    "date_of_birth": "2017-09-19T00:00:00Z",\n    "relationship_status": "single",\n    "dependants": 10,\n    "dob_of_dependants": [\n      "2017-09-19T00:00:00Z"\n    ],\n    "credit_rating": {\n      "rating": "OBP",\n      "source": "OBP"\n    },\n    "credit_limit": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "highest_education_attained": "Master",\n    "employment_status": "worker",\n    "kyc_status": true,\n    "last_ok_date": "2017-09-19T00:00:00Z",\n    "title": "Dr.",\n    "branchId": "DERBY6",\n    "nameSuffix": "Sr"\n  },\n  "date_of_application": "2017-09-19T00:00:00Z",\n  "status": "REQUESTED"\n}',
					typedBody: [{
							key: 'SVUN9OuOUBE',
							path: 'type',
							type: 'object'
						},
						{
							key: '5Nyygoi2TJh',
							path: 'status',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'zVwzPcxBhEq',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'sGjLk3e24LQ',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '8_jSmWvsmVl',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 21,
				section: {
					tag: 'Account Public',
					title: 'Get Public Account by Id',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\nReturns information about an account that has a public view.\n\nThe account is specified by ACCOUNT_ID. The information is moderated by the view specified by VIEW_ID.\n\n* Number\n* Owners\n* Type\n* Balance\n* Routing\n\n\nPSD2 Context: PSD2 requires customers to have access to their account information via third party applications.\nThis call provides balance and other account information via delegated authentication using OAuth.\n\nAuthentication is Optional\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/public/accounts/ACCOUNT_ID/VIEW_ID/account',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "bank_id": "String",\n  "label": "String",\n  "number": "String",\n  "owners": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  ],\n  "type": "String",\n  "balance": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "account_routings": [\n    {\n      "scheme": "AccountNumber",\n      "address": "4930396"\n    }\n  ],\n  "account_rules": [\n    {\n      "scheme": "OVERDRAFT",\n      "value": "10"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'cTNbkZmUIcl',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'cnKVrvOixaP',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'A85h4n3w-YK',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'NDEkgFoxzlA',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 22,
				section: {
					tag: 'Account Public',
					title: 'Get Public Accounts at all Banks.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get public accounts at all banks (Anonymous access).\nReturns accounts that contain at least one public view (a view where is_public is true)\nFor each account the API returns the ID and the available views.\n\nAuthentication is Optional\n\n',
					specificUrl: '/obp/v4.0.0/accounts/public',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "label": "NoneLabel",\n      "bank_id": "GENODEM1GLS",\n      "views_available": [\n        {\n          "id": "1",\n          "short_name": "HHH",\n          "is_public": true\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'zMXUzjkNPA',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'PZvrXuakA4',
							code: '<no code>',
							description: 'Could not get accounts.'
						},
						{
							key: 'W2jBuhNApw',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 23,
				section: {
					tag: 'Account Public',
					title: 'Get Public Accounts at Bank',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.\n\nAuthentication is Optional\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/public',
					exampleResponseBody: '{\n  "accounts": [\n    {\n      "id": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "label": "NoneLabel",\n      "bank_id": "GENODEM1GLS",\n      "views_available": [\n        {\n          "id": "1",\n          "short_name": "HHH",\n          "is_public": true\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
						key: 'pSmGTelCvpU',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 24,
				section: {
					tag: 'Bank',
					title: 'Create Transaction Type at bank',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Create Transaction Types for the bank specified by BANK_ID:\n\n  * id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\n  * bank_id : The bank that supports this TransactionType\n  * short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\n  * summary : A succinct summary\n  * description : A longer description\n  * charge : The charge to the customer for each one of these\n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types',
					exampleRequestBody: '{\n  "id": {\n    "value": "123"\n  },\n  "bank_id": "GENODEM1GLS",\n  "short_code": "PlaceholderString",\n  "summary": "PlaceholderString",\n  "description": "PlaceholderString",\n  "charge": {\n    "currency": "EUR",\n    "amount": "10"\n  }\n}',
					exampleResponseBody: '{\n  "id": {\n    "value": "123"\n  },\n  "bankId": {\n    "value": "gh.uk.9j"\n  },\n  "shortCode": "80080",\n  "summary": "SANDBOX_TAN",\n  "description": "This is the sandbox mode, charging litter money.",\n  "charge": {\n    "currency": "EUR",\n    "amount": "100"\n  }\n}',
					typedBody: [{
							key: 'lAA_0D1r4Cq',
							path: 'type',
							type: 'object'
						},
						{
							key: 'w1QybcWU9mh',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: '-0jeAuSwYZE',
							path: 'charge',
							type: 'object'
						},
						{
							key: 'NewXJiXs2lZ',
							path: 'charge->amount',
							type: 'string'
						},
						{
							key: 'YkEM2LkpzX6',
							path: 'charge->currency',
							type: 'string'
						},
						{
							key: 'mkuKRli1tfE',
							path: 'description',
							type: 'string'
						},
						{
							key: 'xuz5EhXrdsH',
							path: 'short_code',
							type: 'string'
						},
						{
							key: 'KdLMdj8F-Kv',
							path: 'summary',
							type: 'string'
						},
						{
							key: '1AB0wfHypeL',
							path: 'id',
							type: 'object'
						},
						{
							key: 'kZC0rpjehaI',
							path: 'id->value',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'ww2tE_VEqPt',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'KQ1naF41Djd',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'JAQcbUUCbwr',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'lRkIX3Wfz-d',
							code: 'OBP-40005',
							description: 'Insufficient authorisation to Create Transaction Type offered by the bank. The Request could not be created because you don\'t have access to CanCreateTransactionType.'
						},
						{
							key: 'TOmkvUk7j0z',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 25,
				section: {
					tag: 'Bank',
					title: 'Get Bank',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the bank specified by BANK_ID\nReturns information about a single bank specified by BANK_ID including:\n\n* Short and full name of bank\n* Logo URL\n* Website',
					specificUrl: '/obp/v4.0.0/banks/BANK_ID',
					exampleResponseBody: '{\n  "id": "gh.29.uk",\n  "short_name": "short_name ",\n  "full_name": "full_name",\n  "logo": "logo",\n  "website": "www.openbankproject.com",\n  "bank_routing": {\n    "scheme": "Bank_ID",\n    "address": "gh.29.uk"\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'tBA9WhJ8_Ud',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'NJWyY8VJvCu',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: '4U4hfCwc_ly',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						}
					]
				}
			},
			{
				index: 26,
				section: {
					tag: 'Bank',
					title: 'Get Transaction Types at Bank',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get Transaction Types for the bank specified by BANK_ID:\n\nLists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).\n\n  * id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\n  * bank_id : The bank that supports this TransactionType\n  * short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\n  * summary : A succinct summary\n  * description : A longer description\n  * charge : The charge to the customer for each one of these\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-types',
					exampleResponseBody: '{\n  "transaction_types": [\n    {\n      "id": {\n        "value": "123"\n      },\n      "bank_id": "GENODEM1GLS",\n      "short_code": "PlaceholderString",\n      "summary": "PlaceholderString",\n      "description": "PlaceholderString",\n      "charge": {\n        "currency": "EUR",\n        "amount": "10"\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'IpD74fTTN9r',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '1POn1duKFcW',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 27,
				section: {
					tag: 'Branch',
					title: 'Create Branch',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create Branch for the Bank.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches',
					exampleRequestBody: '{\n  "id": "branch-id-123",\n  "bank_id": "bank-id-123",\n  "name": "Branch by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "String",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 10,\n    "longitude": 10\n  },\n  "meta": {\n    "license": {\n      "id": "PDDL",\n      "name": "Open Data Commons Public Domain Dedication and License "\n    }\n  },\n  "lobby": {\n    "monday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "tuesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "wednesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "thursday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "friday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "saturday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "sunday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ]\n  },\n  "drive_up": {\n    "monday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "tuesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "wednesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "thursday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "friday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "saturday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "sunday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    }\n  },\n  "branch_routing": {\n    "scheme": "OBP",\n    "address": "123abc"\n  },\n  "is_accessible": "true",\n  "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n  "branch_type": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "phone_number": "+381631954907"\n}',
					exampleResponseBody: '{\n  "id": "branch-id-123",\n  "bank_id": "bank-id-123",\n  "name": "Branch by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "String",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 10,\n    "longitude": 10\n  },\n  "meta": {\n    "license": {\n      "id": "PDDL",\n      "name": "Open Data Commons Public Domain Dedication and License "\n    }\n  },\n  "lobby": {\n    "monday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "tuesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "wednesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "thursday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "friday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "saturday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "sunday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ]\n  },\n  "drive_up": {\n    "monday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "tuesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "wednesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "thursday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "friday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "saturday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "sunday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    }\n  },\n  "branch_routing": {\n    "scheme": "OBP",\n    "address": "123abc"\n  },\n  "is_accessible": "true",\n  "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n  "branch_type": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "phone_number": "+381631954907"\n}',
					typedBody: [{
							key: 'rYbXBONOngJ',
							path: 'type',
							type: 'object'
						},
						{
							key: 'JXy5hz6i43T',
							path: 'accessibleFeatures',
							type: 'string'
						},
						{
							key: 'PnnUVDUDSoO',
							path: 'more_info',
							type: 'string'
						},
						{
							key: '563E4qunKvn',
							path: 'branch_type',
							type: 'string'
						},
						{
							key: 'BqStqr9bwTG',
							path: 'name',
							type: 'string'
						},
						{
							key: 'diklA7Taakt',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: 'cY4MLYJ0Xqv',
							path: 'location',
							type: 'object'
						},
						{
							key: 'ueAS1Gqb-4l',
							path: 'location->longitude',
							type: 'number'
						},
						{
							key: 'VjekYZm5qw-',
							path: 'location->latitude',
							type: 'number'
						},
						{
							key: 'pbC4Y9GfAK6',
							path: 'id',
							type: 'string'
						},
						{
							key: 'X_986YHq-5v',
							path: 'is_accessible',
							type: 'string'
						},
						{
							key: 'jQxgT54jFzx',
							path: 'address',
							type: 'object'
						},
						{
							key: 'D88k9MUc0FO',
							path: 'address->city',
							type: 'string'
						},
						{
							key: 'GMfOxrjEJ0V',
							path: 'address->county',
							type: 'string'
						},
						{
							key: 'vUoLsL-RaVE',
							path: 'address->postcode',
							type: 'string'
						},
						{
							key: '0k1M6rlCj47',
							path: 'address->line_1',
							type: 'string'
						},
						{
							key: 'qhunzbNabOj',
							path: 'address->line_2',
							type: 'string'
						},
						{
							key: 'MIyETIk0XCN',
							path: 'address->line_3',
							type: 'string'
						},
						{
							key: 'rn096TgBESZ',
							path: 'address->state',
							type: 'string'
						},
						{
							key: 'KN3ArEpa8M7',
							path: 'address->country_code',
							type: 'string'
						},
						{
							key: 'nJEpBEEfL5m',
							path: 'drive_up',
							type: 'object'
						},
						{
							key: 'fOBdq0-SzXJ',
							path: 'drive_up->friday',
							type: 'object'
						},
						{
							key: 'nNruWNDHugh',
							path: 'drive_up->friday->closing_time',
							type: 'string'
						},
						{
							key: 'WcN2lyoP8g1',
							path: 'drive_up->friday->opening_time',
							type: 'string'
						},
						{
							key: 'v-EaasFzxdP',
							path: 'drive_up->monday',
							type: 'object'
						},
						{
							key: 'Bd34E0fGcY3',
							path: 'drive_up->monday->closing_time',
							type: 'string'
						},
						{
							key: 'LbTFxPoZiDJ',
							path: 'drive_up->monday->opening_time',
							type: 'string'
						},
						{
							key: 'F8VUyiCi3kc',
							path: 'drive_up->saturday',
							type: 'object'
						},
						{
							key: 'R7ZgnlUU4jk',
							path: 'drive_up->saturday->closing_time',
							type: 'string'
						},
						{
							key: '-qFlKLh1sjF',
							path: 'drive_up->saturday->opening_time',
							type: 'string'
						},
						{
							key: '8lPjFXbgq4u',
							path: 'drive_up->thursday',
							type: 'object'
						},
						{
							key: 'HRMnsPjQndT',
							path: 'drive_up->thursday->closing_time',
							type: 'string'
						},
						{
							key: 'puRo5M9556Z',
							path: 'drive_up->thursday->opening_time',
							type: 'string'
						},
						{
							key: 'ddjeFAwZy_t',
							path: 'drive_up->tuesday',
							type: 'object'
						},
						{
							key: 'q_4gm7D5VZ-',
							path: 'drive_up->tuesday->closing_time',
							type: 'string'
						},
						{
							key: '3ySJR35EznY',
							path: 'drive_up->tuesday->opening_time',
							type: 'string'
						},
						{
							key: 'Mge_WOugcaE',
							path: 'drive_up->wednesday',
							type: 'object'
						},
						{
							key: 'VAvciTCxMJw',
							path: 'drive_up->wednesday->closing_time',
							type: 'string'
						},
						{
							key: 'I56xpTVvM8Q',
							path: 'drive_up->wednesday->opening_time',
							type: 'string'
						},
						{
							key: 'SnJYaMECVPI',
							path: 'drive_up->sunday',
							type: 'object'
						},
						{
							key: 'UJy3ZlFGb4J',
							path: 'drive_up->sunday->closing_time',
							type: 'string'
						},
						{
							key: 'dXdQ7LBXqQP',
							path: 'drive_up->sunday->opening_time',
							type: 'string'
						},
						{
							key: 'scc2o60W0k3',
							path: 'branch_routing',
							type: 'object'
						},
						{
							key: 'Uj4-KS6sAwC',
							path: 'branch_routing->address',
							type: 'string'
						},
						{
							key: '1w24Mo4N-Yi',
							path: 'branch_routing->scheme',
							type: 'string'
						},
						{
							key: 'phO5yWzq4WF',
							path: 'phone_number',
							type: 'string'
						},
						{
							key: 'TbugvO7DzTn',
							path: 'meta',
							type: 'object'
						},
						{
							key: 'bFb9ZrUtTW8',
							path: 'meta->license',
							type: 'object'
						},
						{
							key: 'hfjOjlnuDDV',
							path: 'meta->license->name',
							type: 'string'
						},
						{
							key: 'g-grhPUJ8yl',
							path: 'meta->license->id',
							type: 'string'
						},
						{
							key: 'nxizhx_fqdC',
							path: 'lobby',
							type: 'object'
						},
						{
							key: 'yCqXwv8nFPx',
							path: 'lobby->saturday',
							type: 'array'
						},
						{
							key: 'gDRH-6vb-Xa',
							path: 'lobby->saturday->items',
							type: 'object'
						},
						{
							key: 'XFTXMsQ1n-i',
							path: 'lobby->saturday->items->closing_time',
							type: 'string'
						},
						{
							key: 'FMloAoh5iVE',
							path: 'lobby->saturday->items->opening_time',
							type: 'string'
						},
						{
							key: '3KPYV03OJfs',
							path: 'lobby->tuesday',
							type: 'array'
						},
						{
							key: '1vR-XtqwmEj',
							path: 'lobby->tuesday->items',
							type: 'object'
						},
						{
							key: 'lZR6BYvGjZu',
							path: 'lobby->tuesday->items->closing_time',
							type: 'string'
						},
						{
							key: 'KtzEiZ9QttR',
							path: 'lobby->tuesday->items->opening_time',
							type: 'string'
						},
						{
							key: 'CNcGkGfjErH',
							path: 'lobby->monday',
							type: 'array'
						},
						{
							key: 'A2jx4-dz-fF',
							path: 'lobby->monday->items',
							type: 'object'
						},
						{
							key: '3um8UNOf-Fa',
							path: 'lobby->monday->items->closing_time',
							type: 'string'
						},
						{
							key: '85WGOPwGtf7',
							path: 'lobby->monday->items->opening_time',
							type: 'string'
						},
						{
							key: 'Lw9m9BlI-yi',
							path: 'lobby->friday',
							type: 'array'
						},
						{
							key: '4GsTElPGMgy',
							path: 'lobby->friday->items',
							type: 'object'
						},
						{
							key: 'jTN-q1i1MzQ',
							path: 'lobby->friday->items->closing_time',
							type: 'string'
						},
						{
							key: '0O9WI7drCrd',
							path: 'lobby->friday->items->opening_time',
							type: 'string'
						},
						{
							key: 'JF_yeChG1lv',
							path: 'lobby->sunday',
							type: 'array'
						},
						{
							key: 'lr-hMFodKzh',
							path: 'lobby->sunday->items',
							type: 'object'
						},
						{
							key: 'uoSTOrz6HO2',
							path: 'lobby->sunday->items->closing_time',
							type: 'string'
						},
						{
							key: 'c5_cCkM6muh',
							path: 'lobby->sunday->items->opening_time',
							type: 'string'
						},
						{
							key: 'yS2BTgR8PLH',
							path: 'lobby->wednesday',
							type: 'array'
						},
						{
							key: 'JVPo35v9mm9',
							path: 'lobby->wednesday->items',
							type: 'object'
						},
						{
							key: 'LRRyIikXPn2',
							path: 'lobby->wednesday->items->closing_time',
							type: 'string'
						},
						{
							key: 'F9TK8eCZR45',
							path: 'lobby->wednesday->items->opening_time',
							type: 'string'
						},
						{
							key: '-a2-d-BqVBK',
							path: 'lobby->thursday',
							type: 'array'
						},
						{
							key: 'MQeGy81RiXT',
							path: 'lobby->thursday->items',
							type: 'object'
						},
						{
							key: 'XAZ9IEUnsFM',
							path: 'lobby->thursday->items->closing_time',
							type: 'string'
						},
						{
							key: '9-nrhD12kqw',
							path: 'lobby->thursday->items->opening_time',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'XUi_ZfYAyU0',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'E9QQRgPO-2d',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'o3XZLTPdEMh',
							code: 'OBP-30209',
							description: 'Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch.'
						},
						{
							key: 'Pv9jb0YeTYk',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 28,
				section: {
					tag: 'Branch',
					title: 'Delete Branch',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete Branch from given Bank.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'q6gdE0wkoDZ',
							path: 'type',
							type: 'object'
						},
						{
							key: 'pFrCURYEPBj',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'rmqV7gL7nco',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'M5QT6zsZqmO',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'm5pNXCsa21t',
							code: 'OBP-30218',
							description: 'Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch.'
						},
						{
							key: 'lKfztl81NZv',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 29,
				section: {
					tag: 'Branch',
					title: 'Get Branch',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about a single Branch specified by BANK_ID and BRANCH_ID including:\n\n* Name\n* Address\n* Geo Location\n* License the data under this endpoint is released under.\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
					exampleResponseBody: '{\n  "id": "branch-id-123",\n  "bank_id": "bank-id-123",\n  "name": "Branch by the Lake",\n  "address": {\n    "line_1": "No 1 the Road",\n    "line_2": "The Place",\n    "line_3": "The Hill",\n    "city": "Berlin",\n    "county": "String",\n    "state": "Brandenburg",\n    "postcode": "13359",\n    "country_code": "DE"\n  },\n  "location": {\n    "latitude": 10,\n    "longitude": 10\n  },\n  "meta": {\n    "license": {\n      "id": "PDDL",\n      "name": "Open Data Commons Public Domain Dedication and License "\n    }\n  },\n  "lobby": {\n    "monday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "tuesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "wednesday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "thursday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "friday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "saturday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ],\n    "sunday": [\n      {\n        "opening_time": "10:00",\n        "closing_time": "18:00"\n      }\n    ]\n  },\n  "drive_up": {\n    "monday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "tuesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "wednesday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "thursday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "friday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "saturday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    },\n    "sunday": {\n      "opening_time": "10:00",\n      "closing_time": "18:00"\n    }\n  },\n  "branch_routing": {\n    "scheme": "OBP",\n    "address": "123abc"\n  },\n  "is_accessible": "true",\n  "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n  "branch_type": "Full service store",\n  "more_info": "short walk to the lake from here",\n  "phone_number": "+381631954907"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'b2pCJ-8eMC3',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'MYFscR0iBhI',
							code: '<no code>',
							description: 'License may not be set. meta.license.id and eta.license.name can not be empty'
						},
						{
							key: 'xRHJsI6JNq6',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 30,
				section: {
					tag: 'Branch',
					title: 'Get Branches for a Bank',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about branches for a single bank specified by BANK_ID including:\n\n* Name\n* Address\n* Geo Location\n* License the data under this endpoint is released under\n* Structured opening hours\n* Accessible flag\n* Branch Type\n* More Info\n\nPagination:\n\nBy default, 50 records are returned.\n\nYou can use the url query parameters *limit* and *offset* for pagination\nYou can also use the follow url query parameters:\n\n  - city - string, find Branches those in this city, optional\n\n\n  - withinMetersOf - number, find Branches within given meters distance, optional\n  - nearLatitude - number, a position of latitude value, cooperate with withMetersOf do query filter, optional\n  - nearLongitude - number, a position of longitude value, cooperate with withMetersOf do query filter, optional\n\nnote: withinMetersOf, nearLatitude and nearLongitude either all empty or all have value.\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches',
					exampleResponseBody: '{\n  "branches": [\n    {\n      "id": "branch-id-123",\n      "bank_id": "bank-id-123",\n      "name": "Branch by the Lake",\n      "address": {\n        "line_1": "No 1 the Road",\n        "line_2": "The Place",\n        "line_3": "The Hill",\n        "city": "Berlin",\n        "county": "String",\n        "state": "Brandenburg",\n        "postcode": "13359",\n        "country_code": "DE"\n      },\n      "location": {\n        "latitude": 10,\n        "longitude": 10\n      },\n      "meta": {\n        "license": {\n          "id": "PDDL",\n          "name": "Open Data Commons Public Domain Dedication and License "\n        }\n      },\n      "lobby": {\n        "monday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "tuesday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "wednesday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "thursday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "friday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "saturday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ],\n        "sunday": [\n          {\n            "opening_time": "10:00",\n            "closing_time": "18:00"\n          }\n        ]\n      },\n      "drive_up": {\n        "monday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "tuesday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "wednesday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "thursday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "friday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "saturday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        },\n        "sunday": {\n          "opening_time": "10:00",\n          "closing_time": "18:00"\n        }\n      },\n      "branch_routing": {\n        "scheme": "OBP",\n        "address": "123abc"\n      },\n      "is_accessible": "true",\n      "accessibleFeatures": "wheelchair, atm usuable by the visually impaired",\n      "branch_type": "Full service store",\n      "more_info": "short walk to the lake from here",\n      "phone_number": "+381631954907"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '2W40L_ImUwK',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'GU4uoxAyid9',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'TVlLKrgZs0P',
							code: '<no code>',
							description: 'No branches available. License may not be set.'
						},
						{
							key: '-goL0Ib4EVA',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 31,
				section: {
					tag: 'Branch',
					title: 'Update Branch',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update an existing branch for a bank account (Authenticated access).\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/branches/BRANCH_ID',
					exampleRequestBody: '{\n  "bank_id": "gh.29.fi",\n  "name": "OBP",\n  "address": {\n    "line_1": "Osloer Straße 16/17",\n    "line_2": "Wedding",\n    "line_3": "",\n    "city": "Berlin",\n    "state": "Berlin Brandenburg",\n    "postcode": "13359",\n    "country": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "lobby": {\n    "hours": "5"\n  },\n  "drive_up": {\n    "hours": "5"\n  }\n}',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "name": "String",\n  "address": {\n    "line_1": "Osloer Straße 16/17",\n    "line_2": "Wedding",\n    "line_3": "",\n    "city": "Berlin",\n    "state": "Berlin Brandenburg",\n    "postcode": "13359",\n    "country": "DE"\n  },\n  "location": {\n    "latitude": 11.45,\n    "longitude": 11.45\n  },\n  "lobby": {\n    "hours": "5"\n  },\n  "drive_up": {\n    "hours": "5"\n  },\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "branch_routing": {\n    "scheme": "BranchNumber",\n    "address": "678"\n  }\n}',
					typedBody: [{
							key: 'zFM8ILtyEPh',
							path: 'type',
							type: 'object'
						},
						{
							key: 'GwU3b6xzd4H',
							path: 'lobby',
							type: 'object'
						},
						{
							key: 'Ia6srwkz8Qr',
							path: 'lobby->hours',
							type: 'string'
						},
						{
							key: 'zyBM0xcmVZe',
							path: 'name',
							type: 'string'
						},
						{
							key: 'DlQ0zmPWAeK',
							path: 'address',
							type: 'object'
						},
						{
							key: '7azMt5MWIIz',
							path: 'address->line_3',
							type: 'string'
						},
						{
							key: '5cwCoKI85Rb',
							path: 'address->country',
							type: 'string'
						},
						{
							key: 'DBkicU1_DJn',
							path: 'address->city',
							type: 'string'
						},
						{
							key: 'ADiDoTuyrIK',
							path: 'address->line_2',
							type: 'string'
						},
						{
							key: 'cmneXqgbBgB',
							path: 'address->line_1',
							type: 'string'
						},
						{
							key: 'CIvxbMGV2_3',
							path: 'address->state',
							type: 'string'
						},
						{
							key: 'OLqnotpyFO0',
							path: 'address->postcode',
							type: 'string'
						},
						{
							key: 'Ptlcbw58i8I',
							path: 'drive_up',
							type: 'object'
						},
						{
							key: 'BYsphJuqBUx',
							path: 'drive_up->hours',
							type: 'string'
						},
						{
							key: '10O3d66K9GD',
							path: 'meta',
							type: 'object'
						},
						{
							key: 'uDY1ajf_OVj',
							path: 'meta->license',
							type: 'object'
						},
						{
							key: 'g_i5Ym9lGh9',
							path: 'meta->license->name',
							type: 'string'
						},
						{
							key: 'Y6z30pDxFA5',
							path: 'meta->license->id',
							type: 'string'
						},
						{
							key: '-9INlf7FsCC',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: 'CeK9q7fFE7u',
							path: 'location',
							type: 'object'
						},
						{
							key: '0n1Qc41hYP7',
							path: 'location->longitude',
							type: 'number'
						},
						{
							key: 'YpHGfebXpFj',
							path: 'location->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: 'khObb4oZK8-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'qYpR9_UU74X',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'Tm-XgQLV3vB',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '7gopvfkF1NO',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '10UyXW6wSAg',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 32,
				section: {
					tag: 'Card',
					title: 'Create Card',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create Card at bank specified by BANK_ID .\n\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards',
					exampleRequestBody: '{\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "technology": "technology1",\n  "networks": [\n    "network1",\n    "network2"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    },\n    {\n      "requested_date": "2019-09-03T17:59:14Z",\n      "reason_requested": "GOOD_SECURITY_PRACTICE"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
					exampleResponseBody: '{\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "bank_id": "GENODEM1GLS",\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "cancelled": true,\n  "on_hot_list": true,\n  "technology": "technologyString1",\n  "networks": [\n    "networks1"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account": {\n    "id": "123",\n    "label": "OBP",\n    "views_available": [\n      {\n        "id": "123",\n        "short_name": "short_name",\n        "description": "description",\n        "is_public": true,\n        "alias": "None",\n        "hide_metadata_if_alias_used": true,\n        "can_add_comment": true,\n        "can_add_corporate_location": true,\n        "can_add_image": true,\n        "can_add_image_url": true,\n        "can_add_more_info": true,\n        "can_add_open_corporates_url": true,\n        "can_add_physical_location": true,\n        "can_add_private_alias": true,\n        "can_add_public_alias": true,\n        "can_add_tag": true,\n        "can_add_url": true,\n        "can_add_where_tag": true,\n        "can_delete_comment": true,\n        "can_delete_corporate_location": true,\n        "can_delete_image": true,\n        "can_delete_physical_location": true,\n        "can_delete_tag": true,\n        "can_delete_where_tag": true,\n        "can_edit_owner_comment": true,\n        "can_see_bank_account_balance": true,\n        "can_see_bank_account_bank_name": true,\n        "can_see_bank_account_currency": true,\n        "can_see_bank_account_iban": true,\n        "can_see_bank_account_label": true,\n        "can_see_bank_account_national_identifier": true,\n        "can_see_bank_account_number": true,\n        "can_see_bank_account_owners": true,\n        "can_see_bank_account_swift_bic": true,\n        "can_see_bank_account_type": true,\n        "can_see_comments": true,\n        "can_see_corporate_location": true,\n        "can_see_image_url": true,\n        "can_see_images": true,\n        "can_see_more_info": true,\n        "can_see_open_corporates_url": true,\n        "can_see_other_account_bank_name": true,\n        "can_see_other_account_iban": true,\n        "can_see_other_account_kind": true,\n        "can_see_other_account_metadata": true,\n        "can_see_other_account_national_identifier": true,\n        "can_see_other_account_number": true,\n        "can_see_other_account_swift_bic": true,\n        "can_see_owner_comment": true,\n        "can_see_physical_location": true,\n        "can_see_private_alias": true,\n        "can_see_public_alias": true,\n        "can_see_tags": true,\n        "can_see_transaction_amount": true,\n        "can_see_transaction_balance": true,\n        "can_see_transaction_currency": true,\n        "can_see_transaction_description": true,\n        "can_see_transaction_finish_date": true,\n        "can_see_transaction_metadata": true,\n        "can_see_transaction_other_bank_account": true,\n        "can_see_transaction_start_date": true,\n        "can_see_transaction_this_bank_account": true,\n        "can_see_transaction_type": true,\n        "can_see_url": true,\n        "can_see_where_tag": true\n      }\n    ],\n    "bank_id": "GENODEM1GLS"\n  },\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
					typedBody: [{
							key: 'tDZXyqaUDWp',
							path: 'type',
							type: 'object'
						},
						{
							key: '4k8qei9Kn9h',
							path: 'card_number',
							type: 'string'
						},
						{
							key: 'YAj1KuiIQ3W',
							path: 'enabled',
							type: 'boolean'
						},
						{
							key: 'dfY_hstnSz5',
							path: 'allows',
							type: 'array'
						},
						{
							key: 'ue0TJKZSNK-',
							path: 'allows->items',
							type: 'string'
						},
						{
							key: 'TjCFo0MEJrA',
							path: 'technology',
							type: 'string'
						},
						{
							key: 'Xxnw2oc0DM0',
							path: 'card_type',
							type: 'string'
						},
						{
							key: 'OWhunQJtSdw',
							path: 'name_on_card',
							type: 'string'
						},
						{
							key: 'aSfAZ5fjfOa',
							path: 'pin_reset',
							type: 'array'
						},
						{
							key: '_1jva0HTGkp',
							path: 'pin_reset->items',
							type: 'object'
						},
						{
							key: 'TUdytgvIPfB',
							path: 'pin_reset->items->reason_requested',
							type: 'string'
						},
						{
							key: 'OwihNqMi-5N',
							path: 'pin_reset->items->requested_date',
							type: 'string'
						},
						{
							key: 'Js0YMPhE7dx',
							path: 'pin_reset->items->requested_date->format',
							type: 'date-time'
						},
						{
							key: 'qo9xd3jn_YM',
							path: 'customer_id',
							type: 'string'
						},
						{
							key: 'jL3e4zFXxlR',
							path: 'replacement',
							type: 'object'
						},
						{
							key: 'bhiVLva5kFI',
							path: 'replacement->reason_requested',
							type: 'string'
						},
						{
							key: '6a0Jqi9zs62',
							path: 'replacement->requested_date',
							type: 'string'
						},
						{
							key: 'cPtpcD4UntH',
							path: 'replacement->requested_date->format',
							type: 'date-time'
						},
						{
							key: 'zGVzhNVUCiS',
							path: 'valid_from_date',
							type: 'string'
						},
						{
							key: 'u3N-h6Ec783',
							path: 'valid_from_date->format',
							type: 'date-time'
						},
						{
							key: 'hykYyZ_5w9E',
							path: 'networks',
							type: 'array'
						},
						{
							key: 'Jj7iV9iL8Go',
							path: 'networks->items',
							type: 'string'
						},
						{
							key: 'ZWqVww7VP1C',
							path: 'issue_number',
							type: 'string'
						},
						{
							key: 'uQqhW9HDgGU',
							path: 'serial_number',
							type: 'string'
						},
						{
							key: '3TYkyd0R9-b',
							path: 'posted',
							type: 'string'
						},
						{
							key: 'RbfvqgzKKJA',
							path: 'posted->format',
							type: 'date-time'
						},
						{
							key: 'jRGAzFGmVXK',
							path: 'collected',
							type: 'string'
						},
						{
							key: '8MCgY2hQf9U',
							path: 'collected->format',
							type: 'date-time'
						},
						{
							key: 'mpOKU-spLtj',
							path: 'expires_date',
							type: 'string'
						},
						{
							key: '1V7fi0B4l2H',
							path: 'expires_date->format',
							type: 'date-time'
						},
						{
							key: 'S2KHhg1gofK',
							path: 'account_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '8nh3E4eYFtO',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'OM5cOJI5XLp',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'ZlOapb9uSae',
							code: 'OBP-10015',
							description: 'Allowed values are'
						},
						{
							key: '6m5hFPySJ7g',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 33,
				section: {
					tag: 'Card',
					title: 'Create Card Attribute',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: ' Create Card Attribute\n\nCard Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Card Attribute is linked to its Card by CARD_ID\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attribute',
					exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DOUBLE",\n  "value": "2012-04-23"\n}',
					exampleResponseBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "attribute_type": {\n    "i": 2,\n    "name": "DOUBLE"\n  },\n  "bank_id": {\n    "value": "GENODEM1GLS"\n  },\n  "value": "2012-04-23",\n  "card_attribute_id": "b4e0352a-9a0f-4bfa-b30b-9003aa467f50"\n}',
					typedBody: [{
							key: 'iHOqgl5xYol',
							path: 'type',
							type: 'object'
						},
						{
							key: 'ARz22ysg2XS',
							path: 'value',
							type: 'string'
						},
						{
							key: 'J4OhXaK7hKG',
							path: 'type',
							type: 'string'
						},
						{
							key: 'GdxtuwKt3h-',
							path: 'name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'jhG_xtpEFX9',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Q8peSc-HHlJ',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'TeEjJC-8L44',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 34,
				section: {
					tag: 'Card',
					title: 'Delete Card',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete a Card at bank specified by CARD_ID .\n\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'YUGU7YiItcD',
							path: 'type',
							type: 'object'
						},
						{
							key: '-J5ZrlUtUTr',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'Wmx7Lip4YLr',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '_HSaWYpKzHR',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'oTokkvArAIk',
							code: 'OBP-10015',
							description: 'Allowed values are'
						},
						{
							key: 'ePY1I1mJhJB',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 35,
				section: {
					tag: 'Card',
					title: 'Get Card By Id',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\nThis will the datails of the card.\nIt shows the account infomation which linked the the card.\nAlso shows the card attributes of the card. \n\n       ',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
					exampleResponseBody: '{\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "bank_id": "GENODEM1GLS",\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "cancelled": true,\n  "on_hot_list": true,\n  "technology": "technologyString1",\n  "networks": [\n    "networks1"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account": {\n    "id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n    "label": "My Account",\n    "views_available": [\n      {\n        "id": "owner",\n        "name": "Owner",\n        "description": "This view is for the owner for the account."\n      }\n    ],\n    "bank_id": "GENODEM1GLS"\n  },\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "card_attributes": [\n    {\n      "name": "OVERDRAFT_START_DATE",\n      "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n      "attribute_type": {\n        "i": 0,\n        "name": "STRING"\n      },\n      "bank_id": {\n        "value": "GENODEM1GLS"\n      },\n      "value": "2012-04-23",\n      "card_attribute_id": "b4e0352a-9a0f-4bfa-b30b-9003aa467f50"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'FeTq8meOuHP',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'KzlAzrptgSu',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'aoTDJ6BiO80',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 36,
				section: {
					tag: 'Card',
					title: 'Get cards for the current user',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns data about all the physical cards a user has been issued. These could be debit cards, credit cards, etc.',
					specificUrl: '/obp/v4.0.0/cards',
					exampleResponseBody: '{\n  "cards": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "bank_card_number": "364435172576215",\n      "name_on_card": "String",\n      "issue_number": "1",\n      "serial_number": "1324234",\n      "valid_from_date": "2017-09-19T00:00:00Z",\n      "expires_date": "2017-09-19T00:00:00Z",\n      "enabled": true,\n      "cancelled": true,\n      "on_hot_list": true,\n      "technology": "String",\n      "networks": [\n        "String"\n      ],\n      "allows": [\n        "String"\n      ],\n      "account": {\n        "id": "123",\n        "label": "OBP",\n        "views_available": [\n          {\n            "id": "123",\n            "short_name": "short_name",\n            "description": "description",\n            "is_public": true,\n            "alias": "None",\n            "hide_metadata_if_alias_used": true,\n            "can_add_comment": true,\n            "can_add_corporate_location": true,\n            "can_add_image": true,\n            "can_add_image_url": true,\n            "can_add_more_info": true,\n            "can_add_open_corporates_url": true,\n            "can_add_physical_location": true,\n            "can_add_private_alias": true,\n            "can_add_public_alias": true,\n            "can_add_tag": true,\n            "can_add_url": true,\n            "can_add_where_tag": true,\n            "can_delete_comment": true,\n            "can_delete_corporate_location": true,\n            "can_delete_image": true,\n            "can_delete_physical_location": true,\n            "can_delete_tag": true,\n            "can_delete_where_tag": true,\n            "can_edit_owner_comment": true,\n            "can_see_bank_account_balance": true,\n            "can_see_bank_account_bank_name": true,\n            "can_see_bank_account_currency": true,\n            "can_see_bank_account_iban": true,\n            "can_see_bank_account_label": true,\n            "can_see_bank_account_national_identifier": true,\n            "can_see_bank_account_number": true,\n            "can_see_bank_account_owners": true,\n            "can_see_bank_account_swift_bic": true,\n            "can_see_bank_account_type": true,\n            "can_see_comments": true,\n            "can_see_corporate_location": true,\n            "can_see_image_url": true,\n            "can_see_images": true,\n            "can_see_more_info": true,\n            "can_see_open_corporates_url": true,\n            "can_see_other_account_bank_name": true,\n            "can_see_other_account_iban": true,\n            "can_see_other_account_kind": true,\n            "can_see_other_account_metadata": true,\n            "can_see_other_account_national_identifier": true,\n            "can_see_other_account_number": true,\n            "can_see_other_account_swift_bic": true,\n            "can_see_owner_comment": true,\n            "can_see_physical_location": true,\n            "can_see_private_alias": true,\n            "can_see_public_alias": true,\n            "can_see_tags": true,\n            "can_see_transaction_amount": true,\n            "can_see_transaction_balance": true,\n            "can_see_transaction_currency": true,\n            "can_see_transaction_description": true,\n            "can_see_transaction_finish_date": true,\n            "can_see_transaction_metadata": true,\n            "can_see_transaction_other_bank_account": true,\n            "can_see_transaction_start_date": true,\n            "can_see_transaction_this_bank_account": true,\n            "can_see_transaction_type": true,\n            "can_see_url": true,\n            "can_see_where_tag": true\n          }\n        ],\n        "bank_id": "GENODEM1GLS"\n      },\n      "replacement": {\n        "requested_date": "2017-09-19T00:00:00Z",\n        "reason_requested": "RENEW"\n      },\n      "pin_reset": [\n        {\n          "requested_date": "2017-09-19T00:00:00Z",\n          "reason_requested": "FORGOT"\n        }\n      ],\n      "collected": "2017-09-19T00:00:00Z",\n      "posted": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '3z5rCG-UlnI',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'l1VgHAPsEwo',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 37,
				section: {
					tag: 'Card',
					title: 'Get Cards for the specified bank',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Should be able to filter on the following fields\n\neg:/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards?customer_id=66214b8e-259e-44ad-8868-3eb47be70646$account_id=8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0\n\n1 customer_id should be valid customer_id, otherwise, it will return an empty card list.  \n\n2 account_id should be valid account_id , otherwise, it will return an empty card list.  \n\n\n${authenticationRequiredMessage(true)}',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards',
					exampleResponseBody: '{\n  "cards": [\n    {\n      "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n      "bank_id": "GENODEM1GLS",\n      "card_number": "364435172576215",\n      "card_type": "Credit",\n      "name_on_card": "SusanSmith",\n      "issue_number": "1",\n      "serial_number": "1324234",\n      "valid_from_date": "2017-09-19T00:00:00Z",\n      "expires_date": "2017-09-19T00:00:00Z",\n      "enabled": true,\n      "cancelled": true,\n      "on_hot_list": true,\n      "technology": "technologyString1",\n      "networks": [\n        "networks1"\n      ],\n      "allows": [\n        "credit",\n        "debit"\n      ],\n      "account": {\n        "id": "123",\n        "label": "OBP",\n        "views_available": [\n          {\n            "id": "123",\n            "short_name": "short_name",\n            "description": "description",\n            "is_public": true,\n            "alias": "None",\n            "hide_metadata_if_alias_used": true,\n            "can_add_comment": true,\n            "can_add_corporate_location": true,\n            "can_add_image": true,\n            "can_add_image_url": true,\n            "can_add_more_info": true,\n            "can_add_open_corporates_url": true,\n            "can_add_physical_location": true,\n            "can_add_private_alias": true,\n            "can_add_public_alias": true,\n            "can_add_tag": true,\n            "can_add_url": true,\n            "can_add_where_tag": true,\n            "can_delete_comment": true,\n            "can_delete_corporate_location": true,\n            "can_delete_image": true,\n            "can_delete_physical_location": true,\n            "can_delete_tag": true,\n            "can_delete_where_tag": true,\n            "can_edit_owner_comment": true,\n            "can_see_bank_account_balance": true,\n            "can_see_bank_account_bank_name": true,\n            "can_see_bank_account_currency": true,\n            "can_see_bank_account_iban": true,\n            "can_see_bank_account_label": true,\n            "can_see_bank_account_national_identifier": true,\n            "can_see_bank_account_number": true,\n            "can_see_bank_account_owners": true,\n            "can_see_bank_account_swift_bic": true,\n            "can_see_bank_account_type": true,\n            "can_see_comments": true,\n            "can_see_corporate_location": true,\n            "can_see_image_url": true,\n            "can_see_images": true,\n            "can_see_more_info": true,\n            "can_see_open_corporates_url": true,\n            "can_see_other_account_bank_name": true,\n            "can_see_other_account_iban": true,\n            "can_see_other_account_kind": true,\n            "can_see_other_account_metadata": true,\n            "can_see_other_account_national_identifier": true,\n            "can_see_other_account_number": true,\n            "can_see_other_account_swift_bic": true,\n            "can_see_owner_comment": true,\n            "can_see_physical_location": true,\n            "can_see_private_alias": true,\n            "can_see_public_alias": true,\n            "can_see_tags": true,\n            "can_see_transaction_amount": true,\n            "can_see_transaction_balance": true,\n            "can_see_transaction_currency": true,\n            "can_see_transaction_description": true,\n            "can_see_transaction_finish_date": true,\n            "can_see_transaction_metadata": true,\n            "can_see_transaction_other_bank_account": true,\n            "can_see_transaction_start_date": true,\n            "can_see_transaction_this_bank_account": true,\n            "can_see_transaction_type": true,\n            "can_see_url": true,\n            "can_see_where_tag": true\n          }\n        ],\n        "bank_id": "GENODEM1GLS"\n      },\n      "replacement": {\n        "requested_date": "2017-09-19T00:00:00Z",\n        "reason_requested": "RENEW"\n      },\n      "pin_reset": [\n        {\n          "requested_date": "2017-09-19T00:00:00Z",\n          "reason_requested": "FORGOT"\n        }\n      ],\n      "collected": "2017-09-19T00:00:00Z",\n      "posted": "2017-09-19T00:00:00Z",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'bLPWs_sUxIX',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'iVsQhdniGrg',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'HNyjrO1FYoi',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 38,
				section: {
					tag: 'Card',
					title: 'Get status of Credit Card order ',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '**NOTE: This endpoint currently only returns example data.**\n\n      Get status of Credit Card orders\nGet all orders\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/credit_cards/orders',
					exampleResponseBody: '{\n  "cards": [\n    {\n      "card_type": "5",\n      "card_description": "good",\n      "use_type": "3"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '1frXt9UgPR-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'e_AFoilCJmu',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'zT55ZQqUaWU',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '6d3SlVV_8rW',
							code: 'OBP-50212',
							description: 'Connector did not return the set of status of credit card.'
						},
						{
							key: 'xHfeGzhLG1_',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 39,
				section: {
					tag: 'Card',
					title: 'Update Card',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update Card at bank specified by CARD_ID .\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID',
					exampleRequestBody: '{\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "technology": "technology1",\n  "networks": [\n    "network1",\n    "network2"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    },\n    {\n      "requested_date": "2019-09-03T17:59:14Z",\n      "reason_requested": "GOOD_SECURITY_PRACTICE"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
					exampleResponseBody: '{\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "bank_id": "GENODEM1GLS",\n  "card_number": "364435172576215",\n  "card_type": "Credit",\n  "name_on_card": "SusanSmith",\n  "issue_number": "1",\n  "serial_number": "1324234",\n  "valid_from_date": "2017-09-19T00:00:00Z",\n  "expires_date": "2017-09-19T00:00:00Z",\n  "enabled": true,\n  "cancelled": true,\n  "on_hot_list": true,\n  "technology": "technologyString1",\n  "networks": [\n    "networks1"\n  ],\n  "allows": [\n    "credit",\n    "debit"\n  ],\n  "account": {\n    "id": "123",\n    "label": "OBP",\n    "views_available": [\n      {\n        "id": "123",\n        "short_name": "short_name",\n        "description": "description",\n        "is_public": true,\n        "alias": "None",\n        "hide_metadata_if_alias_used": true,\n        "can_add_comment": true,\n        "can_add_corporate_location": true,\n        "can_add_image": true,\n        "can_add_image_url": true,\n        "can_add_more_info": true,\n        "can_add_open_corporates_url": true,\n        "can_add_physical_location": true,\n        "can_add_private_alias": true,\n        "can_add_public_alias": true,\n        "can_add_tag": true,\n        "can_add_url": true,\n        "can_add_where_tag": true,\n        "can_delete_comment": true,\n        "can_delete_corporate_location": true,\n        "can_delete_image": true,\n        "can_delete_physical_location": true,\n        "can_delete_tag": true,\n        "can_delete_where_tag": true,\n        "can_edit_owner_comment": true,\n        "can_see_bank_account_balance": true,\n        "can_see_bank_account_bank_name": true,\n        "can_see_bank_account_currency": true,\n        "can_see_bank_account_iban": true,\n        "can_see_bank_account_label": true,\n        "can_see_bank_account_national_identifier": true,\n        "can_see_bank_account_number": true,\n        "can_see_bank_account_owners": true,\n        "can_see_bank_account_swift_bic": true,\n        "can_see_bank_account_type": true,\n        "can_see_comments": true,\n        "can_see_corporate_location": true,\n        "can_see_image_url": true,\n        "can_see_images": true,\n        "can_see_more_info": true,\n        "can_see_open_corporates_url": true,\n        "can_see_other_account_bank_name": true,\n        "can_see_other_account_iban": true,\n        "can_see_other_account_kind": true,\n        "can_see_other_account_metadata": true,\n        "can_see_other_account_national_identifier": true,\n        "can_see_other_account_number": true,\n        "can_see_other_account_swift_bic": true,\n        "can_see_owner_comment": true,\n        "can_see_physical_location": true,\n        "can_see_private_alias": true,\n        "can_see_public_alias": true,\n        "can_see_tags": true,\n        "can_see_transaction_amount": true,\n        "can_see_transaction_balance": true,\n        "can_see_transaction_currency": true,\n        "can_see_transaction_description": true,\n        "can_see_transaction_finish_date": true,\n        "can_see_transaction_metadata": true,\n        "can_see_transaction_other_bank_account": true,\n        "can_see_transaction_start_date": true,\n        "can_see_transaction_this_bank_account": true,\n        "can_see_transaction_type": true,\n        "can_see_url": true,\n        "can_see_where_tag": true\n      }\n    ],\n    "bank_id": "GENODEM1GLS"\n  },\n  "replacement": {\n    "requested_date": "2017-09-19T00:00:00Z",\n    "reason_requested": "RENEW"\n  },\n  "pin_reset": [\n    {\n      "requested_date": "2017-09-19T00:00:00Z",\n      "reason_requested": "FORGOT"\n    }\n  ],\n  "collected": "2017-09-19T00:00:00Z",\n  "posted": "2017-09-19T00:00:00Z",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
					typedBody: [{
							key: 'NmSHkDrTFT8',
							path: 'type',
							type: 'object'
						},
						{
							key: 'FahNtMVfR6W',
							path: 'enabled',
							type: 'boolean'
						},
						{
							key: 'OyQ35J1Uone',
							path: 'allows',
							type: 'array'
						},
						{
							key: 'ipcDuAT_W98',
							path: 'allows->items',
							type: 'string'
						},
						{
							key: '2pkYn8IEjjG',
							path: 'technology',
							type: 'string'
						},
						{
							key: 'Fay-S1tb4aT',
							path: 'card_type',
							type: 'string'
						},
						{
							key: 'kUyYoaBBrGJ',
							path: 'name_on_card',
							type: 'string'
						},
						{
							key: 'x8DqO6afZDC',
							path: 'pin_reset',
							type: 'array'
						},
						{
							key: 'yD3ZW4WkJB-',
							path: 'pin_reset->items',
							type: 'object'
						},
						{
							key: 'p0nSdWAD_w8',
							path: 'pin_reset->items->reason_requested',
							type: 'string'
						},
						{
							key: 'z0qmedtSGo6',
							path: 'pin_reset->items->requested_date',
							type: 'string'
						},
						{
							key: 'tLZT_XpS-XH',
							path: 'pin_reset->items->requested_date->format',
							type: 'date-time'
						},
						{
							key: 'BNrLGYs3mjg',
							path: 'customer_id',
							type: 'string'
						},
						{
							key: 'drYpxA4Vnlq',
							path: 'replacement',
							type: 'object'
						},
						{
							key: 'OgHCUCGZ-w9',
							path: 'replacement->reason_requested',
							type: 'string'
						},
						{
							key: 'QhXxzULydvY',
							path: 'replacement->requested_date',
							type: 'string'
						},
						{
							key: 'Pwf6iONCHmJ',
							path: 'replacement->requested_date->format',
							type: 'date-time'
						},
						{
							key: 'phCeEuxWdXw',
							path: 'valid_from_date',
							type: 'string'
						},
						{
							key: 'eDggBB90bMx',
							path: 'valid_from_date->format',
							type: 'date-time'
						},
						{
							key: 'W5x5lZHidve',
							path: 'networks',
							type: 'array'
						},
						{
							key: 'j4wQV8GZICP',
							path: 'networks->items',
							type: 'string'
						},
						{
							key: 'AF_wE9d_aut',
							path: 'issue_number',
							type: 'string'
						},
						{
							key: 'PraNzp56T0L',
							path: 'serial_number',
							type: 'string'
						},
						{
							key: 'w2OaQ7XsT7i',
							path: 'posted',
							type: 'string'
						},
						{
							key: 'hj4h7CqmVgU',
							path: 'posted->format',
							type: 'date-time'
						},
						{
							key: 'suMgFEI0Qj4',
							path: 'collected',
							type: 'string'
						},
						{
							key: 'q6UA_bv_Sa2',
							path: 'collected->format',
							type: 'date-time'
						},
						{
							key: 'EoBgfG_2XO1',
							path: 'expires_date',
							type: 'string'
						},
						{
							key: 'w1AYXixxPEp',
							path: 'expires_date->format',
							type: 'date-time'
						},
						{
							key: 'QcVx8YHw6pN',
							path: 'account_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '_b3JWoi9Vff',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '0dGOnPjNVJE',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'b2I3Iavx-dy',
							code: 'OBP-10015',
							description: 'Allowed values are'
						},
						{
							key: 'H32wzfUh30d',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 40,
				section: {
					tag: 'Card',
					title: 'Update Card Attribute',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: ' Update Card Attribute\n\nCard Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Card Attribute is linked to its Card by CARD_ID\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/cards/CARD_ID/attributes/CARD_ATTRIBUTE_ID',
					exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DOUBLE",\n  "value": "2012-04-23"\n}',
					exampleResponseBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "card_id": "36f8a9e6-c2b1-407a-8bd0-421b7119307e ",\n  "attribute_type": {\n    "i": 2,\n    "name": "DOUBLE"\n  },\n  "bank_id": {\n    "value": "GENODEM1GLS"\n  },\n  "value": "2012-04-23",\n  "card_attribute_id": "b4e0352a-9a0f-4bfa-b30b-9003aa467f50"\n}',
					typedBody: [{
							key: 'J5gg48AWbUB',
							path: 'type',
							type: 'object'
						},
						{
							key: 'li3IavXdEyg',
							path: 'value',
							type: 'string'
						},
						{
							key: 'JYbSak5a7f8',
							path: 'type',
							type: 'string'
						},
						{
							key: 'Q49kLnugAKB',
							path: 'name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '-5nIHSb4uUe',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Z9CSyCDMo_A',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'T5MHORCoYEx',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 41,
				section: {
					tag: 'Consent',
					title: 'Answer Consent Challenge',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\nThis endpoint is used to confirm a Consent previously created.\n\nThe User must supply a code that was sent out of band (OOB) for example via an SMS.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/consents/CONSENT_ID/challenge',
					exampleRequestBody: '{\n  "answer": "12345678"\n}',
					exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "INITIATED"\n}',
					typedBody: [{
							key: '2AwJqc6iZZ',
							path: 'type',
							type: 'object'
						},
						{
							key: 'jij67jeR6g',
							path: 'answer',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '6HyLepxvZV',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'qnjOZgCYfB',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'wAKN6uNFct',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '1VqfzG-L2t',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 't-P244vTMw',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 42,
				section: {
					tag: 'Consent',
					title: 'Create Consent (EMAIL)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\nThis endpoint starts the process of creating a Consent.\n\nThe Consent is created in an INITIATED state.\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\nWhen the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/EMAIL',
					exampleRequestBody: '{\n  "for": "ALL_MY_ACCOUNTS",\n  "view": "owner",\n  "email": "marko@tesobe.com"\n}',
					exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "INITIATED"\n}',
					typedBody: [{
							key: 'Rg6rrLg1_Yl',
							path: 'type',
							type: 'object'
						},
						{
							key: 'zgb0nv3oucF',
							path: 'email',
							type: 'string'
						},
						{
							key: 'wfd-BGkJuCr',
							path: 'view',
							type: 'string'
						},
						{
							key: 'NjiaeswqoXZ',
							path: 'for',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'HuaEU_14g9r',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'h_7Pc3tIKhX',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'O09wFvF0dpZ',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '77oT2nedOZn',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'zz2vGgmqcyf',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 43,
				section: {
					tag: 'Consent',
					title: 'Create Consent (SMS)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\n\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\nThis endpoint starts the process of creating a Consent.\n\nThe Consent is created in an INITIATED state.\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\nWhen the Consent is created, OBP (or a backend system) stores the challenge so it can be checked later against the value supplied by the User with the Answer Consent Challenge endpoint.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/SMS',
					exampleRequestBody: '{\n  "for": "ALL_MY_ACCOUNTS",\n  "view": "owner",\n  "phone_number": "493081453994"\n}',
					exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "INITIATED"\n}',
					typedBody: [{
							key: 'KP46tYGDZ_m',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Qpywr1YQ14K',
							path: 'phone_number',
							type: 'string'
						},
						{
							key: 'yzKSsTrD1iu',
							path: 'view',
							type: 'string'
						},
						{
							key: '1N6NcJ3ckdy',
							path: 'for',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'AHTlj000toS',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Wsu1OeQKQOg',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'an-d5y0brNK',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'hNBEwqkAxne',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'H4zX9zXZ4_G',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 44,
				section: {
					tag: 'Consent',
					title: 'Get Consents',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\n\nThis endpoint gets the Consents that the current User created.\n\nAuthentication is Mandatory\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents',
					exampleResponseBody: '{\n  "consents": [\n    {\n      "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n      "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n      "status": "INITIATED"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'M-rN7SlRY-C',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'mXQ_NxyCxlj',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'Y70H-aFdl3d',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 45,
				section: {
					tag: 'Consent',
					title: 'Revoke Consent',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\n\n\nAn OBP Consent allows the holder of the Consent to call one or more endpoints.\n\nConsents must be created and authorisied using SCA (Strong Customer Authentication).\n\nThat is, Consents can be created by an authorised User via the OBP REST API but they must be confirmed via an out of band (OOB) mechanism such as a code sent to a mobile phone.\n\nEach Consent has one of the following states: INITIATED, ACCEPTED, REJECTED, REVOKED, RECEIVED, VALID, REVOKEDBYPSU, EXPIRED, TERMINATEDBYTPP.\n\n\n\n      \n\n\nRevoke Consent for current user specified by CONSENT_ID\n\n\nAuthentication is Mandatory\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/my/consents/CONSENT_ID/revoke',
					exampleResponseBody: '{\n  "consent_id": "9d429899-24f5-42c8-8565-943ffa6a7945",\n  "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJlbnRpdGxlbWVudHMiOltdLCJjcmVhdGVkQnlVc2VySWQiOiJhYjY1MzlhOS1iMTA1LTQ0ODktYTg4My0wYWQ4ZDZjNjE2NTciLCJzdWIiOiIyMWUxYzhjYy1mOTE4LTRlYWMtYjhlMy01ZTVlZWM2YjNiNGIiLCJhdWQiOiJlanpuazUwNWQxMzJyeW9tbmhieDFxbXRvaHVyYnNiYjBraWphanNrIiwibmJmIjoxNTUzNTU0ODk5LCJpc3MiOiJodHRwczpcL1wvd3d3Lm9wZW5iYW5rcHJvamVjdC5jb20iLCJleHAiOjE1NTM1NTg0OTksImlhdCI6MTU1MzU1NDg5OSwianRpIjoiMDlmODhkNWYtZWNlNi00Mzk4LThlOTktNjYxMWZhMWNkYmQ1Iiwidmlld3MiOlt7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAxIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifSx7ImFjY291bnRfaWQiOiJtYXJrb19wcml2aXRlXzAyIiwiYmFua19pZCI6ImdoLjI5LnVrLngiLCJ2aWV3X2lkIjoib3duZXIifV19.8cc7cBEf2NyQvJoukBCmDLT7LXYcuzTcSYLqSpbxLp4",\n  "status": "REJECTED"\n}',
					typedBody: [],
					possibleErrors: [{
							key: '8BJz66rqU-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '4hK78ypMFq',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'VSaW8rUfOk',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 46,
				section: {
					tag: 'Counterparty',
					title: 'Create Counterparty (Explicit)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create Counterparty (Explicit) for an Account.\n\nIn OBP, there are two types of Counterparty.\n\n* Explicit Counterparties (those here) which we create explicitly and are used in COUNTERPARTY Transaction Requests\n\n* Implicit Counterparties (AKA Other Accounts) which are generated automatically from the other sides of Transactions.\n\nExplicit Counterparties are created for the account / view\nThey are how the user of the view (e.g. account owner) refers to the other side of the transaction\n\nname : the human readable name (e.g. Piano teacher, Miss Nipa)\n\ndescription : the human readable name (e.g. Piano teacher, Miss Nipa)\n\nbank_routing_scheme : eg: bankId or bankCode or any other strings\n\nbank_routing_address : eg: `gh.29.uk`, must be valid sandbox bankIds\n\naccount_routing_scheme : eg: AccountId or AccountNumber or any other strings\n\naccount_routing_address : eg: `1d65db7c-a7b2-4839-af41-95`, must be valid accountIds\n\nother_account_secondary_routing_scheme : eg: IBan or any other strings\n\nother_account_secondary_routing_address : if it is IBan, it should be unique for each counterparty. \n\nother_branch_routing_scheme : eg: branchId or any other strings or you can leave it empty, not useful in sandbox mode.\n\nother_branch_routing_address : eg: `branch-id-123` or you can leave it empty, not useful in sandbox mode.\n\nis_beneficiary : must be set to `true` in order to send payments to this counterparty\n\nbespoke: It support list of key-value, you can add it to the counterarty.\n\nbespoke.key : any info-key you want to add to this counerparty\n \nbespoke.value : any info-value you want to add to this counerparty\n\nThe view specified by VIEW_ID must have the canAddCounterparty permission\n\nA minimal example for TransactionRequestType == COUNTERPARTY\n {\n  "name": "Tesobe1",\n  "description": "Good Company",\n  "other_bank_routing_scheme": "bankId",\n  "other_bank_routing_address": "gh.29.uk",\n  "other_account_routing_scheme": "accountId",\n  "other_account_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "other_account_secondary_routing_scheme": "",\n  "other_account_secondary_routing_address": "",\n  "other_branch_routing_scheme": "",\n  "other_branch_routing_address": "",\n  "bespoke": []\n}\n\n \nA minimal example for TransactionRequestType == SEPA\n \n {\n  "name": "Tesobe2",\n  "description": "Good Company",\n  "other_bank_routing_scheme": "bankId",\n  "other_bank_routing_address": "gh.29.uk",\n  "other_account_routing_scheme": "accountId",\n  "other_account_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "other_account_secondary_routing_scheme": "IBAN",\n  "other_account_secondary_routing_address": "DE89 3704 0044 0532 0130 00",\n  "is_beneficiary": true,\n  "other_branch_routing_scheme": "",\n  "other_branch_routing_address": "",\n  "bespoke": []\n}\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties',
					exampleRequestBody: '{\n  "name": "CounterpartyName",\n  "description": "My landlord",\n  "other_account_routing_scheme": "accountNumber",\n  "other_account_routing_address": "7987987-2348987-234234",\n  "other_account_secondary_routing_scheme": "IBAN",\n  "other_account_secondary_routing_address": "DE89370400440532013000",\n  "other_bank_routing_scheme": "bankCode",\n  "other_bank_routing_address": "10",\n  "other_branch_routing_scheme": "branchNumber",\n  "other_branch_routing_address": "10010",\n  "is_beneficiary": true,\n  "bespoke": [\n    {\n      "key": "englishName",\n      "value": "english Name"\n    }\n  ]\n}',
					exampleResponseBody: '{\n  "name": "CounterpartyName",\n  "description": "My landlord",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "this_bank_id": "GENODEM1GLS",\n  "this_account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "this_view_id": "owner",\n  "counterparty_id": "1d65db7c-a7b2-4839-af41-958276ab7790",\n  "other_bank_routing_scheme": "bankCode",\n  "other_bank_routing_address": "10",\n  "other_branch_routing_scheme": "branchNumber",\n  "other_branch_routing_address": "10010",\n  "other_account_routing_scheme": "accountNumber",\n  "other_account_routing_address": "7987987-2348987-234234",\n  "other_account_secondary_routing_scheme": "accountId",\n  "other_account_secondary_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "bespoke": [\n    {\n      "key": "englishName",\n      "value": "english Name"\n    }\n  ],\n  "metadata": {\n    "public_alias": "String",\n    "more_info": "String",\n    "url": "String",\n    "image_url": "String",\n    "open_corporates_url": "String",\n    "corporate_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "physical_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "private_alias": "String"\n  }\n}',
					typedBody: [{
							key: '4RD7LLEz05',
							path: 'type',
							type: 'object'
						},
						{
							key: '57zvTSZVZa',
							path: 'bespoke',
							type: 'array'
						},
						{
							key: 'CiAbki7EoJ',
							path: 'bespoke->items',
							type: 'object'
						},
						{
							key: 'Wwr_qTh8p4',
							path: 'bespoke->items->value',
							type: 'string'
						},
						{
							key: 'Pz_mcSbqRw',
							path: 'bespoke->items->key',
							type: 'string'
						},
						{
							key: '1uuL2EaVbQ',
							path: 'other_bank_routing_scheme',
							type: 'string'
						},
						{
							key: 'eeLNbLY9Av',
							path: 'name',
							type: 'string'
						},
						{
							key: 'Hl8SuB9a7C',
							path: 'other_branch_routing_address',
							type: 'string'
						},
						{
							key: 'wV5r96KgEj',
							path: 'other_account_secondary_routing_address',
							type: 'string'
						},
						{
							key: 'rMhkUC6JCi',
							path: 'description',
							type: 'string'
						},
						{
							key: 'A07i_z9tvk',
							path: 'other_account_routing_address',
							type: 'string'
						},
						{
							key: 'HRJWlCMSLZ',
							path: 'other_bank_routing_address',
							type: 'string'
						},
						{
							key: 'gEbP7P5BAF',
							path: 'other_branch_routing_scheme',
							type: 'string'
						},
						{
							key: '2w9Cp5PuCw',
							path: 'other_account_secondary_routing_scheme',
							type: 'string'
						},
						{
							key: 'pNbnMyeFpE',
							path: 'other_account_routing_scheme',
							type: 'string'
						},
						{
							key: 'TJ3W5AtHwQ',
							path: 'is_beneficiary',
							type: 'boolean'
						}
					],
					possibleErrors: [{
							key: 'ozO8BnlPrT',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'qoPj9AnmL5',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'yqCe5hfzf7',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'eSK4a5wszu',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'mfehaY08a9',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'HU-v8PvpHL',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'lVabY5HQ1S',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'uAmJddLYDI',
							code: 'OBP-30014',
							description: 'Counterparty already exists. Please specify a different value for BANK_ID or ACCOUNT_ID or VIEW_ID or NAME.'
						},
						{
							key: 'JrGvQ4D-co',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 47,
				section: {
					tag: 'Counterparty',
					title: 'Get Counterparties (Explicit).',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the Counterparties (Explicit) for the account / view.\n\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties',
					exampleResponseBody: '{\n  "counterparties": [\n    {\n      "name": "CounterpartyName",\n      "description": "My landlord",\n      "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "this_bank_id": "GENODEM1GLS",\n      "this_account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n      "this_view_id": "owner",\n      "counterparty_id": "1d65db7c-a7b2-4839-af41-958276ab7790",\n      "other_bank_routing_scheme": "bankCode",\n      "other_bank_routing_address": "10",\n      "other_branch_routing_scheme": "branchNumber",\n      "other_branch_routing_address": "10010",\n      "other_account_routing_scheme": "accountNumber",\n      "other_account_routing_address": "7987987-2348987-234234",\n      "other_account_secondary_routing_scheme": "accountId",\n      "other_account_secondary_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n      "is_beneficiary": true,\n      "bespoke": [\n        {\n          "key": "englishName",\n          "value": "english Name"\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 't-sJpN3n-w-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'R6zMRQBeMw_',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'q2A4BXoacY0',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: '5phJlTjFkwN',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'aDIPQMl6djY',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'zBb0myIBwIx',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 48,
				section: {
					tag: 'Counterparty',
					title: 'Get Counterparty by Counterparty Id.(Explicit).',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Information returned about the Counterparty specified by COUNTERPARTY_ID:\n\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/counterparties/COUNTERPARTY_ID',
					exampleResponseBody: '{\n  "name": "CounterpartyName",\n  "description": "My landlord",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "this_bank_id": "GENODEM1GLS",\n  "this_account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "this_view_id": "owner",\n  "counterparty_id": "1d65db7c-a7b2-4839-af41-958276ab7790",\n  "other_bank_routing_scheme": "bankCode",\n  "other_bank_routing_address": "10",\n  "other_branch_routing_scheme": "branchNumber",\n  "other_branch_routing_address": "10010",\n  "other_account_routing_scheme": "accountNumber",\n  "other_account_routing_address": "7987987-2348987-234234",\n  "other_account_secondary_routing_scheme": "accountId",\n  "other_account_secondary_routing_address": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0",\n  "is_beneficiary": true,\n  "bespoke": [\n    {\n      "key": "englishName",\n      "value": "english Name"\n    }\n  ],\n  "metadata": {\n    "public_alias": "String",\n    "more_info": "String",\n    "url": "String",\n    "image_url": "String",\n    "open_corporates_url": "String",\n    "corporate_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "physical_location": {\n      "latitude": 11.45,\n      "longitude": 11.45,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "123",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith"\n      }\n    },\n    "private_alias": "String"\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'JvKNiyfQt6n',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'VEj3mPVxjz2',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '3E_LpOdgVWP',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 49,
				section: {
					tag: 'Counterparty',
					title: 'Get Other Account by Id.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID.\nAuthentication is Optional\n\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "holder": {\n    "name": "OBP",\n    "is_alias": true\n  },\n  "bank_routing": {\n    "scheme": "Bank_ID",\n    "address": "gh.29.uk"\n  },\n  "account_routings": [\n    {\n      "scheme": "AccountNumber",\n      "address": "4930396"\n    }\n  ],\n  "metadata": {\n    "public_alias": "NONE",\n    "private_alias": "NONE",\n    "more_info": "www.openbankproject.com",\n    "URL": "www.openbankproject.com",\n    "image_URL": "www.openbankproject.com",\n    "open_corporates_URL": "www.openbankproject.com",\n    "corporate_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    },\n    "physical_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'mCs3KNTMpag',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'XUbkBwnYNd7',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '3EfD0iqcaik',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'B368yaA1gEO',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'aJcIh3N4mQn',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 50,
				section: {
					tag: 'Counterparty',
					title: 'Get Other Accounts of one Account.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID.\nAuthentication is Optional\n\nAuthentication is required if the view VIEW_ID is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts',
					exampleResponseBody: '{\n  "other_accounts": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "holder": {\n        "name": "OBP",\n        "is_alias": true\n      },\n      "bank_routing": {\n        "scheme": "Bank_ID",\n        "address": "gh.29.uk"\n      },\n      "account_routings": [\n        {\n          "scheme": "AccountNumber",\n          "address": "4930396"\n        }\n      ],\n      "metadata": {\n        "public_alias": "NONE",\n        "private_alias": "NONE",\n        "more_info": "www.openbankproject.com",\n        "URL": "www.openbankproject.com",\n        "image_URL": "www.openbankproject.com",\n        "open_corporates_URL": "www.openbankproject.com",\n        "corporate_location": {\n          "latitude": 1.231,\n          "longitude": 1.231,\n          "date": "2017-09-19T00:00:00Z",\n          "user": {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "provider": "http://127.0.0.1:8080",\n            "display_name": "OBP"\n          }\n        },\n        "physical_location": {\n          "latitude": 1.231,\n          "longitude": 1.231,\n          "date": "2017-09-19T00:00:00Z",\n          "user": {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "provider": "http://127.0.0.1:8080",\n            "display_name": "OBP"\n          }\n        }\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'z08LvcGiya',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'S2gRdBaISV',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'ZQAfqICmor',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'ZOsXwW_Gz7',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'eN8pu5QN6o',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 51,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add Corporate Location to Counterparty',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add the geolocation of the counterparty\'s registered address',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
					exampleRequestBody: '{\n  "corporate_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: '3CNhakDGLY3',
							path: 'type',
							type: 'object'
						},
						{
							key: 'pzCaG90H-qd',
							path: 'corporate_location',
							type: 'object'
						},
						{
							key: 'Y5IE1Eb0f55',
							path: 'corporate_location->longitude',
							type: 'number'
						},
						{
							key: 'gRYagR0fzWV',
							path: 'corporate_location->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: 'ad_ve9-ZrOt',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'OcSCJfbbKmq',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '1MQncuiYu2k',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'jCtBOehCt1_',
							code: '<no code>',
							description: 'the view does not allow adding a corporate location'
						},
						{
							key: 'vBt5kfXuggm',
							code: '<no code>',
							description: 'Coordinates not possible'
						},
						{
							key: 'fGWR7g5PR0p',
							code: '<no code>',
							description: 'Corporate Location cannot be deleted'
						},
						{
							key: '2on5wxOA5If',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 52,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add Counterparty More Info',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add a description of the counter party from the perpestive of the account e.g. My dentist.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
					exampleRequestBody: '{\n  "more_info": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: '4nRKG_gbI4m',
							path: 'type',
							type: 'object'
						},
						{
							key: 'IEwq24pFf4H',
							path: 'more_info',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'Mdtu0fJMp7k',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'KhkItTWam9A',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'p4ro6Qlf8ry',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '4dMnrj-BuBP',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'xZZ35bDvPCn',
							code: '<no code>',
							description: 'the view ownerdoes not allow adding more info'
						},
						{
							key: 'G6SLIjA-I4-',
							code: '<no code>',
							description: 'More Info cannot be added'
						},
						{
							key: 't944Jok8GQc',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 53,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add image url to other bank account.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add a url that points to the logo of the counterparty',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
					exampleRequestBody: '{\n  "image_URL": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'zGhyrIodqI6',
							path: 'type',
							type: 'object'
						},
						{
							key: 'jsMQv6sj_Dq',
							path: 'image_URL',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'XE152tRqhYm',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'PGUJG5LYdqk',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'b4GQdQ9yFdZ',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'wKRisJBV2gm',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: '2_wbWbE1wML',
							code: '<no code>',
							description: 'the view does not allow adding an image url'
						},
						{
							key: 'eh24on_TG2U',
							code: '<no code>',
							description: 'URL cannot be added'
						},
						{
							key: 'm2x9OB59S73',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 54,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add Open Corporates URL to Counterparty',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add open corporates url to other bank account.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
					exampleRequestBody: '{\n  "open_corporates_URL": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'adcPKF0U-c',
							path: 'type',
							type: 'object'
						},
						{
							key: 'HpK7u_nRk6',
							path: 'open_corporates_URL',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'sJLlj3ATJY',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'qztDKwan7i',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'yVCVN8jVkK',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'IWuPXwe6dk',
							code: '<no code>',
							description: 'the view does not allow adding an open corporate url'
						},
						{
							key: 'oa2CvRzNOm',
							code: '<no code>',
							description: 'URL cannot be added'
						},
						{
							key: 'hdhZEisn1C',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 55,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add physical location to other bank account.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add geocoordinates of the counterparty\'s main location',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
					exampleRequestBody: '{\n  "physical_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: '4v-bdOypbVZ',
							path: 'type',
							type: 'object'
						},
						{
							key: 'cXp_ItBGrmt',
							path: 'physical_location',
							type: 'object'
						},
						{
							key: 'h-lziJPYPXO',
							path: 'physical_location->longitude',
							type: 'number'
						},
						{
							key: 'aCGIVB5H6EO',
							path: 'physical_location->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: '6tLXDRkrSaS',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'LwttM_OaWJ_',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'rDhRpMdA38C',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'dVdEgIURe3j',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'XxaBLO7HAOk',
							code: '<no code>',
							description: 'the view does not allow adding a physical location'
						},
						{
							key: 'jnFXWDvn8ta',
							code: '<no code>',
							description: 'Coordinates not possible'
						},
						{
							key: 'p5tbLrRHU-V',
							code: '<no code>',
							description: 'Physical Location cannot be added'
						},
						{
							key: 'v3YjrCXCwAL',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 56,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add public alias to other bank account.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Creates the public alias for the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n\nNote: Public aliases are automatically generated for new \'other accounts / counterparties\', so this call should only be used if\nthe public alias was deleted.\n\nThe VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					exampleRequestBody: '{\n  "alias": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'o2uuElYt4Zm',
							path: 'type',
							type: 'object'
						},
						{
							key: 'HBe2o_6QfmI',
							path: 'alias',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'cIfWAS5EZa6',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '3zbzjs4BRkG',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'N845FHDl-HU',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'uiKdY4ui1Ou',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: '-x5-oZmuhmO',
							code: '<no code>',
							description: 'the view does not allow adding a public alias'
						},
						{
							key: 'pRGkH9hTLRP',
							code: '<no code>',
							description: 'Alias cannot be added'
						},
						{
							key: '8bt2Ek2r9fz',
							code: '<no code>',
							description: 'public alias added'
						}
					]
				}
			},
			{
				index: 57,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Add url to other bank account.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'A url which represents the counterparty (home page url etc.)',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
					exampleRequestBody: '{\n  "URL": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'z8X7GBqNyto',
							path: 'type',
							type: 'object'
						},
						{
							key: 'VKfQK2PLCE2',
							path: 'URL',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'Ds1Owfeqiw0',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'HDBKXpatHze',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '4JDRHuWbeZm',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'ujmsrzWr2Fp',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'iUM8IL-1H5l',
							code: '<no code>',
							description: 'the view does not allow adding a url'
						},
						{
							key: 'MKam4kJs3s8',
							code: '<no code>',
							description: 'URL cannot be added'
						},
						{
							key: 'afynJ05Cbx9',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 58,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Create Other Account Private Alias',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Creates a private alias for the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					exampleRequestBody: '{\n  "alias": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'Z_2Ap3Rygnf',
							path: 'type',
							type: 'object'
						},
						{
							key: '4lIu6N2coqe',
							path: 'alias',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'VYz9mdQcGeI',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'ORMxuYGOzVQ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '9sdw5vMb_ka',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '5pAYrsW1RP5',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'gu2Ko3XEb85',
							code: '<no code>',
							description: 'the view does not allow adding a private alias'
						},
						{
							key: '04Kuw08igHV',
							code: '<no code>',
							description: 'Alias cannot be added'
						},
						{
							key: 'hTlM_mCqmUB',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 59,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete Counterparty Corporate Location.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete corporate location of other bank account. Delete the geolocation of the counterparty\'s registered address',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'rAzbis0n0R',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Du-sxrLvmu',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'lyQNwrBMce',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'IlDTamhjY7',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'Zz4Po0gfKM',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'sFiFdH0qi4',
							code: '<no code>',
							description: 'Corporate Location cannot be deleted'
						},
						{
							key: 'e_3SQZ3XP_',
							code: '<no code>',
							description: 'Delete not completed'
						},
						{
							key: 'JCxZpwrkYV',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 60,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete Counterparty Image URL',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete image url of other bank account.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'n8gShzFg7',
							path: 'type',
							type: 'object'
						},
						{
							key: '_1fKACzLk',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
						key: '6yBQq-gap',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 61,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete Counterparty Open Corporates URL',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete open corporate url of other bank account.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: '4efW_pkyacS',
							path: 'type',
							type: 'object'
						},
						{
							key: 'AERTa31t9gM',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'Uv8w8_6cfJ2',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'GCPOjpCBkNV',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'jko0_su3mOU',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'Z-YGEvs7w06',
							code: '<no code>',
							description: 'the view does not allow deleting an open corporate url'
						},
						{
							key: '4goQX2WmqDx',
							code: '<no code>',
							description: 'URL cannot be deleted'
						},
						{
							key: 'h6tHo2WwDmi',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 62,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete Counterparty Physical Location.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete physical location of other bank account.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'TqKsPxufTaj',
							path: 'type',
							type: 'object'
						},
						{
							key: '8k-GNSOdhh1',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'UPqo4nr3qY4',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'o1ylKNeBJdZ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'pi0yed0anT2',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'IA2Zb1bqGXX',
							code: '<no code>',
							description: 'Physical Location cannot be deleted'
						},
						{
							key: '9YrMZ_SQOxC',
							code: '<no code>',
							description: 'Delete not completed'
						},
						{
							key: '7KwvrZgjLeh',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 63,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete Counterparty Private Alias',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the private alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'Z75OZc8XGOG',
							path: 'type',
							type: 'object'
						},
						{
							key: 'f1kbEFCjDy9',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'byjgiRAydxO',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'dUoKUIk6vEB',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'hJ419AG4UOR',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'fRgzx0tPN32',
							code: '<no code>',
							description: 'the view does not allow deleting the private alias'
						},
						{
							key: 'OyCxRdiSNaY',
							code: '<no code>',
							description: 'Alias cannot be deleted'
						},
						{
							key: 'FX5WSFhulk_',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 64,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete Counterparty Public Alias',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the public alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'FRcOI8jx_wY',
							path: 'type',
							type: 'object'
						},
						{
							key: 'sTF3-FlwHwN',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'jA-qyiuFhMA',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'GgjKws-lKhU',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: '_-hwLt3HvdQ',
							code: '<no code>',
							description: 'the view does not allow deleting the public alias'
						},
						{
							key: 'An1RM3KLpwK',
							code: '<no code>',
							description: 'Alias cannot be deleted'
						},
						{
							key: 'Jm7_PMEutjN',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 65,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete more info of other bank account.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: '',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: '0R_f4Kp-Usv',
							path: 'type',
							type: 'object'
						},
						{
							key: 'XBCbrmXXO_2',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'tMn4GPZsoSX',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'VkyAD_l_6sC',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'M3wAsywmuLp',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'HzhF-XJOfiO',
							code: '<no code>',
							description: 'the view does not allow deleting more info'
						},
						{
							key: 'UXLUZtNeAmL',
							code: '<no code>',
							description: 'More Info cannot be deleted'
						},
						{
							key: '-BPUs6euMpl',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 66,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Delete url of other bank account.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: '',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'Jio8kSv_Zp0',
							path: 'type',
							type: 'object'
						},
						{
							key: 'b0Do6Ql1wYB',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '8HhrtNLBTYZ',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'gCQD3gmKFjo',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'FAW2US3TgFe',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'zPJGAPH4ZMo',
							code: '<no code>',
							description: 'the view does not allow deleting a url'
						},
						{
							key: '3xDlEPEBliy',
							code: '<no code>',
							description: 'URL cannot be deleted'
						},
						{
							key: 'JEzWNqZL_QC',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 67,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Get Other Account Metadata.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get metadata of one other account.\nReturns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.\n\nAuthentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata',
					exampleResponseBody: '{\n  "public_alias": "NONE",\n  "private_alias": "NONE",\n  "more_info": "www.openbankproject.com",\n  "URL": "www.openbankproject.com",\n  "image_URL": "www.openbankproject.com",\n  "open_corporates_URL": "www.openbankproject.com",\n  "corporate_location": {\n    "latitude": 1.231,\n    "longitude": 1.231,\n    "date": "2017-09-19T00:00:00Z",\n    "user": {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  },\n  "physical_location": {\n    "latitude": 1.231,\n    "longitude": 1.231,\n    "date": "2017-09-19T00:00:00Z",\n    "user": {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: '756xUHuuI04',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'u4fQj_1fwLJ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: '97GPdNUYZa2',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						}
					]
				}
			},
			{
				index: 68,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Get Other Account Private Alias',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the private alias of the other account OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					exampleResponseBody: '{\n  "alias": "String"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'NxlIiuYnfOI',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'W2zxmiH1gO4',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'EPG0RlXJpsj',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'HFLSdQiftpJ',
							code: '<no code>',
							description: 'the view does not allow private alias access'
						},
						{
							key: '3xDPnuHNlVa',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 69,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Get public alias of other bank account.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the public alias of the other account OTHER_ACCOUNT_ID.\nAuthentication is Optional\nAuthentication is Mandatory if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					exampleResponseBody: '{\n  "alias": "String"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'hSFs6njL2pO',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'sNEqGvfjPWj',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'P78DSbxfxR1',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'd2eCsGA5hju',
							code: '<no code>',
							description: 'the view does not allow public alias access'
						}
					]
				}
			},
			{
				index: 70,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update Counterparty Corporate Location',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the geolocation of the counterparty\'s registered address',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/corporate_location',
					exampleRequestBody: '{\n  "corporate_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'ycYD1AUiDGi',
							path: 'type',
							type: 'object'
						},
						{
							key: 'ajMWTfTnNon',
							path: 'corporate_location',
							type: 'object'
						},
						{
							key: 'INvxufdBtWm',
							path: 'corporate_location->longitude',
							type: 'number'
						},
						{
							key: 'rD-95PTMpPg',
							path: 'corporate_location->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: 'muTFJweIQrU',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'MiKuexhK2UZ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'Fw2WmOpulq5',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'dVSf2jd0Osg',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'VYymodPLdOl',
							code: '<no code>',
							description: 'the view does not allow updating a corporate location'
						},
						{
							key: 'SPZ9SoWoXuS',
							code: '<no code>',
							description: 'Coordinates not possible'
						},
						{
							key: 'E_eoGcdniT-',
							code: '<no code>',
							description: 'Corporate Location cannot be updated'
						},
						{
							key: '-f3hdM6kJsY',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 71,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update Counterparty Image Url',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the url that points to the logo of the counterparty',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/image_url',
					exampleRequestBody: '{\n  "image_URL": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: '7ER-W_gn_rG',
							path: 'type',
							type: 'object'
						},
						{
							key: 'giv8i9bm_hr',
							path: 'image_URL',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'RezeBZQDw9r',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'Gl-CJh1F-Ec',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'gkhC2tsnYyH',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'SQrSP9jyrEH',
							code: '<no code>',
							description: 'the view does not allow updating an image url'
						},
						{
							key: 'z9cR1oq7UDZ',
							code: '<no code>',
							description: 'URL cannot be updated'
						},
						{
							key: 'eP51xll68ZC',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 72,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update Counterparty More Info',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the more info description of the counter party from the perpestive of the account e.g. My dentist.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/more_info',
					exampleRequestBody: '{\n  "more_info": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'khn6vIpw6-7',
							path: 'type',
							type: 'object'
						},
						{
							key: 'xKZ7RAyDz6M',
							path: 'more_info',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'aT_pFza7F4D',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'mWueM4HsQxP',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'KpxuDnmJ2YY',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'D20z6IyfLGB',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'cSywqLGVYNk',
							code: '<no code>',
							description: 'the view does not allow updating more info'
						},
						{
							key: 'tQx1X49Eixx',
							code: '<no code>',
							description: 'More Info cannot be updated'
						},
						{
							key: 'AHi_VBtilhz',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 73,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update Counterparty Physical Location',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update geocoordinates of the counterparty\'s main location',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/physical_location',
					exampleRequestBody: '{\n  "physical_location": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'u0QBuJxtukY',
							path: 'type',
							type: 'object'
						},
						{
							key: 'eQJRfYHUuji',
							path: 'physical_location',
							type: 'object'
						},
						{
							key: 'SO-lTn3GKoN',
							path: 'physical_location->longitude',
							type: 'number'
						},
						{
							key: 'ryfxvH1BYF5',
							path: 'physical_location->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: 'wzzbRa4qz2_',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Ew9I33lsPCf',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'p8Kfu9IADaH',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'anJiOkDQldU',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'NlXqY52aFOL',
							code: '<no code>',
							description: 'the view does not allow updating a physical location'
						},
						{
							key: 'DUA8hbZkwyq',
							code: '<no code>',
							description: 'Coordinates not possible'
						},
						{
							key: 'wUvRiCceHNM',
							code: '<no code>',
							description: 'Physical Location cannot be updated'
						},
						{
							key: '8CzysQisDGM',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 74,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update Counterparty Private Alias',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/private_alias',
					exampleRequestBody: '{\n  "alias": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'UsKrYrSeB1',
							path: 'type',
							type: 'object'
						},
						{
							key: '_zvyEfn47F',
							path: 'alias',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'ZiJlQh9Ok9',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '5YTITW2pz2',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'dddxEtMeUE',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '324joUgSPz',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'CanwCNpJRY',
							code: '<no code>',
							description: 'the view does not allow updating the private alias'
						},
						{
							key: 'eC5ZaCyuzl',
							code: '<no code>',
							description: 'Alias cannot be updated'
						},
						{
							key: '876NbtGTrG',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 75,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update Open Corporates Url of Counterparty',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update open corporate url of other bank account.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/open_corporates_url',
					exampleRequestBody: '{\n  "open_corporates_URL": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'faYS8vTN8sg',
							path: 'type',
							type: 'object'
						},
						{
							key: 'po_zCpGAIVD',
							path: 'open_corporates_URL',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'W670sziA12E',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'TvSqYp3f2F8',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '5tAVqnt1qb9',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '6_DiC-0JEAe',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'PT3LENW1_pk',
							code: '<no code>',
							description: 'the view does not allow updating an open corporate url'
						},
						{
							key: 'rc6hProEAfG',
							code: '<no code>',
							description: 'URL cannot be updated'
						},
						{
							key: 'Dih57wEW4Qu',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 76,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update public alias of other bank account.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.\n\nAuthentication is Optional\nAuthentication is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/public_alias',
					exampleRequestBody: '{\n  "alias": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'wKD0TxtHlc',
							path: 'type',
							type: 'object'
						},
						{
							key: '5CmAAQgGT8',
							path: 'alias',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'BZSNBH5vkE',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'n6SrXNNHGD',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'EIBF9HvnpX',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'HX1hMEoApA',
							code: '<no code>',
							description: 'the view does not allow metadata access'
						},
						{
							key: 'hxyXd-VCC1',
							code: '<no code>',
							description: 'the view does not allow updating the public alias'
						},
						{
							key: '8Y67-6hyeJ',
							code: '<no code>',
							description: 'Alias cannot be updated'
						},
						{
							key: 'a9YGFJR2Tn',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 77,
				section: {
					tag: 'Counterparty Metadata',
					title: 'Update url of other bank account.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'A url which represents the counterparty (home page url etc.)',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/other_accounts/OTHER_ACCOUNT_ID/metadata/url',
					exampleRequestBody: '{\n  "URL": "String"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'AQ5A7suSajo',
							path: 'type',
							type: 'object'
						},
						{
							key: 'HtVQUXLckkS',
							path: 'URL',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'rWcx6INh9zK',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'i6ppQyQyoJM',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'psh_R3lFqoY',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '_AXu_U3fCQ6',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: '4_Jmel5EZcE',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'zCH2Rv2jFTj',
							code: '<no code>',
							description: 'URL cannot be updated'
						},
						{
							key: 'IwPB6gCdoI_',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 78,
				section: {
					tag: 'Customer',
					title: 'Add Address to Customer',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add an Address to the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/address',
					exampleRequestBody: '{\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK"\n}',
					exampleResponseBody: '{\n  "customer_address_id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK",\n  "insert_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: 'AOuSllRtxl',
							path: 'type',
							type: 'object'
						},
						{
							key: 'wpDyL6riwj',
							path: 'city',
							type: 'string'
						},
						{
							key: 'oDX4x77B-5',
							path: 'tags',
							type: 'array'
						},
						{
							key: 'NaTUHKKLSY',
							path: 'tags->items',
							type: 'string'
						},
						{
							key: 'Fc02l-nZvw',
							path: 'postcode',
							type: 'string'
						},
						{
							key: 'lEIOTJ3h_d',
							path: 'line_1',
							type: 'string'
						},
						{
							key: '10-TvmcbiM',
							path: 'line_2',
							type: 'string'
						},
						{
							key: 'RavcsMb8J1',
							path: 'line_3',
							type: 'string'
						},
						{
							key: 'Ja7eACbHJw',
							path: 'state',
							type: 'string'
						},
						{
							key: 'aUwUQVAiIs',
							path: 'status',
							type: 'string'
						},
						{
							key: 'VtjxG9iNVu',
							path: 'country_code',
							type: 'string'
						},
						{
							key: 'NQ5uC0tOwX',
							path: 'county',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'UxsapZWFb9',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'a_USWqid1_',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'AngE1IrnoE',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'zoJmsHeseL',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 79,
				section: {
					tag: 'Customer',
					title: 'Add Social Media Handle',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add a social media handle for the customer specified by CUSTOMER_ID.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles',
					exampleRequestBody: '{\n  "customer_number": "5987953",\n  "type": "PlaceholderString",\n  "handle": "PlaceholderString",\n  "date_added": "2017-09-19T00:00:00Z",\n  "date_activated": "2017-09-19T00:00:00Z"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'kVJ0ba-Bid',
							path: 'type',
							type: 'object'
						},
						{
							key: 'WC6lzX12H-',
							path: 'type',
							type: 'string'
						},
						{
							key: 'lWfj_rD7Hn',
							path: 'customer_number',
							type: 'string'
						},
						{
							key: 'eZMq_TvFS3',
							path: 'date_activated',
							type: 'string'
						},
						{
							key: 'Tak4rGmn2k',
							path: 'date_activated->format',
							type: 'date-time'
						},
						{
							key: 'eYTD9i5-IJ',
							path: 'handle',
							type: 'string'
						},
						{
							key: 'Q4eoBwHrJr',
							path: 'date_added',
							type: 'string'
						},
						{
							key: 'UeLAivEOJk',
							path: 'date_added->format',
							type: 'date-time'
						}
					],
					possibleErrors: [{
							key: 'JvvLcEZBnW',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'SPNEQsDfD1',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'FD5iEC9Jk8',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'OiEoFpIcuo',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'U-lIhBwJKe',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'eHlhG9gVRR',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 80,
				section: {
					tag: 'Customer',
					title: 'Add Tax Residence to Customer',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Add a Tax Residence to the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residence',
					exampleRequestBody: '{\n  "domain": "Enter some domain",\n  "tax_number": "Enter some number"\n}',
					exampleResponseBody: '{\n  "domain": "Enter some domain",\n  "tax_number": "Enter some number",\n  "tax_residence_id": "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n}',
					typedBody: [{
							key: '_XJrBTFiMvt',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Hn4IG9bZLy3',
							path: 'tax_number',
							type: 'string'
						},
						{
							key: '7U0nfTw0E41',
							path: 'domain',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'FOkYYod8tkW',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'aI2J3L3FRPh',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'Q6vj7LvbS-P',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'dMAo2O3k58D',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 81,
				section: {
					tag: 'Customer',
					title: 'Create Credit Limit Order Request',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '**NOTE: This endpoint currently only returns example data.**\n\n      \nCreate credit limit order request\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests',
					exampleRequestBody: '{\n  "requested_current_rate_amount1": "String",\n  "requested_current_rate_amount2": "String",\n  "requested_current_valid_end_date": "String",\n  "current_credit_documentation": "String",\n  "temporary_requested_current_amount": "String",\n  "requested_temporary_valid_end_date": "String",\n  "temporary_credit_documentation": "String"\n}',
					exampleResponseBody: '{\n  "execution_time": "String",\n  "execution_date": "String",\n  "token": "String",\n  "short_reference": "String"\n}',
					typedBody: [{
							key: '48c5lrASD0r',
							path: 'type',
							type: 'object'
						},
						{
							key: 'qPqrW5xX0O7',
							path: 'requested_temporary_valid_end_date',
							type: 'string'
						},
						{
							key: 'hywbvrPwEdu',
							path: 'requested_temporary_valid_end_date->format',
							type: 'date-time'
						},
						{
							key: 'fmgjLna65ua',
							path: 'current_credit_documentation',
							type: 'string'
						},
						{
							key: '4myZNAELrz3',
							path: 'temporary_requested_current_amount',
							type: 'string'
						},
						{
							key: 'z_jkLU35YL_',
							path: 'requested_current_valid_end_date',
							type: 'string'
						},
						{
							key: 'QGzTA6-egr_',
							path: 'requested_current_valid_end_date->format',
							type: 'date-time'
						},
						{
							key: 'k5hQ8mgp3oi',
							path: 'requested_current_rate_amount1',
							type: 'string'
						},
						{
							key: 'b-7M4bN40hw',
							path: 'requested_current_rate_amount2',
							type: 'string'
						},
						{
							key: 'fRdijazKBZB',
							path: 'temporary_credit_documentation',
							type: 'string'
						}
					],
					possibleErrors: [{
						key: 'Om1tL87WOOM',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 82,
				section: {
					tag: 'Customer',
					title: 'Create Customer.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\nThe Customer resource stores the customer number, legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc.\nDates need to be in the format 2013-01-21T23:08:00Z\n\nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers',
					exampleRequestBody: '{\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'NjyfZqD69br',
							path: 'type',
							type: 'object'
						},
						{
							key: 'YOkGrO1z9rH',
							path: 'nameSuffix',
							type: 'string'
						},
						{
							key: 'rqFET0p7eXg',
							path: 'email',
							type: 'string'
						},
						{
							key: 'pw1upzQkBy1',
							path: 'employment_status',
							type: 'string'
						},
						{
							key: 'WJAXf-RGZ5I',
							path: 'last_ok_date',
							type: 'string'
						},
						{
							key: '1iOp0_DlYzP',
							path: 'last_ok_date->format',
							type: 'date-time'
						},
						{
							key: 'q-_hhdaMTEf',
							path: 'relationship_status',
							type: 'string'
						},
						{
							key: 'Tqi84p47IO0',
							path: 'date_of_birth',
							type: 'string'
						},
						{
							key: '4T2b_1-Kr1E',
							path: 'date_of_birth->format',
							type: 'date-time'
						},
						{
							key: 'Rq-4PCFe8jB',
							path: 'dob_of_dependants',
							type: 'array'
						},
						{
							key: 'k9nvqFYUOzA',
							path: 'dob_of_dependants->items',
							type: 'string'
						},
						{
							key: '9wFwCKQLY6V',
							path: 'dob_of_dependants->items->format',
							type: 'date-time'
						},
						{
							key: '6Tpmn5Ft-MI',
							path: 'highest_education_attained',
							type: 'string'
						},
						{
							key: 'wt8Dtr0gldS',
							path: 'credit_limit',
							type: 'object'
						},
						{
							key: 'Oul0I-KovkP',
							path: 'credit_limit->amount',
							type: 'string'
						},
						{
							key: 'id7DtO55iCZ',
							path: 'credit_limit->currency',
							type: 'string'
						},
						{
							key: 'I15aOX5j6pW',
							path: 'branchId',
							type: 'string'
						},
						{
							key: 'ojJFyO2MfTl',
							path: 'face_image',
							type: 'object'
						},
						{
							key: '7dSR8zmAiep',
							path: 'face_image->date',
							type: 'string'
						},
						{
							key: '5_yzJHklFK2',
							path: 'face_image->date->format',
							type: 'date-time'
						},
						{
							key: 'z0QUUedMNyu',
							path: 'face_image->url',
							type: 'string'
						},
						{
							key: 'gG_osvL2H2x',
							path: 'dependants',
							type: 'integer'
						},
						{
							key: 'juCTqi_Q3p1',
							path: 'legal_name',
							type: 'string'
						},
						{
							key: '3hCg8d8LGXe',
							path: 'title',
							type: 'string'
						},
						{
							key: 'InSsBzf7hE0',
							path: 'mobile_phone_number',
							type: 'string'
						},
						{
							key: 'cjj9flKjibn',
							path: 'kyc_status',
							type: 'boolean'
						},
						{
							key: 't-DGd3Lie9y',
							path: 'credit_rating',
							type: 'object'
						},
						{
							key: 'iZAQgA6J03P',
							path: 'credit_rating->source',
							type: 'string'
						},
						{
							key: 'LSfGVz5wIvZ',
							path: 'credit_rating->rating',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'zMMyqoKXK12',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '50kQ0aFBRJT',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'e5ZdXSkk2h-',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '20tuSg_7iEj',
							code: 'OBP-30006',
							description: 'Customer Number already exists. Please specify a different value for BANK_ID or CUSTOMER_NUMBER.'
						},
						{
							key: 'GpNbts7Novx',
							code: 'OBP-20005',
							description: 'User not found. Please specify a valid value for USER_ID.'
						},
						{
							key: 'XHrqyB1pZV2',
							code: 'OBP-30007',
							description: 'The User is already linked to a Customer at the bank specified by BANK_ID'
						},
						{
							key: 'QH_ph7cC7a0',
							code: 'OBP-30024',
							description: 'Could not create Consumer '
						},
						{
							key: '8yWIshvBa6y',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 83,
				section: {
					tag: 'Customer',
					title: 'Create User Customer Link.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Link a User to a Customer\n\nAuthentication is Mandatory\n\nCanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/user_customer_links',
					exampleRequestBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh"\n}',
					exampleResponseBody: '{\n  "user_customer_link_id": "String",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "date_inserted": "2017-09-19T00:00:00Z",\n  "is_active": true\n}',
					typedBody: [{
							key: 'B3nJxo33qR1',
							path: 'type',
							type: 'object'
						},
						{
							key: 'BeyqouShFfD',
							path: 'customer_id',
							type: 'string'
						},
						{
							key: 'yEWII4PHCj7',
							path: 'user_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'RF4MyziJFDz',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'X9zjFja5qLN',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'RWmeFRykhPd',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'w1tAjfijnuR',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'GNgp1I5KMl5',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'S6RnmYNx-YL',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'KY83ETxVpOu',
							code: 'OBP-30007',
							description: 'The User is already linked to a Customer at the bank specified by BANK_ID'
						},
						{
							key: '2nSwowpWTTm',
							code: 'OBP-30025',
							description: 'Could not create user_customer_links '
						},
						{
							key: 'slA8nLdw-04',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 84,
				section: {
					tag: 'Customer',
					title: 'Delete Customer Address',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete an Address of the Customer specified by CUSTOMER_ADDRESS_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'NLOjykUkNZV',
							path: 'type',
							type: 'object'
						},
						{
							key: 'R_F8dsAmv6w',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'dIVSxdpd62G',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'VzaM0gNVbVU',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'JsYRAb2Ojpn',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 85,
				section: {
					tag: 'Customer',
					title: 'Delete Tax Residence',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete a Tax Residence of the Customer specified by TAX_RESIDENCE_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax_residencies/TAX_RESIDENCE_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'Anr4jUxO_C',
							path: 'type',
							type: 'object'
						},
						{
							key: 'RvJo4QkkeJ',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'O-PGJEEhQX',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 've3sobrmYC',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'wdKhm1Dlmx',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 86,
				section: {
					tag: 'Customer',
					title: 'Get Credit Limit Order Request By Request Id',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '**NOTE: This endpoint currently only returns example data.**\n\n      \n        Get Credit Limit Order Request By Request Id\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests/REQUEST_ID',
					exampleResponseBody: '{\n  "rank_amount_1": "String",\n  "nominal_interest_1": "String",\n  "rank_amount_2": "String",\n  "nominal_interest_2": "String"\n}',
					typedBody: [],
					possibleErrors: [{
						key: 'voXie4x49wU',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 87,
				section: {
					tag: 'Customer',
					title: 'Get Credit Limit Order Requests ',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '**NOTE: This endpoint currently only returns example data.**\n\n      \nGet Credit Limit Order Requests \n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit_limit/requests',
					exampleResponseBody: '{\n  "rank_amount_1": "String",\n  "nominal_interest_1": "String",\n  "rank_amount_2": "String",\n  "nominal_interest_2": "String"\n}',
					typedBody: [],
					possibleErrors: [{
						key: '7VP-q3JlNW',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 88,
				section: {
					tag: 'Customer',
					title: 'Get CRM Events',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/crm-events',
					exampleResponseBody: '{\n  "crm_events": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "bank_id": "GENODEM1GLS",\n      "customer_name": "String",\n      "customer_number": "5987953",\n      "category": "String",\n      "detail": "String",\n      "channel": "String",\n      "scheduled_date": "2017-09-19T00:00:00Z",\n      "actual_date": "2017-09-19T00:00:00Z",\n      "result": "String"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'Ez13PXgIKa',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'kIhguiJiwm',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '0s4IStXtYq',
							code: '<no code>',
							description: 'No CRM Events available.'
						},
						{
							key: '2kZ9c6vsBQ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 89,
				section: {
					tag: 'Customer',
					title: 'Get Customer Addresses',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the Addresses of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses',
					exampleResponseBody: '{\n  "addresses": [\n    {\n      "customer_address_id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "line_1": "No 1 the Road",\n      "line_2": "The Place",\n      "line_3": "The Hill",\n      "city": "Berlin",\n      "county": "",\n      "state": "Brandenburg",\n      "postcode": "13359",\n      "country_code": "DE",\n      "tags": [\n        "mailing",\n        "home"\n      ],\n      "status": "OK",\n      "insert_date": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'nBwTY6tdwy',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '-IhR0dM3ZJ',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '5EQGiGAsZ9',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 90,
				section: {
					tag: 'Customer',
					title: 'Get Customer by CUSTOMER_ID',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Gets the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'CGKZhOQOam4',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'M6db4pUXu17',
							code: 'OBP-30008',
							description: 'User Customer Link not found by USER_ID'
						},
						{
							key: 'keH3OnKK6q4',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 91,
				section: {
					tag: 'Customer',
					title: 'Get Customer by CUSTOMER_NUMBER',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Gets the Customer specified by CUSTOMER_NUMBER.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/customer-number',
					exampleRequestBody: '{\n  "customer_number": "5987953"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'pXHb729diS',
							path: 'type',
							type: 'object'
						},
						{
							key: 'lhI1cFqTtY',
							path: 'customer_number',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'qdnGKRpoUF',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'BI918IC9E2',
							code: 'OBP-30008',
							description: 'User Customer Link not found by USER_ID'
						},
						{
							key: 'rsTORf3mbL',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 92,
				section: {
					tag: 'Customer',
					title: 'Get Customer Social Media Handles',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get social media handles for a customer specified by CUSTOMER_ID.\n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/social_media_handles',
					exampleResponseBody: '{\n  "checks": [\n    {\n      "customer_number": "5987953",\n      "type": "PlaceholderString",\n      "handle": "PlaceholderString",\n      "date_added": "2017-09-19T00:00:00Z",\n      "date_activated": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '507kJVAyKbt',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Ljsb86YfGEM',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '2JsvngnFMUf',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'TgbyXo7Cdn8',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 93,
				section: {
					tag: 'Customer',
					title: 'Get Customers for Current User',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Gets all Customers that are linked to a User.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/current/customers',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "19900101",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "19900101"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'RwFImmQRyEy',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'i8Zge_rOTmJ',
							code: 'OBP-30008',
							description: 'User Customer Link not found by USER_ID'
						},
						{
							key: 'C6VSrf2kniJ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 94,
				section: {
					tag: 'Customer',
					title: 'Get Customers for current User at Bank',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Retuns a list of Customers at the Bank that are linked to the currently authenticated User.\n\n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'fqBvxJbm7zA',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'C6ZsSnCR1WU',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'qZ1Cc8JrnyN',
							code: 'OBP-30008',
							description: 'User Customer Link not found by USER_ID'
						},
						{
							key: 'kthk3T2Y6hZ',
							code: 'OBP-30008',
							description: 'User Customer Link not found by USER_ID'
						},
						{
							key: 'NBbDdLhRPRa',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: '3qBuCsY8Kcp',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 95,
				section: {
					tag: 'Customer',
					title: 'Get Tax Residences of Customer',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the Tax Residences of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/tax-residences',
					exampleResponseBody: '{\n  "tax_residence": [\n    {\n      "domain": "Enter some domain",\n      "tax_number": "Enter some number",\n      "tax_residence_id": "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'HHdiP-NwKX',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'ZibZfFTcRG',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'mktDe2Btd3',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 96,
				section: {
					tag: 'Customer',
					title: 'Update the Address of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update an Address of the Customer specified by CUSTOMER_ADDRESS_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/addresses/CUSTOMER_ADDRESS_ID',
					exampleRequestBody: '{\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK"\n}',
					exampleResponseBody: '{\n  "customer_address_id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "line_1": "No 1 the Road",\n  "line_2": "The Place",\n  "line_3": "The Hill",\n  "city": "Berlin",\n  "county": "",\n  "state": "Brandenburg",\n  "postcode": "13359",\n  "country_code": "DE",\n  "tags": [\n    "mailing",\n    "home"\n  ],\n  "status": "OK",\n  "insert_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: '9B2EvYRO6bu',
							path: 'type',
							type: 'object'
						},
						{
							key: 'veWPSpLE_RX',
							path: 'city',
							type: 'string'
						},
						{
							key: 'v08d-t4YCga',
							path: 'tags',
							type: 'array'
						},
						{
							key: 'CPO8-w9o2ME',
							path: 'tags->items',
							type: 'string'
						},
						{
							key: 'fuiL5kM3i6x',
							path: 'postcode',
							type: 'string'
						},
						{
							key: 'LcentR0Xcge',
							path: 'line_1',
							type: 'string'
						},
						{
							key: '9dI6hIahs-1',
							path: 'line_2',
							type: 'string'
						},
						{
							key: 'IYLbUkrSM0s',
							path: 'line_3',
							type: 'string'
						},
						{
							key: 'SpMqS72xXdU',
							path: 'state',
							type: 'string'
						},
						{
							key: 'Qj1CnpawBl-',
							path: 'status',
							type: 'string'
						},
						{
							key: 'YsFTijgNMv2',
							path: 'country_code',
							type: 'string'
						},
						{
							key: '1WyCM9RaWEV',
							path: 'county',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'hOHgah9ZdgQ',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '_QSqWyAllA1',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '_SU6FqbkQMk',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '5mUvTdJ3bYu',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 97,
				section: {
					tag: 'Customer',
					title: 'Update the Branch of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the Branch of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/branch',
					exampleRequestBody: '{\n  "branch_id": "123"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'drI5Lv0lAwd',
							path: 'type',
							type: 'object'
						},
						{
							key: 'KeyDDujdHGA',
							path: 'branch_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '7yTPHYM44Ka',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'FnKL2L1Avl5',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'gvpteuuePAq',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'Stdz662Fw61',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 98,
				section: {
					tag: 'Customer',
					title: 'Update the credit limit of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the credit limit of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-limit',
					exampleRequestBody: '{\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "1000"\n  }\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: '9ws6ncE9b76',
							path: 'type',
							type: 'object'
						},
						{
							key: 'KrZTvCtMFaK',
							path: 'credit_limit',
							type: 'object'
						},
						{
							key: 'vj53eeCA-8X',
							path: 'credit_limit->amount',
							type: 'string'
						},
						{
							key: 'OE3V3Ca9IuC',
							path: 'credit_limit->currency',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'jfF3-zddTVP',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '7XKHEABOBL4',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'xzCRKMJWJIA',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'JOc1LZBDFkd',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 99,
				section: {
					tag: 'Customer',
					title: 'Update the credit rating and source of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the credit rating and source of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/credit-rating-and-source',
					exampleRequestBody: '{\n  "credit_rating": "Good",\n  "credit_source": "Bank"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'NP-S8kFxf-X',
							path: 'type',
							type: 'object'
						},
						{
							key: '00iA4Anv7Vn',
							path: 'credit_source',
							type: 'string'
						},
						{
							key: 'CztdNmf-6x2',
							path: 'credit_rating',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'iZagLdpeL9z',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'NhD3YPahHz-',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'A9W8N1kC0ew',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'ch_TR_EK1Oh',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 100,
				section: {
					tag: 'Customer',
					title: 'Update the email of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update an email of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/email',
					exampleRequestBody: '{\n  "email": "marko@tesobe.com"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'OBScO3XFuEi',
							path: 'type',
							type: 'object'
						},
						{
							key: 'foheV2pkmi_',
							path: 'email',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'FZCpVvoKy9-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '6cB2LTHAgf1',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'cGUaMsAUX-W',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'OT_xyALJy7k',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 101,
				section: {
					tag: 'Customer',
					title: 'Update the identity data of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the identity data of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/identity',
					exampleRequestBody: '{\n  "legal_name": "Eveline Tripman",\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "name_suffix": "Sr"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'xOC5YL4Y3ku',
							path: 'type',
							type: 'object'
						},
						{
							key: '6LpJOxxuJJp',
							path: 'name_suffix',
							type: 'string'
						},
						{
							key: 'kiv6KdmrHnO',
							path: 'title',
							type: 'string'
						},
						{
							key: 'zU_KoM06RyR',
							path: 'date_of_birth',
							type: 'string'
						},
						{
							key: 'Tmqr0trOV62',
							path: 'date_of_birth->format',
							type: 'date-time'
						},
						{
							key: '5yZHbuesDz9',
							path: 'legal_name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'lMCNJqtoZ8S',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '1WvCwMxDrgq',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '_amhlKng3YB',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'mNsvHDxxECi',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 102,
				section: {
					tag: 'Customer',
					title: 'Update the mobile number of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the mobile number of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/mobile-number',
					exampleRequestBody: '{\n  "mobile_phone_number": "+381631954907"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'jjSm4BSBXRV',
							path: 'type',
							type: 'object'
						},
						{
							key: '1YSwq1ZQyng',
							path: 'mobile_phone_number',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'GVmG_GTAWxl',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '2TfndW_aAD1',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'Y1Q8ehL1Fa0',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'FdGZM2bb4KN',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 103,
				section: {
					tag: 'Customer',
					title: 'Update the number of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the number of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/number',
					exampleRequestBody: '{\n  "customer_number": "5987953"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'bFOGVCb7ehM',
							path: 'type',
							type: 'object'
						},
						{
							key: 'ufe6zU8z2tJ',
							path: 'customer_number',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'WrR9RVQXj_Q',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'hRZ4uZUNvN1',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'leYocR_vXzJ',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'GKI6NfJ0sDY',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 104,
				section: {
					tag: 'Customer',
					title: 'Update the other data of a Customer',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update the other data of the Customer specified by CUSTOMER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/data',
					exampleRequestBody: '{\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "relationship_status": "single",\n  "dependants": 10,\n  "highest_education_attained": "Master",\n  "employment_status": "worker"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "legal_name": "Eveline Tripman",\n  "mobile_phone_number": "+44 07972 444 876",\n  "email": "eveline@example.com",\n  "face_image": {\n    "url": "www.openbankproject",\n    "date": "2017-09-19T00:00:00Z"\n  },\n  "date_of_birth": "2017-09-19T00:00:00Z",\n  "relationship_status": "single",\n  "dependants": 10,\n  "dob_of_dependants": [\n    "2017-09-19T00:00:00Z"\n  ],\n  "credit_rating": {\n    "rating": "OBP",\n    "source": "OBP"\n  },\n  "credit_limit": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "highest_education_attained": "Master",\n  "employment_status": "worker",\n  "kyc_status": true,\n  "last_ok_date": "2017-09-19T00:00:00Z",\n  "title": "Dr.",\n  "branchId": "DERBY6",\n  "nameSuffix": "Sr"\n}',
					typedBody: [{
							key: 'GO_Uv_05NL',
							path: 'type',
							type: 'object'
						},
						{
							key: 'D3KcSLyn_m',
							path: 'employment_status',
							type: 'string'
						},
						{
							key: 'GFeenho48d',
							path: 'relationship_status',
							type: 'string'
						},
						{
							key: '0RKm4pFwO5',
							path: 'highest_education_attained',
							type: 'string'
						},
						{
							key: '2L2nYR8SFD',
							path: 'face_image',
							type: 'object'
						},
						{
							key: 'Sc-SuQRUSh',
							path: 'face_image->date',
							type: 'string'
						},
						{
							key: 'Pbx5_15aFZ',
							path: 'face_image->date->format',
							type: 'date-time'
						},
						{
							key: 'lPIIriSv8J',
							path: 'face_image->url',
							type: 'string'
						},
						{
							key: 'WWyW2NdcTj',
							path: 'dependants',
							type: 'integer'
						}
					],
					possibleErrors: [{
							key: 'AZ-eBpEyHr',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Zt3wmiEWhH',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '4a3B77eOfK',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'eWUVgh1o7u',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 105,
				section: {
					tag: 'FX',
					title: 'Create Fx',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Create or Update Fx for the Bank.\n\nExample:\n\n“from_currency_code”:“EUR”,\n“to_currency_code”:“USD”,\n“conversion_value”: 1.136305,\n“inverse_conversion_value”: 1 / 1.136305 = 0.8800454103431737,\n\n Thus 1 Euro = 1.136305 US Dollar\n and\n 1 US Dollar = 0.8800 Euro\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx',
					exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "from_currency_code": "EUR",\n  "to_currency_code": "USD",\n  "conversion_value": 1.136305,\n  "inverse_conversion_value": 0.8800454103431737,\n  "effective_date": "2017-09-19T00:00:00Z"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "from_currency_code": "EUR",\n  "to_currency_code": "USD",\n  "conversion_value": 1.136305,\n  "inverse_conversion_value": 0.8800454103431737,\n  "effective_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: 'Hj653A8OObC',
							path: 'type',
							type: 'object'
						},
						{
							key: 'NkWVxr_o6gc',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: 'uxWBQxFedBO',
							path: 'conversion_value',
							type: 'number'
						},
						{
							key: 'YAyLRK9uepR',
							path: 'from_currency_code',
							type: 'string'
						},
						{
							key: 'sTRq2dPJPW7',
							path: 'effective_date',
							type: 'string'
						},
						{
							key: 'Xb8pV_Ccy8n',
							path: 'effective_date->format',
							type: 'date-time'
						},
						{
							key: 'DI6Vmp9G5Gq',
							path: 'inverse_conversion_value',
							type: 'number'
						},
						{
							key: 'UU92hxcxn-n',
							path: 'to_currency_code',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '8GKeTsvmtRI',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'ed5ofjsbaBl',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'tPSK_fJumQP',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'ElMZ-Zsdd_h',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 106,
				section: {
					tag: 'FX',
					title: 'Get Current FxRate',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the latest FX rate specified by BANK_ID, FROM_CURRENCY_CODE and TO_CURRENCY_CODE\n\nOBP may try different sources of FX rate information depending on the Connector in operation.\n\nFor example we want to convert EUR => USD:\n\nOBP will:\n1st try - Connector (database, core banking system or external FX service)\n2nd try part 1 - fallbackexchangerates/eur.json\n2nd try part 2 - fallbackexchangerates/usd.json (the inverse rate is used)\n3rd try - Hardcoded map of FX rates.\n\n![FX Flow](https://user-images.githubusercontent.com/485218/60005085-1eded600-966e-11e9-96fb-798b102d9ad0.png)\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/fx/FROM_CURRENCY_CODE/TO_CURRENCY_CODE',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "from_currency_code": "EUR",\n  "to_currency_code": "GBP",\n  "conversion_value": 1.001,\n  "inverse_conversion_value": 0.998,\n  "effective_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'olGlvrP938D',
							code: 'OBP-10003',
							description: 'Invalid Currency Value. It should be three letters ISO Currency Code. '
						},
						{
							key: 'uoklNvF5BKs',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'M_lgyTAtfVn',
							code: 'OBP-10004',
							description: 'ISO Currency code combination not supported for FX. Please modify the FROM_CURRENCY_CODE or TO_CURRENCY_CODE. '
						},
						{
							key: 'St8vt8QmROo',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 107,
				section: {
					tag: 'KYC',
					title: 'Add KYC Check',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_check/KYC_CHECK_ID',
					exampleRequestBody: '{\n  "customer_number": "5987953",\n  "date": "2017-09-19T00:00:00Z",\n  "how": "online_meeting",\n  "staff_user_id": "67876",\n  "staff_name": "Simon",\n  "satisfied": true,\n  "comments": "String"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "id": "PlaceholderString",\n  "customer_number": "5987953",\n  "date": "2017-09-19T00:00:00Z",\n  "how": "PlaceholderString",\n  "staff_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "staff_name": "PlaceholderString",\n  "satisfied": true,\n  "comments": "PlaceholderString"\n}',
					typedBody: [{
							key: 'jZ6fBsOGev8',
							path: 'type',
							type: 'object'
						},
						{
							key: '8SEN7eevcuC',
							path: 'date',
							type: 'string'
						},
						{
							key: '9nyED36XfQH',
							path: 'date->format',
							type: 'date-time'
						},
						{
							key: 'o42UMG76bjl',
							path: 'customer_number',
							type: 'string'
						},
						{
							key: 'H6wA-vTKy_m',
							path: 'staff_user_id',
							type: 'string'
						},
						{
							key: 'RDrBz3xDxm6',
							path: 'staff_name',
							type: 'string'
						},
						{
							key: 'h9euMOOvoLK',
							path: 'comments',
							type: 'string'
						},
						{
							key: '1h_Vdnc9zld',
							path: 'how',
							type: 'string'
						},
						{
							key: 'QPl4XtDWopb',
							path: 'satisfied',
							type: 'boolean'
						}
					],
					possibleErrors: [{
							key: 'QpM4m3h8og-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'zsNzFiIuG7-',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'kL2LAgWrw8O',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'wlCjJ31PoFg',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'X-4XRmZrWU6',
							code: 'OBP-00004',
							description: 'Server error'
						},
						{
							key: '-Y7FB90yRfe',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 108,
				section: {
					tag: 'KYC',
					title: 'Add KYC Document.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc. ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_documents/KYC_DOCUMENT_ID',
					exampleRequestBody: '{\n  "customer_number": "5987953",\n  "type": "passport",\n  "number": "12345",\n  "issue_date": "2017-09-19T00:00:00Z",\n  "issue_place": "Berlin",\n  "expiry_date": "2017-09-19T00:00:00Z"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "id": "PlaceholderString",\n  "customer_number": "5987953",\n  "type": "PlaceholderString",\n  "number": "PlaceholderString",\n  "issue_date": "2017-09-19T00:00:00Z",\n  "issue_place": "PlaceholderString",\n  "expiry_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: '0ou4Dx6fD29',
							path: 'type',
							type: 'object'
						},
						{
							key: 'JWKnuJ0sbv9',
							path: 'issue_place',
							type: 'string'
						},
						{
							key: 'xy0kMU9dSCM',
							path: 'customer_number',
							type: 'string'
						},
						{
							key: 'GMTMRoBRqOE',
							path: 'expiry_date',
							type: 'string'
						},
						{
							key: 'qx5UVa6rUvh',
							path: 'expiry_date->format',
							type: 'date-time'
						},
						{
							key: 'A0xJtZ6iPbL',
							path: 'type',
							type: 'string'
						},
						{
							key: '9Fc5qzl6xei',
							path: 'number',
							type: 'string'
						},
						{
							key: 'EFNM5lBl4or',
							path: 'issue_date',
							type: 'string'
						},
						{
							key: 'xQ7z2ep2hkN',
							path: 'issue_date->format',
							type: 'date-time'
						}
					],
					possibleErrors: [{
							key: 'roB6LElzTwr',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'TYlIlpBDC2V',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '9pmjSR3ixvJ',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '4epK9RJ3WvZ',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'vjvUP9fzm9X',
							code: 'Server error',
							description: 'could not add KycDocument'
						},
						{
							key: 'pCfm9KId2oU',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 109,
				section: {
					tag: 'KYC',
					title: 'Add KYC Media.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_media/KYC_MEDIA_ID',
					exampleRequestBody: '{\n  "customer_number": "5987953",\n  "type": "image",\n  "url": "http://www.example.com/id-docs/123/image.png",\n  "date": "2017-09-19T00:00:00Z",\n  "relates_to_kyc_document_id": "123",\n  "relates_to_kyc_check_id": "123"\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "customer_id": "PlaceholderString",\n  "id": "PlaceholderString",\n  "customer_number": "5987953",\n  "type": "PlaceholderString",\n  "url": "PlaceholderString",\n  "date": "2017-09-19T00:00:00Z",\n  "relates_to_kyc_document_id": "PlaceholderString",\n  "relates_to_kyc_check_id": "PlaceholderString"\n}',
					typedBody: [{
							key: 'uZzFmSXNGKC',
							path: 'type',
							type: 'object'
						},
						{
							key: 'LKRlKTQO71a',
							path: 'date',
							type: 'string'
						},
						{
							key: 'mFn2qXhiZw0',
							path: 'date->format',
							type: 'date-time'
						},
						{
							key: 'VFnF1ICzR0s',
							path: 'url',
							type: 'string'
						},
						{
							key: '6l3haTsqf-W',
							path: 'customer_number',
							type: 'string'
						},
						{
							key: 'UoSGFejoKkF',
							path: 'relates_to_kyc_check_id',
							type: 'string'
						},
						{
							key: 'ip8aME8lb8w',
							path: 'relates_to_kyc_document_id',
							type: 'string'
						},
						{
							key: '3iQrGzvP0U6',
							path: 'type',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '-0QJ9tpz6rP',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'eSxIrjM2fg4',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'uG3EKTR_oL2',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'X18EMSPLdRa',
							code: 'OBP-00004',
							description: 'Server error'
						},
						{
							key: 'XR2z7ez-FrK',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 110,
				section: {
					tag: 'KYC',
					title: 'Add KYC Status',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/customers/CUSTOMER_ID/kyc_statuses',
					exampleRequestBody: '{\n  "customer_number": "5987953",\n  "ok": true,\n  "date": "2017-09-19T00:00:00Z"\n}',
					exampleResponseBody: '{\n  "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n  "customer_number": "5987953",\n  "ok": true,\n  "date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: 'Labn99W1vF',
							path: 'type',
							type: 'object'
						},
						{
							key: '_QOQ4gh2TQ',
							path: 'date',
							type: 'string'
						},
						{
							key: 'tdyOiDQnvy',
							path: 'date->format',
							type: 'date-time'
						},
						{
							key: 'ZELqBeHGsX',
							path: 'ok',
							type: 'boolean'
						},
						{
							key: 'U8ZCac5YNb',
							path: 'customer_number',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'yoJAiU3A9U',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'KaJFnSb04s',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'rZltFA77FK',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'ZqDHQ-FG5i',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'NKV3UZ124n',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'GhaOdA99Zl',
							code: 'OBP-00004',
							description: 'Server error'
						},
						{
							key: 'Lfw3Gl3rni',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						}
					]
				}
			},
			{
				index: 111,
				section: {
					tag: 'KYC',
					title: 'Get Customer KYC Checks',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get KYC checks for the Customer specified by CUSTOMER_ID.\n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_checks',
					exampleResponseBody: '{\n  "checks": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "id": "PlaceholderString",\n      "customer_number": "5987953",\n      "date": "2017-09-19T00:00:00Z",\n      "how": "PlaceholderString",\n      "staff_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "staff_name": "PlaceholderString",\n      "satisfied": true,\n      "comments": "PlaceholderString"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'qz85n-7UvxW',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'ok3Wa8OXhMh',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'fX7pWAa5ewA',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 112,
				section: {
					tag: 'KYC',
					title: 'Get Customer KYC Documents',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get KYC (know your customer) documents for a customer specified by CUSTOMER_ID\nGet a list of documents that affirm the identity of the customer\nPassport, driving licence etc.\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_documents',
					exampleResponseBody: '{\n  "documents": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "id": "PlaceholderString",\n      "customer_number": "5987953",\n      "type": "PlaceholderString",\n      "number": "PlaceholderString",\n      "issue_date": "2017-09-19T00:00:00Z",\n      "issue_place": "PlaceholderString",\n      "expiry_date": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'nDzYZzWx9yq',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'gI2SPScPoZo',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: '7RPDU1Nh19b',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 113,
				section: {
					tag: 'KYC',
					title: 'Get Customer KYC statuses',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the KYC statuses for a customer specified by CUSTOMER_ID over time.\n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_statuses',
					exampleResponseBody: '{\n  "statuses": [\n    {\n      "customer_id": "7uy8a7e4-6d02-40e3-a129-0b2bf89de8uh",\n      "customer_number": "5987953",\n      "ok": true,\n      "date": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'EAeU5fzgdT2',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'zn2yyvoIIzL',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: '3AGuXc108EG',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 114,
				section: {
					tag: 'KYC',
					title: 'Get KYC Media for a customer',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get KYC media (scans, pictures, videos) that affirms the identity of the customer.\n\nAuthentication is Mandatory',
					specificUrl: '/obp/v4.0.0/customers/CUSTOMER_ID/kyc_media',
					exampleResponseBody: '{\n  "medias": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "customer_id": "PlaceholderString",\n      "id": "PlaceholderString",\n      "customer_number": "5987953",\n      "type": "PlaceholderString",\n      "url": "PlaceholderString",\n      "date": "2017-09-19T00:00:00Z",\n      "relates_to_kyc_document_id": "PlaceholderString",\n      "relates_to_kyc_check_id": "PlaceholderString"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'pKzyg_thQsL',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'w5HTpsb0Ihr',
							code: 'OBP-30046',
							description: 'Customer not found. Please specify a valid value for CUSTOMER_ID.'
						},
						{
							key: 'aatPF7EtThB',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 115,
				section: {
					tag: 'Product',
					title: 'Create Product',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Create or Update Product for the Bank.\n\n\nTypical Super Family values / Asset classes are:\n\nDebt\nEquity\nFX\nCommodity\nDerivative\n\n\n\nProduct hiearchy vs Product Collections:\n\n* You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.\n\n* You can define a collection (also known as baskets or buckets) of products using Product Collections.\n\n      \n\n\nAuthentication is Mandatory\n\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE',
					exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "name": "product name",\n  "parent_product_code": "parent product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  }\n}',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "code": "product_code",\n  "parent_product_code": "parent",\n  "name": "product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "product_attributes": [\n    {\n      "product_code": "saving1",\n      "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
					typedBody: [{
							key: 'xYSkF1Ehcxq',
							path: 'type',
							type: 'object'
						},
						{
							key: 'IYa0bwJt16K',
							path: 'super_family',
							type: 'string'
						},
						{
							key: 'L_f740odCwS',
							path: 'bank_id',
							type: 'string'
						},
						{
							key: '_bjfoTN0wC2',
							path: 'description',
							type: 'string'
						},
						{
							key: 'PKf-wcuWDfG',
							path: 'details',
							type: 'string'
						},
						{
							key: 'nPxyZ6fJfFe',
							path: 'more_info_url',
							type: 'string'
						},
						{
							key: 'fZcTUpbjE2C',
							path: 'family',
							type: 'string'
						},
						{
							key: 'MTy_sylWtCb',
							path: 'parent_product_code',
							type: 'string'
						},
						{
							key: 'sz3JTqL_Y1G',
							path: 'meta',
							type: 'object'
						},
						{
							key: '_flSdPNVuCc',
							path: 'meta->license',
							type: 'object'
						},
						{
							key: 'R8U9Wu6vkJi',
							path: 'meta->license->name',
							type: 'string'
						},
						{
							key: 'UDxBOAKiQzl',
							path: 'meta->license->id',
							type: 'string'
						},
						{
							key: 'GJ1gfDNN8uS',
							path: 'name',
							type: 'string'
						},
						{
							key: '-voGQL3BEpM',
							path: 'category',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'nUyy-OxFJPp',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'OQtLyk2pqNz',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'SpIFZzXUWgc',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'hMbdhD8QRoy',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 116,
				section: {
					tag: 'Product',
					title: 'Create Product Attribute',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: ' Create Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nTypical product attributes might be:\n\nISIN (for International bonds)\nVKN (for German bonds)\nREDCODE (markit short code for credit derivative)\nLOAN_ID (e.g. used for Anacredit reporting)\n\nISSUE_DATE (When the bond was issued in the market)\nMATURITY_DATE (End of life time of a product)\nTRADABLE\n\nSee [FPML](http://www.fpml.org/) for more examples.\n\n\nThe type field must be one of "STRING", "INTEGER", "DOUBLE" or DATE_WITH_DAY"\n\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attribute',
					exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					exampleResponseBody: '{\n  "product_code": "saving1",\n  "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					typedBody: [{
							key: 'bsosdO7wZ8',
							path: 'type',
							type: 'object'
						},
						{
							key: 'lT90csScJh',
							path: 'value',
							type: 'string'
						},
						{
							key: '1sTy_t9u1Q',
							path: 'type',
							type: 'string'
						},
						{
							key: '9NxIV-hBxE',
							path: 'name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'yMM0IG-aWE',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'Smoh36OzlH',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 117,
				section: {
					tag: 'Product',
					title: 'Delete Product Attribute',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: ' Delete Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nDelete a Product Attribute by its id.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'Y9Arh9XmBMe',
							path: 'type',
							type: 'object'
						},
						{
							key: 'zc78YudqRuO',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '69kgRlqTWGi',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'gPSXGzipNGf',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 118,
				section: {
					tag: 'Product',
					title: 'Get Bank Product',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about a financial Product offered by the bank specified by BANK_ID and PRODUCT_CODE including:\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License the data under this endpoint is released under\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE',
					exampleResponseBody: '{\n  "bank_id": "GENODEM1GLS",\n  "code": "product_code",\n  "parent_product_code": "parent",\n  "name": "product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "product_attributes": [\n    {\n      "product_code": "saving1",\n      "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "name": "OVERDRAFT_START_DATE",\n      "type": "DATE_WITH_DAY",\n      "value": "2012-04-23"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'AcYnW1QfZI',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'vDI-HoH9I6',
							code: 'OBP-30011',
							description: 'Product not found. Please specify a valid value for PRODUCT_CODE.'
						},
						{
							key: 'rlzsXmNeOz',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 119,
				section: {
					tag: 'Product',
					title: 'Get Product Attribute',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: ' Get Product Attribute\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nGet one product attribute by its id.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
					exampleResponseBody: '{\n  "product_code": "saving1",\n  "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'm0Dh6C220uu',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'AdiCyAqe1lw',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 120,
				section: {
					tag: 'Product',
					title: 'Get Product Tree',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about a particular financial product specified by BANK_ID and PRODUCT_CODE\nand it\'s parent product(s) recursively as specified by parent_product_code.\n\nEach product includes the following information.\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License: The licence under which this product data is released. Licence can be an Open Data licence such as Open Data Commons Public Domain Dedication and License (PDDL) or Copyright etc.\n\n\n\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-tree/PRODUCT_CODE',
					exampleResponseBody: '{\n  "bank_id": "testBank2",\n  "code": "PRODUCT_CODE",\n  "name": "product name",\n  "category": "category",\n  "family": "family",\n  "super_family": "super family",\n  "more_info_url": "www.example.com/prod1/more-info.html",\n  "details": "Details",\n  "description": "Description",\n  "meta": {\n    "license": {\n      "id": "5",\n      "name": "TESOBE"\n    }\n  },\n  "parent_product": {\n    "bank_id": "testBank2",\n    "code": "PARENT_CODE",\n    "name": "product name",\n    "category": "category",\n    "family": "family",\n    "super_family": "super family",\n    "more_info_url": "www.example.com/prod1/more-info.html",\n    "details": "Details",\n    "description": "Description",\n    "meta": {\n      "license": {\n        "id": "5",\n        "name": "TESOBE"\n      }\n    },\n    "parent_product": {\n      "bank_id": "testBank2",\n      "code": "GRANDPARENT_CODE",\n      "name": "product name",\n      "category": "category",\n      "family": "family",\n      "super_family": "super family",\n      "more_info_url": "www.example.com/prod1/more-info.html",\n      "details": "Details",\n      "description": "Description",\n      "meta": {\n        "license": {\n          "id": "5",\n          "name": "TESOBE"\n        }\n      }\n    }\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'bJGtnNJWBNj',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'qXCIowQlsFp',
							code: 'OBP-30011',
							description: 'Product not found. Please specify a valid value for PRODUCT_CODE.'
						},
						{
							key: 'znpeXUZ1WM0',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 121,
				section: {
					tag: 'Product',
					title: 'Get Products',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about the financial products offered by a bank specified by BANK_ID including:\n\n* Name\n* Code\n* Parent Product Code\n* Category\n* Family\n* Super Family\n* More info URL\n* Description\n* Terms and Conditions\n* License the data under this endpoint is released under\nAuthentication is Optional',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products',
					exampleResponseBody: '{\n  "products": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "code": "product_code",\n      "parent_product_code": "parent",\n      "name": "product name",\n      "category": "category",\n      "family": "family",\n      "super_family": "super family",\n      "more_info_url": "www.example.com/prod1/more-info.html",\n      "details": "Details",\n      "description": "Description",\n      "meta": {\n        "license": {\n          "id": "5",\n          "name": "TESOBE"\n        }\n      },\n      "product_attributes": [\n        {\n          "product_code": "saving1",\n          "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n          "name": "OVERDRAFT_START_DATE",\n          "type": "DATE_WITH_DAY",\n          "value": "2012-04-23"\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'oUn1cQcsJ3z',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '18_tbiR4MKb',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'Mk0Rz8_90kA',
							code: 'OBP-30011',
							description: 'Product not found. Please specify a valid value for PRODUCT_CODE.'
						},
						{
							key: 'xBbT2nTj2lF',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 122,
				section: {
					tag: 'Product',
					title: 'Update Product Attribute',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: ' Update Product Attribute. \n\n\n\nProduct Attributes are used to describe a financial Product with a list of typed key value pairs.\n\nEach Product Attribute is linked to its Product by PRODUCT_CODE\n\n\n       \n\nUpdate one Product Attribute by its id.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/products/PRODUCT_CODE/attributes/PRODUCT_ATTRIBUTE_ID',
					exampleRequestBody: '{\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					exampleResponseBody: '{\n  "product_code": "saving1",\n  "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "name": "OVERDRAFT_START_DATE",\n  "type": "DATE_WITH_DAY",\n  "value": "2012-04-23"\n}',
					typedBody: [{
							key: 'ch8QOk8Yw2z',
							path: 'type',
							type: 'object'
						},
						{
							key: 'zKDUhvA7YlJ',
							path: 'value',
							type: 'string'
						},
						{
							key: 'PkCRVI9j6KX',
							path: 'type',
							type: 'string'
						},
						{
							key: 'r6T3-XaU8QP',
							path: 'name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'YIS81_WloIW',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'wNcmbUh9bV9',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 123,
				section: {
					tag: 'Product Collection',
					title: 'Create Product Collection',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Create or Update a Product Collection at the Bank.\n\nUse Product Collections to create Product "Baskets", "Portfolios", "Indices", "Collections", "Underlyings-lists", "Buckets" etc. etc.\n\nThere is a many to many relationship between Products and Product Collections:\n\n* A Product can exist in many Collections\n\n* A Collection can contain many Products.\n\nA collection has collection code, one parent Product and one or more child Products.\n\n\n\n\nProduct hiearchy vs Product Collections:\n\n* You can define a hierarchy of products - so that a child Product inherits attributes of its parent Product -  using the parent_product_code in Product.\n\n* You can define a collection (also known as baskets or buckets) of products using Product Collections.\n\n      \n\nAuthentication is Mandatory\n\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE',
					exampleRequestBody: '{\n  "parent_product_code": "A",\n  "children_product_codes": [\n    "B",\n    "C",\n    "D"\n  ]\n}',
					exampleResponseBody: '{\n  "product_collection": [\n    {\n      "collection_code": "C",\n      "product_code": "D",\n      "items": [\n        {\n          "member_product_code": "A"\n        },\n        {\n          "member_product_code": "B"\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [{
							key: 'y_kUPBfvtUM',
							path: 'type',
							type: 'object'
						},
						{
							key: 'McW31s7sxMF',
							path: 'children_product_codes',
							type: 'array'
						},
						{
							key: '0EQ9JuHC9we',
							path: 'children_product_codes->items',
							type: 'string'
						},
						{
							key: '76iXl8wveTt',
							path: 'parent_product_code',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'OgZBf_pq0UA',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'X2MywbDyi-G',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'cbcj-gxWNQx',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'YGVB_WlbuxY',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 124,
				section: {
					tag: 'Product Collection',
					title: 'Get Product Collection',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns information about the financial Product Collection specified by BANK_ID and COLLECTION_CODE:\n\n          ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/product-collections/COLLECTION_CODE',
					exampleResponseBody: '{\n  "collection_code": "A",\n  "products": [\n    {\n      "bank_id": "GENODEM1GLS",\n      "code": "product_code",\n      "parent_product_code": "parent",\n      "name": "product name",\n      "category": "category",\n      "family": "family",\n      "super_family": "super family",\n      "more_info_url": "www.example.com/prod1/more-info.html",\n      "details": "Details",\n      "description": "Description",\n      "meta": {\n        "license": {\n          "id": "5",\n          "name": "TESOBE"\n        }\n      },\n      "product_attributes": [\n        {\n          "product_code": "saving1",\n          "product_attribute_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n          "name": "OVERDRAFT_START_DATE",\n          "type": "DATE_WITH_DAY",\n          "value": "2012-04-23"\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'kqLP8D5BY7H',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'UWeKzPfUn5P',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '4-x6m6Q41hJ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 125,
				section: {
					tag: 'Role',
					title: 'Add Entitlement for a User.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create Entitlement. Grant Role to User.\n\nEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\n\nFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. "bank_id":""\n\nFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. "bank_id":"my-bank-id"\n\nAuthentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.',
					specificUrl: '/obp/v4.0.0/users/USER_ID/entitlements',
					exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "role_name": "String"\n}',
					exampleResponseBody: '{\n  "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n  "role_name": "CanQueryOtherUser",\n  "bank_id": "GENODEM1GLS"\n}',
					typedBody: [{
							key: 'LjX0NXhrp9I',
							path: 'type',
							type: 'object'
						},
						{
							key: '3J5mNxwpLHo',
							path: 'role_name',
							type: 'string'
						},
						{
							key: 'u57DiMGuKwz',
							path: 'bank_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'XOgkjcD8J53',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'ojTx_SpI55T',
							code: 'OBP-20005',
							description: 'User not found. Please specify a valid value for USER_ID.'
						},
						{
							key: 'g8eXnIa4QFg',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'RrIRMDNpzXJ',
							code: 'OBP-10007',
							description: 'Incorrect Role name'
						},
						{
							key: 'yIR9mY2m-A8',
							code: 'OBP-30205',
							description: 'This entitlement is a Bank Role. Please set bank_id to a valid bank id.'
						},
						{
							key: 'uItovD7eQAg',
							code: 'OBP-30206',
							description: 'This entitlement is a System Role. Please set bank_id to empty string.'
						},
						{
							key: 'SZoEySu62EA',
							code: 'OBP-30216',
							description: 'Entitlement already exists for the user.'
						},
						{
							key: '4GL6U2v7JWu',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 126,
				section: {
					tag: 'Role',
					title: 'Add Entitlement Request for current User.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create Entitlement Request.\n\nAny logged in User can use this endpoint to request an Entitlement\n\nEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\n\nFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. "bank_id":""\n\nFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. "bank_id":"my-bank-id"\n\n\n\nAuthentication is Mandatory\n\n        ',
					specificUrl: '/obp/v4.0.0/entitlement-requests',
					exampleRequestBody: '{\n  "bank_id": "GENODEM1GLS",\n  "role_name": "String"\n}',
					exampleResponseBody: '{\n  "entitlement_request_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n  "user": {\n    "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n    "email": "eveline@example.com",\n    "provider_id": "Chris",\n    "provider": "http://127.0.0.1:8080",\n    "username": "felixsmith",\n    "entitlements": {\n      "list": [\n        {\n          "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n          "role_name": "CanQueryOtherUser",\n          "bank_id": "GENODEM1GLS"\n        }\n      ]\n    }\n  },\n  "role_name": "CanQueryOtherUser",\n  "bank_id": "GENODEM1GLS",\n  "created": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: 'tv93oo4Us3d',
							path: 'type',
							type: 'object'
						},
						{
							key: 'JB5xUUT81D7',
							path: 'role_name',
							type: 'string'
						},
						{
							key: 'yCYQmSmtYhd',
							path: 'bank_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '9XBlF4DuMe5',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'dbpSzg0Zbuo',
							code: 'OBP-20005',
							description: 'User not found. Please specify a valid value for USER_ID.'
						},
						{
							key: 'stMvuTiHGEf',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'gdZoWApptWz',
							code: 'OBP-10007',
							description: 'Incorrect Role name'
						},
						{
							key: 'xVIm0SpDwWs',
							code: 'OBP-30205',
							description: 'This entitlement is a Bank Role. Please set bank_id to a valid bank id.'
						},
						{
							key: 'Zuf0J3zpWVh',
							code: 'OBP-30206',
							description: 'This entitlement is a System Role. Please set bank_id to empty string.'
						},
						{
							key: 'hvKgZjJ_NaR',
							code: 'OBP-30214',
							description: 'Entitlement Request already exists for the user.'
						},
						{
							key: 'H43-tk63Jak',
							code: 'OBP-30217',
							description: 'Entitlement Request cannot be added.'
						},
						{
							key: 'XTZ-A8yfNMy',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 127,
				section: {
					tag: 'Role',
					title: 'Delete Entitlement',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID\n\nAuthentication is required and the user needs to be a Super Admin.\nSuper Admins are listed in the Props file.\n\n\n      ',
					specificUrl: '/obp/v4.0.0/users/USER_ID/entitlement/ENTITLEMENT_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'BpBPBgGd57M',
							path: 'type',
							type: 'object'
						},
						{
							key: 'w_spGeOx3pS',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'c8gfBBxzTK3',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'vlvKWlG0x4e',
							code: 'OBP-20050',
							description: 'Current User is not a Super Admin!'
						},
						{
							key: 'AT1Znr52X34',
							code: 'OBP-30212',
							description: 'EntitlementId not found'
						},
						{
							key: 'bHzIdcIxcQl',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 128,
				section: {
					tag: 'Role',
					title: 'Get all Entitlements',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\n\nLogin is required.\n\nPossible filter on the role field:\n\neg: /entitlements?role=CanGetCustomer\n\n\n\n      ',
					specificUrl: '/obp/v4.0.0/entitlements',
					exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '4pF_PJf8JQ-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Qog7yUBAASK',
							code: 'OBP-20050',
							description: 'Current User is not a Super Admin!'
						},
						{
							key: '2vlVt62I2kQ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 129,
				section: {
					tag: 'Role',
					title: 'Get Entitlement Requests for a User.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get Entitlement Requests for a User.\n\n\nAuthentication is Mandatory\n\n        ',
					specificUrl: '/obp/v4.0.0/users/USER_ID/entitlement-requests',
					exampleResponseBody: '{\n  "entitlement_requests": [\n    {\n      "entitlement_request_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "user": {\n        "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n        "email": "eveline@example.com",\n        "provider_id": "Chris",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith",\n        "entitlements": {\n          "list": [\n            {\n              "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n              "role_name": "CanQueryOtherUser",\n              "bank_id": "GENODEM1GLS"\n            }\n          ]\n        }\n      },\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS",\n      "created": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '5LHSL44TS6D',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'ax_7026eJP7',
							code: 'OBP-20050',
							description: 'Current User is not a Super Admin!'
						},
						{
							key: 'XUfs0RntAGa',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'TUhz825PZS9',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 130,
				section: {
					tag: 'Role',
					title: 'Get Entitlement Requests for the current User.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get Entitlement Requests for the current User.\n\n\nAuthentication is Mandatory\n\n        ',
					specificUrl: '/obp/v4.0.0/my/entitlement-requests',
					exampleResponseBody: '{\n  "entitlement_requests": [\n    {\n      "entitlement_request_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "user": {\n        "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n        "email": "eveline@example.com",\n        "provider_id": "Chris",\n        "provider": "http://127.0.0.1:8080",\n        "username": "felixsmith",\n        "entitlements": {\n          "list": [\n            {\n              "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n              "role_name": "CanQueryOtherUser",\n              "bank_id": "GENODEM1GLS"\n            }\n          ]\n        }\n      },\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS",\n      "created": "2017-09-19T00:00:00Z"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'EGkBrkYKS18',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '9WVmNv1nnjp',
							code: 'OBP-20050',
							description: 'Current User is not a Super Admin!'
						},
						{
							key: 'fn9hWTHUOfN',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: '6lxPsCS7mk7',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 131,
				section: {
					tag: 'Role',
					title: 'Get Entitlements for the current User.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get Entitlements for the current User.\n\n\nAuthentication is Mandatory\n\n        ',
					specificUrl: '/obp/v4.0.0/my/entitlements',
					exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'ouo7a8k0uaS',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'uCkTHA0R1JQ',
							code: 'OBP-20050',
							description: 'Current User is not a Super Admin!'
						},
						{
							key: 'h_cYs4uDeOu',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'WFyxKGlyAL_',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 132,
				section: {
					tag: 'Role',
					title: 'Get Entitlements for User',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\n\nAuthentication is Mandatory\n\n\n      ',
					specificUrl: '/obp/v4.0.0/users/USER_ID/entitlements',
					exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'vJ94TyLDDI',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'e8PLPArOe-',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'Oz2BRTCFz4',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 133,
				section: {
					tag: 'Role',
					title: 'Get Entitlements for User at Bank.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\n\nGet Entitlements specified by BANK_ID and USER_ID\n\nAuthentication is Mandatory\n\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/USER_ID/entitlements',
					exampleResponseBody: '{\n  "list": [\n    {\n      "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n      "role_name": "CanQueryOtherUser",\n      "bank_id": "GENODEM1GLS"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'B6cs6jaIJv9',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '7_Oa7NFDURV',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'h6Bb2C6LBk7',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 134,
				section: {
					tag: 'Role',
					title: 'Get Roles',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns all available roles\n\nAuthentication is Mandatory\n      ',
					specificUrl: '/obp/v4.0.0/roles',
					exampleResponseBody: '{\n  "roles": [\n    {\n      "role": "eBranch",\n      "requires_bank_id": true\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'nw-NtxMo1gt',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'tb3ojC4MjOi',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 135,
				section: {
					tag: 'System View',
					title: 'Create System View.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create a system view\n\n Authentication is Mandatory and the user needs to have access to the owner view.\n The \'alias\' field in the JSON can take one of three values:\n\n * _public_: to use the public alias if there is one specified for the other account.\n * _private_: to use the public alias if there is one specified for the other account.\n\n * _\'\'(empty string)_: to use no alias; the view shows the real name of the other account.\n\n The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to `true` and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\n\n The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to `true` on the view creation, the rest will be set to `false`.\n ',
					specificUrl: '/obp/v4.0.0/system-views',
					exampleRequestBody: '{\n  "name": "_test",\n  "description": "This view is for family",\n  "metadata_view": "_test",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": false,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
					exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
					typedBody: [{
							key: 'O8tsyJNUMQ8',
							path: 'type',
							type: 'object'
						},
						{
							key: 'sQiuNjZRkXE',
							path: 'allowed_actions',
							type: 'array'
						},
						{
							key: 'c9RfAOPT5fB',
							path: 'allowed_actions->items',
							type: 'string'
						},
						{
							key: 'bwXP_5cLuH1',
							path: 'hide_metadata_if_alias_used',
							type: 'boolean'
						},
						{
							key: 'oG-YuBU2haU',
							path: 'name',
							type: 'string'
						},
						{
							key: 'mUUvMBsIJZR',
							path: 'description',
							type: 'string'
						},
						{
							key: 'c4T8peiqKhm',
							path: 'is_public',
							type: 'boolean'
						},
						{
							key: 'sCgM9cBwkEb',
							path: 'metadata_view',
							type: 'string'
						},
						{
							key: 'wAqlcOazlRN',
							path: 'which_alias_to_use',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'UoZerLV1Q8_',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'D-ET2C1olxP',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'MIdgm0Re61X',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 136,
				section: {
					tag: 'System View',
					title: 'Delete System View',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the system view specified by VIEW_ID.',
					specificUrl: '/obp/v4.0.0/system-views/VIEW_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'Lx7gIUJrYX',
							path: 'type',
							type: 'object'
						},
						{
							key: 'k4IHb6mNB1',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '-S6EWTldJK',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '2UfKr0mlUE',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '1paU-RuEYz',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'G9ILv0cpRq',
							code: '<no code>',
							description: 'user does not have owner access'
						}
					]
				}
			},
			{
				index: 137,
				section: {
					tag: 'System View',
					title: 'Get System View',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get System View\n\nAuthentication is Mandatory\n\n      ',
					specificUrl: '/obp/v4.0.0/system-views/VIEW_ID',
					exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'f6FHX7LR3Ig',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'U3b2Z9_PIfl',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '1iQCOTD6yR9',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 138,
				section: {
					tag: 'System View',
					title: 'Update System View.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update an existing view on a bank account\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nThe json sent is the same as during view creation (above), with one difference: the \'name\' field\nof a view is not editable (it is only set when a view is created)',
					specificUrl: '/obp/v4.0.0/system-views/VIEW_ID',
					exampleRequestBody: '{\n  "description": "this is for family",\n  "metadata_view": "owner",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": true,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
					exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
					typedBody: [{
							key: '1Zy54KrvF',
							path: 'type',
							type: 'object'
						},
						{
							key: 'vJf15_lNl',
							path: 'allowed_actions',
							type: 'array'
						},
						{
							key: '9BvUHbfqM',
							path: 'allowed_actions->items',
							type: 'string'
						},
						{
							key: 'islL4Uwhf',
							path: 'description',
							type: 'string'
						},
						{
							key: 'MRTSvjZId',
							path: 'hide_metadata_if_alias_used',
							type: 'boolean'
						},
						{
							key: 'ND6eZA0SC',
							path: 'metadata_view',
							type: 'string'
						},
						{
							key: 'NI2AOqVOM',
							path: 'is_public',
							type: 'boolean'
						},
						{
							key: 'XrHkzOzDb',
							path: 'which_alias_to_use',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'C90TM-AlZ',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'dW4zlsxar',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '1pXExWKrwQ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'WSeNw3APFG',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 139,
				section: {
					tag: 'Transaction',
					title: 'Get Other Account of Transaction',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get other account of a transaction.\nReturns details of the other party involved in the transaction, moderated by the [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n          Authentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/other_account',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "holder": {\n    "name": "OBP",\n    "is_alias": true\n  },\n  "number": "123",\n  "kind": "3456",\n  "IBAN": "UK234DB",\n  "swift_bic": "UK12321DB",\n  "bank": {\n    "national_identifier": "OBP",\n    "name": "OBP"\n  },\n  "metadata": {\n    "public_alias": "NONE",\n    "private_alias": "NONE",\n    "more_info": "www.openbankproject.com",\n    "URL": "www.openbankproject.com",\n    "image_URL": "www.openbankproject.com",\n    "open_corporates_URL": "www.openbankproject.com",\n    "corporate_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    },\n    "physical_location": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'k04QhuMVKOq',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'N9OqjEmKyx8',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 140,
				section: {
					tag: 'Transaction',
					title: 'Get Transaction by Id.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and [moderated](#1_2_1-getViewsForBankAccount) by the view (VIEW_ID).\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/transaction',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "this_account": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "holders": [\n      {\n        "name": "OBP",\n        "is_alias": true\n      }\n    ],\n    "number": "123",\n    "kind": "AC",\n    "IBAN": "UK1234AD",\n    "swift_bic": "UK1234AD",\n    "bank": {\n      "national_identifier": "OBP",\n      "name": "OBP"\n    }\n  },\n  "other_account": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "holder": {\n      "name": "OBP",\n      "is_alias": true\n    },\n    "number": "123",\n    "kind": "3456",\n    "IBAN": "UK234DB",\n    "swift_bic": "UK12321DB",\n    "bank": {\n      "national_identifier": "OBP",\n      "name": "OBP"\n    },\n    "metadata": {\n      "public_alias": "NONE",\n      "private_alias": "NONE",\n      "more_info": "www.openbankproject.com",\n      "URL": "www.openbankproject.com",\n      "image_URL": "www.openbankproject.com",\n      "open_corporates_URL": "www.openbankproject.com",\n      "corporate_location": {\n        "latitude": 1.231,\n        "longitude": 1.231,\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      },\n      "physical_location": {\n        "latitude": 1.231,\n        "longitude": 1.231,\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    }\n  },\n  "details": {\n    "type": "AC",\n    "description": "this is for family",\n    "posted": "2017-09-19T00:00:00Z",\n    "completed": "2017-09-19T00:00:00Z",\n    "new_balance": {\n      "currency": "EUR",\n      "amount": "10"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  },\n  "metadata": {\n    "narrative": "NONE",\n    "comments": [\n      {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "value": "OBP",\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    ],\n    "tags": [\n      {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "value": "OBP",\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    ],\n    "images": [\n      {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "label": "NONE",\n        "URL": "www.openbankproject.com",\n        "date": "2017-09-19T00:00:00Z",\n        "user": {\n          "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n          "provider": "http://127.0.0.1:8080",\n          "display_name": "OBP"\n        }\n      }\n    ],\n    "where": {\n      "latitude": 1.231,\n      "longitude": 1.231,\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'wmfbY4GYU7',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'tHSQH35OPB',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'cBRV09IM8i',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'uB_cA-KBE-',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'ZnYNM1kp1W',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 141,
				section: {
					tag: 'Transaction',
					title: 'Get Transactions for Account (Core)',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns transactions list (Core info) of the account specified by ACCOUNT_ID.\n\nAuthentication is Mandatory\n\nPossible custom headers for pagination:\n\n* sort_direction=ASC/DESC ==> default value: DESC. The sort field is the completed date.\n* limit=NUMBER ==> default value: 50\n* offset=NUMBER ==> default value: 0\n* from_date=DATE => default value: 0000-00-00T00:00:00.000Z\n* to_date=DATE => default value: 3049-01-01T00:00:00.000Z\n\n**Date format parameter**: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==> time zone is UTC.',
					specificUrl: '/obp/v4.0.0/my/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/transactions',
					exampleResponseBody: '{\n  "transactions": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "this_account": {\n        "id": "String",\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ],\n        "holders": [\n          {\n            "name": "OBP",\n            "is_alias": true\n          }\n        ]\n      },\n      "other_account": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "holder": {\n          "name": "OBP",\n          "is_alias": true\n        },\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ]\n      },\n      "details": {\n        "type": "AC",\n        "description": "OBP",\n        "posted": "2017-09-19T00:00:00Z",\n        "completed": "2017-09-19T00:00:00Z",\n        "new_balance": {\n          "currency": "EUR",\n          "amount": "10"\n        },\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'bPqDXVYC-Gd',
							code: 'OBP-10023',
							description: 'obp_sort_direction parameter can only take two values'
						},
						{
							key: 'xw8Lo9S2fda',
							code: 'OBP-10024',
							description: 'wrong value for obp_offset parameter. Please send a positive integer (=>0)!'
						},
						{
							key: 'zRnXf_caQyP',
							code: 'OBP-10025',
							description: 'wrong value for obp_limit parameter. Please send a positive integer (=>1)!'
						},
						{
							key: 'b29eoPGSuTt',
							code: 'OBP-10026',
							description: 'Failed to parse date string. Please use this format yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'!'
						},
						{
							key: 'R_1yU7PuDx-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'iHtBSv5RRq9',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'QSfQzkJRXNX',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'kQqZMokmiZB',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 142,
				section: {
					tag: 'Transaction',
					title: 'Get Transactions for Account (Full)',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns transactions list of the account specified by ACCOUNT_ID and [moderated](#1_2_1-getViewsForBankAccount) by the view (VIEW_ID).\n\nAuthentication is Optional\n\nAuthentication is required if the view is not public.\n\nPossible custom headers for pagination:\n\n* sort_direction=ASC/DESC ==> default value: DESC. The sort field is the completed date.\n* limit=NUMBER ==> default value: 50\n* offset=NUMBER ==> default value: 0\n* from_date=DATE => default value: 0000-00-00T00:00:00.000Z\n* to_date=DATE => default value: 3049-01-01T00:00:00.000Z\n\n**Date format parameter**: yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'(2017-09-19T02:31:05.000Z) ==> time zone is UTC.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions',
					exampleResponseBody: '{\n  "transactions": [\n    {\n      "id": "String",\n      "this_account": {\n        "id": "String",\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ],\n        "holders": [\n          {\n            "name": "OBP",\n            "is_alias": true\n          }\n        ]\n      },\n      "other_account": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "holder": {\n          "name": "OBP",\n          "is_alias": true\n        },\n        "bank_routing": {\n          "scheme": "Bank_ID",\n          "address": "gh.29.uk"\n        },\n        "account_routings": [\n          {\n            "scheme": "AccountNumber",\n            "address": "4930396"\n          }\n        ],\n        "metadata": {\n          "public_alias": "NONE",\n          "private_alias": "NONE",\n          "more_info": "www.openbankproject.com",\n          "URL": "www.openbankproject.com",\n          "image_URL": "www.openbankproject.com",\n          "open_corporates_URL": "www.openbankproject.com",\n          "corporate_location": {\n            "latitude": 1.231,\n            "longitude": 1.231,\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          },\n          "physical_location": {\n            "latitude": 1.231,\n            "longitude": 1.231,\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        }\n      },\n      "details": {\n        "type": "AC",\n        "description": "this is for family",\n        "posted": "2017-09-19T00:00:00Z",\n        "completed": "2017-09-19T00:00:00Z",\n        "new_balance": {\n          "currency": "EUR",\n          "amount": "10"\n        },\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      },\n      "metadata": {\n        "narrative": "NONE",\n        "comments": [\n          {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "value": "OBP",\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        ],\n        "tags": [\n          {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "value": "OBP",\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        ],\n        "images": [\n          {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "label": "NONE",\n            "URL": "www.openbankproject.com",\n            "date": "2017-09-19T00:00:00Z",\n            "user": {\n              "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n              "provider": "http://127.0.0.1:8080",\n              "display_name": "OBP"\n            }\n          }\n        ],\n        "where": {\n          "latitude": 1.231,\n          "longitude": 1.231,\n          "date": "2017-09-19T00:00:00Z",\n          "user": {\n            "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n            "provider": "http://127.0.0.1:8080",\n            "display_name": "OBP"\n          }\n        }\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: '9T3vKhDdfp5',
							code: 'OBP-10023',
							description: 'obp_sort_direction parameter can only take two values'
						},
						{
							key: 'GvrZaMiO-A1',
							code: 'OBP-10024',
							description: 'wrong value for obp_offset parameter. Please send a positive integer (=>0)!'
						},
						{
							key: 'xkziOrqvVCR',
							code: 'OBP-10025',
							description: 'wrong value for obp_limit parameter. Please send a positive integer (=>1)!'
						},
						{
							key: 'XAnxX4PX7vY',
							code: 'OBP-10026',
							description: 'Failed to parse date string. Please use this format yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'!'
						},
						{
							key: 'HNY59cvn1gO',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'hxi8Ojz5GTQ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'mCWq5yMDVGx',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'Z1aq8B-w3FW',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 143,
				section: {
					tag: 'Transaction Metadata',
					title: 'Add a tag.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Posts a tag about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\nAuthentication is Mandatory\n\nAuthentication is required as the tag is linked with the user.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags',
					exampleRequestBody: '{\n  "value": "String"\n}',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "value": "OBP",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
					typedBody: [{
							key: 'IrluXNKbQS-',
							path: 'type',
							type: 'object'
						},
						{
							key: '9uZxeuNCn-4',
							path: 'value',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'uLifq5uyiLE',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'T-nWhCZ56D9',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '941dMwvE9b_',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'fg31GMjBfMU',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'Ew01Z__Ru0v',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'duCz4Y5Cltj',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 144,
				section: {
					tag: 'Transaction Metadata',
					title: 'Add an image.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Posts an image about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\nAuthentication is Mandatory\n\nThe image is linked with the user.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images',
					exampleRequestBody: '{\n  "label": "String",\n  "URL": "String"\n}',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "label": "NONE",\n  "URL": "www.openbankproject.com",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
					typedBody: [{
							key: 'PadYcepbTah',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Z_7Z9KHV_HQ',
							path: 'URL',
							type: 'string'
						},
						{
							key: 'fihXa7QP84e',
							path: 'label',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'aJJR6Uakl68',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'MhYiGjgfelO',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '0zvxzDi_QAP',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'gONA80A0Iw9',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'upJxxzIsyAN',
							code: 'OBP-10017',
							description: 'Incorrect URL Format. '
						},
						{
							key: 'iwtddBB24uO',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 145,
				section: {
					tag: 'Transaction Metadata',
					title: 'Add comment.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Posts a comment about a transaction TRANSACTION_ID on a [view](#1_2_1-getViewsForBankAccount) VIEW_ID.\n\n${authenticationRequiredMessage(false)}\n\nAuthentication is required since the comment is linked with the user.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments',
					exampleRequestBody: '{\n  "value": "String"\n}',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "value": "OBP",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
					typedBody: [{
							key: 'KJQIthvs9O',
							path: 'type',
							type: 'object'
						},
						{
							key: 'vKmzJuJMv8',
							path: 'value',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'PUQ2PQQIon',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'gmaMVoNkia',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'zuQmcVUfhc',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'EO6PeEKNCB',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'oevsILtsEC',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'gn_BdiCd10',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 146,
				section: {
					tag: 'Transaction Metadata',
					title: 'Add narrative.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Creates a description of the transaction TRANSACTION_ID.\n\nNote: Unlike other items of metadata, there is only one "narrative" per transaction accross all views.\nIf you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).\n\nAuthentication is Optional\nAuthentication is required if the view is not public.\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					exampleRequestBody: '{\n  "narrative": "narative"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'f9Pjetfu_6w',
							path: 'type',
							type: 'object'
						},
						{
							key: 'xOIo7Gr9lY5',
							path: 'narrative',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'csnJW1VYJn1',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'mL_y0joeBEy',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'j6lwB9fVyVC',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'SVzKmBFPNQc',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'YMpFYplYgC1',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 147,
				section: {
					tag: 'Transaction Metadata',
					title: 'Add where tag.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Creates a "where" Geo tag on a transaction TRANSACTION_ID in a [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe geo tag is linked with the user.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					exampleRequestBody: '{\n  "where": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'bLOOW5-kezg',
							path: 'type',
							type: 'object'
						},
						{
							key: 'DXOIg5PTWgC',
							path: 'where',
							type: 'object'
						},
						{
							key: 'HflyiyJ-a6F',
							path: 'where->longitude',
							type: 'number'
						},
						{
							key: 'IZuIXas86QA',
							path: 'where->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: 'lasjboL0mWE',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'HQxAjSI5q4G',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'aN2Mg2dFP_4',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'O3TlMvNEWNs',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'abMla4kAQ9_',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'BAeURTF_Sfh',
							code: '<no code>',
							description: 'Coordinates not possible'
						},
						{
							key: 'HtHM6EcvV8T',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 148,
				section: {
					tag: 'Transaction Metadata',
					title: 'Delete a tag.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the tag TAG_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\nAuthentication via OAuth is required. The user must either have owner privileges for this account, \nor must be the user that posted the tag.\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags/TAG_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'F48QQ9iQFna',
							path: 'type',
							type: 'object'
						},
						{
							key: '1GQNoVGbKcF',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'TEr__SRNyLV',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'P8gQ5tbDe-I',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: '8AnkiUDhyXK',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 149,
				section: {
					tag: 'Transaction Metadata',
					title: 'Delete an image',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the image IMAGE_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images/IMAGE_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: '1oULxzSFYFN',
							path: 'type',
							type: 'object'
						},
						{
							key: 'DKRYBEaBp4L',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'yX-kdAhRWk2',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '5ZD1xmKcGCs',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: '7qjIbmOUIDh',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Ay0yIrfE-xr',
							code: '<no code>',
							description: 'You must be able to see images in order to delete them'
						},
						{
							key: '0iqY3amxCxP',
							code: '<no code>',
							description: 'Image not found for this transaction'
						},
						{
							key: 'IEvkx0v65Ny',
							code: '<no code>',
							description: 'Deleting images not permitted for this view'
						},
						{
							key: 'OhzqbF__lcm',
							code: '<no code>',
							description: 'Deleting images not permitted for the current user'
						},
						{
							key: 'KpSm2KDwe8K',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 150,
				section: {
					tag: 'Transaction Metadata',
					title: 'Delete comment.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete the comment COMMENT_ID about the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments/COMMENT_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'glX0qDrk6xm',
							path: 'type',
							type: 'object'
						},
						{
							key: 'ruIgNAbJA0n',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'dX1P0LVBhre',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'LHXfP3IRJ8r',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'BP2XomSU4dj',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: '06wMGQ2GSsH',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'i2Pa0IX6YQG',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 151,
				section: {
					tag: 'Transaction Metadata',
					title: 'Delete narrative.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the description of the transaction TRANSACTION_ID.\n\nAuthentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'PfQTMvdnLh4',
							path: 'type',
							type: 'object'
						},
						{
							key: 'ucHt_sFtyM0',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'p0F14OrFv00',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Jcfd6pSsDPY',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '6JrSrLeEL3v',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: '1_N-5FDnhuS',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 152,
				section: {
					tag: 'Transaction Metadata',
					title: 'Delete where tag.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the where tag of the transaction TRANSACTION_ID made on [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe user must either have owner privileges for this account, or must be the user that posted the geo tag.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'rHITOcXTSb0',
							path: 'type',
							type: 'object'
						},
						{
							key: 'x6RIk2dAkFw',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'fURXM6hxvHm',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'sW9GdjddB09',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'hQ1RqoSoCve',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'lT5iMW21luZ',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '_rJKJf9esZ5',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'W10gCvZ2SkP',
							code: '<no code>',
							description: 'there is no tag to delete'
						},
						{
							key: 'H6mAk56Z4kf',
							code: '<no code>',
							description: 'Delete not completed'
						},
						{
							key: 'clg4p58vPEQ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 153,
				section: {
					tag: 'Transaction Metadata',
					title: 'Get comments.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the transaction TRANSACTION_ID comments made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n\nAuthentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/comments',
					exampleResponseBody: '{\n  "comments": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "value": "OBP",\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'Wox4T6V_ocK',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'k6oFjyhaLiQ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'tSiJVPjTkrj',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'kpRrL0eB6fI',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'cilV5zOQh4A',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 154,
				section: {
					tag: 'Transaction Metadata',
					title: 'Get images.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the transaction TRANSACTION_ID images made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n         Authentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/images',
					exampleResponseBody: '{\n  "images": [\n    {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "label": "NONE",\n      "URL": "www.openbankproject.com",\n      "date": "2017-09-19T00:00:00Z",\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'PkFRb-TOJsq',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'vPCAg2dGPZ3',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'Bk8vUPepRhS',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'SmC1ACl51HZ',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'nA0XP8WZv8f',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 155,
				section: {
					tag: 'Transaction Metadata',
					title: 'Get narrative.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the account owner description of the transaction [moderated](#1_2_1-getViewsForBankAccount) by the view.\n\nAuthentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					exampleResponseBody: '{\n  "narrative": "narative"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'MiFLbGSS5gZ',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'A1nsWz6yBAN',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'qQIRxRiK5m4',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'Xx9Ft8iT5qF',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 156,
				section: {
					tag: 'Transaction Metadata',
					title: 'Get tags.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the transaction TRANSACTION_ID tags made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\n         Authentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/tags',
					exampleResponseBody: '{\n  "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n  "value": "OBP",\n  "date": "2017-09-19T00:00:00Z",\n  "user": {\n    "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n    "provider": "http://127.0.0.1:8080",\n    "display_name": "OBP"\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'rX63jOCCCr_',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'yronYiwCntt',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'nNGBRJoRwoq',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'ErpN5_jM3E_',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 157,
				section: {
					tag: 'Transaction Metadata',
					title: 'Get where tag.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the "where" Geo tag added to the transaction TRANSACTION_ID made on a [view](#1_2_1-getViewsForBankAccount) (VIEW_ID).\nIt represents the location where the transaction has been initiated.\n\nAuthentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					exampleResponseBody: '{\n  "where": {\n    "latitude": 1.231,\n    "longitude": 1.231,\n    "date": "2017-09-19T00:00:00Z",\n    "user": {\n      "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n      "provider": "http://127.0.0.1:8080",\n      "display_name": "OBP"\n    }\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'k9NlUJYcVtK',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'Uu0xoMRM8RG',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'o4sXmhiOMTG',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'hXfqMiz0FxJ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 158,
				section: {
					tag: 'Transaction Metadata',
					title: 'Update narrative.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Updates the description of the transaction TRANSACTION_ID.\n\nAuthentication via OAuth is required if the view is not public.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/narrative',
					exampleRequestBody: '{\n  "narrative": "narative"\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: '7Mh0YtvW1BL',
							path: 'type',
							type: 'object'
						},
						{
							key: 'q3flXxxuR9N',
							path: 'narrative',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '6rFKhvexN5q',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'cyU88fcn5ZR',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: '7QoY2paDq9S',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'KauzCrgEstd',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'rCuuZ8O-7y8',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 159,
				section: {
					tag: 'Transaction Metadata',
					title: 'Update where tag.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Updates the "where" Geo tag on a transaction TRANSACTION_ID in a [view](#1_2_1-getViewsForBankAccount).\n\nAuthentication is Mandatory\n\nThe geo tag is linked with the user.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transactions/TRANSACTION_ID/metadata/where',
					exampleRequestBody: '{\n  "where": {\n    "latitude": 1.532,\n    "longitude": 1.535\n  }\n}',
					exampleResponseBody: '{\n  "success": "Success"\n}',
					typedBody: [{
							key: 'nW2vO_WO-k',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Mog46YPdw2',
							path: 'where',
							type: 'object'
						},
						{
							key: 's6rUGo6-cA',
							path: 'where->longitude',
							type: 'number'
						},
						{
							key: '-S93T_vX6v',
							path: 'where->latitude',
							type: 'number'
						}
					],
					possibleErrors: [{
							key: 'gJeJf499fk',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'jQWDXjTgvY',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'yEBnkU42F1',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'eLwRMaUohZ',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: '1Fdyb70VVU',
							code: 'OBP-30022',
							description: 'The current view does not have the permission'
						},
						{
							key: 'AsDdE5m3H8',
							code: '<no code>',
							description: 'Coordinates not possible'
						},
						{
							key: 'JKiF_w5k6Zg',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 160,
				section: {
					tag: 'Transaction Request',
					title: 'Answer Transaction Request Challenge.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'In Sandbox mode, any string that can be converted to a positive integer will be accepted as an answer.\n\nThis endpoint totally depends on createTransactionRequest, it need get the following data from createTransactionRequest response body.\n\n1)`TRANSACTION_REQUEST_TYPE` : is the same as createTransactionRequest request URL .\n\n2)`TRANSACTION_REQUEST_ID` : is the `id` field in createTransactionRequest response body.\n\n3) `id` :  is `challenge.id` field in createTransactionRequest response body.\n\n4) `answer` : must be `123`. if it is in sandbox mode. If it kafka mode, the answer can be got by phone message or other security ways.\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/TRANSACTION_REQUEST_TYPE/transaction-requests/TRANSACTION_REQUEST_ID/challenge',
					exampleRequestBody: '{\n  "id": "This is challenge.id, you can get it from `Create Transaction Request.` response, only is useful if status ==`INITIATED` there.",\n  "answer": "123"\n}',
					exampleResponseBody: '{\n  "id": "82f92531-9c63-4246-abfc-96c20ec46188",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": "666666-9c63-4246-abfc-96c20ec46188",\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
					typedBody: [{
							key: 'd5eDKR1bG-G',
							path: 'type',
							type: 'object'
						},
						{
							key: 'mzZG9Nt_vfQ',
							path: 'answer',
							type: 'string'
						},
						{
							key: 'VshYQ4p_DNa',
							path: 'id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '0j92U7iOssE',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'eoVDExm3dGn',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'BCtLAkI1zdN',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'CNlzcoXQxKu',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '4se0lKaGHir',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '5jfhwGiFdkS',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'TXQ5Qvwmhot',
							code: 'OBP-40011',
							description: 'Transaction Request Status is not INITIATED.'
						},
						{
							key: 'hg1l8vktBkY',
							code: 'OBP-40009',
							description: 'The TRANSACTION_REQUEST_TYPE has changed.'
						},
						{
							key: 'ClK6cWDrmHv',
							code: 'OBP-40010',
							description: 'Invalid Challenge Id. Please specify a valid value for CHALLENGE_ID.'
						},
						{
							key: 'M6VHondaTLx',
							code: 'OBP-40014',
							description: 'Sorry, you\'ve used up your allowed attempts. '
						},
						{
							key: 'BsmVu_a20GB',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: 'z1pzAZhHRWS',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 161,
				section: {
					tag: 'Transaction Request',
					title: 'Create Transaction Request (ACCOUNT_OTP)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'When using ACCOUNT, the payee is set in the request body.\n\nMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT_OTP/transaction-requests',
					exampleRequestBody: '{\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work"\n}',
					exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
					typedBody: [{
							key: 'gUsNJibVDMC',
							path: 'type',
							type: 'object'
						},
						{
							key: 'FCuvNJzxbyC',
							path: 'description',
							type: 'string'
						},
						{
							key: '0iRODaNJgaP',
							path: 'value',
							type: 'object'
						},
						{
							key: 'oFqcV3utAbh',
							path: 'value->amount',
							type: 'string'
						},
						{
							key: '0XFGypJXCAO',
							path: 'value->currency',
							type: 'string'
						},
						{
							key: 'r1cXAs0u8vj',
							path: 'to',
							type: 'object'
						},
						{
							key: 'yaP9E3L6HJh',
							path: 'to->account_id',
							type: 'string'
						},
						{
							key: 'eS_RikbDVXF',
							path: 'to->bank_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'y7CO0iA881R',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'T9cjVB8Is33',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'OicWL7X6cuf',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'THpVBtu0X-j',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'AsAt7clK4qG',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '-zsPFvYJkZr',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '5R3Bm1zf5Q2',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: '2OPsfqzfOHD',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'kLwe_6o2gZB',
							code: 'OBP-40002',
							description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
						},
						{
							key: 'qCDXQy1YlWC',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'llGTniYCtmw',
							code: 'OBP-40001',
							description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
						},
						{
							key: 'zD5p2z4y37F',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'x2sH15hfZHm',
							code: 'OBP-10002',
							description: 'Invalid Number. Could not convert value to a number.'
						},
						{
							key: 'gwMZ5H_FMHp',
							code: 'OBP-40008',
							description: 'Can\'t send a payment with a value of 0 or less.'
						},
						{
							key: 'VJbUXX0F9eX',
							code: 'OBP-40003',
							description: 'Transaction Request Currency must be the same as From Account Currency.'
						},
						{
							key: 'fhIk8eyhiWu',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: 'yGkO1UWUOxW',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 162,
				section: {
					tag: 'Transaction Request',
					title: 'Create Transaction Request (ACCOUNT)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'When using ACCOUNT, the payee is set in the request body.\n\nMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/ACCOUNT/transaction-requests',
					exampleRequestBody: '{\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work"\n}',
					exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
					typedBody: [{
							key: 'gl93ZZQDvYA',
							path: 'type',
							type: 'object'
						},
						{
							key: 'SmKYui7iNmu',
							path: 'description',
							type: 'string'
						},
						{
							key: 'H-jm_BFwM3U',
							path: 'value',
							type: 'object'
						},
						{
							key: '7BIghStOWmR',
							path: 'value->amount',
							type: 'string'
						},
						{
							key: 'xFJP6TYJ2lB',
							path: 'value->currency',
							type: 'string'
						},
						{
							key: 'Ad0r_X5LScs',
							path: 'to',
							type: 'object'
						},
						{
							key: 'NRBu9MusivZ',
							path: 'to->account_id',
							type: 'string'
						},
						{
							key: 'WWUc-MPeXcx',
							path: 'to->bank_id',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '2gT8qNw21I6',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'JL7g1FbpRI7',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'OjT1bVoHNfV',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'wsXSHcj0JfR',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'LwNatjbUgG-',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'xv1US0_ytyK',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'vkk6XoPIYzp',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'Nec2ofWiQQb',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'JylUHipTgUN',
							code: 'OBP-40002',
							description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
						},
						{
							key: 'j-53vGvdxBb',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'ccQuNdQZTKW',
							code: 'OBP-40001',
							description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
						},
						{
							key: 'expflGDVGPO',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '8aZe6_sXkrS',
							code: 'OBP-10002',
							description: 'Invalid Number. Could not convert value to a number.'
						},
						{
							key: 'zRWMU_8-iH1',
							code: 'OBP-40008',
							description: 'Can\'t send a payment with a value of 0 or less.'
						},
						{
							key: '7KUaeuZl54l',
							code: 'OBP-40003',
							description: 'Transaction Request Currency must be the same as From Account Currency.'
						},
						{
							key: '2NjsyvNd6vD',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: 'ikFFPAeGm8G',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 163,
				section: {
					tag: 'Transaction Request',
					title: 'Create Transaction Request (COUNTERPARTY)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\nSpecial instructions for COUNTERPARTY:\n\nWhen using a COUNTERPARTY to create a Transaction Request, specificy the counterparty_id in the body of the request.\nThe routing details of the counterparty will be forwarded for the transfer.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/COUNTERPARTY/transaction-requests',
					exampleRequestBody: '{\n  "to": {\n    "counterparty_id": "123456"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "A description for the transaction to the counterparty",\n  "charge_policy": "SHARED",\n  "future_date": "20881230"\n}',
					exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
					typedBody: [{
							key: 'w7tK5R7tXfY',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Q8CpTOXp2AY',
							path: 'description',
							type: 'string'
						},
						{
							key: 'xmPO4EbdMS9',
							path: 'to',
							type: 'object'
						},
						{
							key: 'MCfwRgvGEY2',
							path: 'to->counterparty_id',
							type: 'string'
						},
						{
							key: '2KFmQfWj48Y',
							path: 'value',
							type: 'object'
						},
						{
							key: '20RA5tlDDBq',
							path: 'value->amount',
							type: 'string'
						},
						{
							key: 'Rxe2XLdFMnX',
							path: 'value->currency',
							type: 'string'
						},
						{
							key: 'Mm57-2CICE_',
							path: 'charge_policy',
							type: 'string'
						},
						{
							key: 'qNShWZy3fvm',
							path: 'future_date',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'ycQALHeMv7G',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'CJbj6sdZjWJ',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Isyk70zIJfJ',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'ebLsAU7KpIX',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'BiIoOk1YzMX',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'a25eLDhip2T',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'p7sRWKrq10C',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'x2Zxk9CTJN6',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'PUrH7ljp_3n',
							code: 'OBP-40002',
							description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
						},
						{
							key: 'rYw-M02tkDO',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'u6aLfSocymX',
							code: 'OBP-40001',
							description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
						},
						{
							key: 'ZN81ct3uXP2',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'nD9PNfocLdC',
							code: 'OBP-10002',
							description: 'Invalid Number. Could not convert value to a number.'
						},
						{
							key: 'TSMk5V4EaxN',
							code: 'OBP-40008',
							description: 'Can\'t send a payment with a value of 0 or less.'
						},
						{
							key: 'IoIzU23pEsF',
							code: 'OBP-40003',
							description: 'Transaction Request Currency must be the same as From Account Currency.'
						},
						{
							key: 'hw8STigu7Rw',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: 'XY3lOseW6oW',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 164,
				section: {
					tag: 'Transaction Request',
					title: 'Create Transaction Request (FREE_FORM).',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Initiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/FREE_FORM/transaction-requests',
					exampleRequestBody: '{\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "This is a FREE_FORM Transaction Request"\n}',
					exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
					typedBody: [{
							key: 'qb0dzEZuZXs',
							path: 'type',
							type: 'object'
						},
						{
							key: 'N1gxw2vCTjy',
							path: 'description',
							type: 'string'
						},
						{
							key: 'skDZAUSI66L',
							path: 'value',
							type: 'object'
						},
						{
							key: 'ygFGjGIwIsR',
							path: 'value->amount',
							type: 'string'
						},
						{
							key: 'n6eMsAjC7MR',
							path: 'value->currency',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'j38oO18V2EP',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'isgf0IG8WL4',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'hhBsg4dkp6Z',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'n6bm3MbI2ch',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'brLg-WtmrOq',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'LWC-U7ScfQn',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'jESEUhicyLo',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'A0RpuJRjpV1',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: 'PL37SOD9kR5',
							code: 'OBP-40002',
							description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
						},
						{
							key: 'Jm6AzNfN5hF',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'Ep1rnlbGXQi',
							code: 'OBP-40001',
							description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
						},
						{
							key: 'Ty_EaNsSake',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '_-fEIRVFVBG',
							code: 'OBP-10002',
							description: 'Invalid Number. Could not convert value to a number.'
						},
						{
							key: '2jBl1-6PXQ4',
							code: 'OBP-40008',
							description: 'Can\'t send a payment with a value of 0 or less.'
						},
						{
							key: 'YnZeKZUZ9Cx',
							code: 'OBP-40003',
							description: 'Transaction Request Currency must be the same as From Account Currency.'
						},
						{
							key: '8T551pbIRUb',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: '-5vvMuIVs3v',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 165,
				section: {
					tag: 'Transaction Request',
					title: 'Create Transaction Request (SEPA)',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\nSpecial instructions for SEPA:\n\nWhen using a SEPA Transaction Request, you specify the IBAN of a Counterparty in the body of the request.\nThe routing details (IBAN) of the counterparty will be forwarded to the core banking system for the transfer.\n\nInitiate a Payment via creating a Transaction Request.\n\nIn OBP, a `transaction request` may or may not result in a `transaction`. However, a `transaction` only has one possible state: completed.\n\nA `Transaction Request` can have one of several states.\n\n`Transactions` are modeled on items in a bank statement that represent the movement of money.\n\n`Transaction Requests` are requests to move money which may or may not succeeed and thus result in a `Transaction`.\n\nA `Transaction Request` might create a security challenge that needs to be answered before the `Transaction Request` proceeds.\n\nTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\n\nTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response.\nThis provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\n\nThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\n\nIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to ACCOUNT. See getTransactionRequestTypesSupportedByBank for all supported types.\n\nIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\n\nIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\n\nYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\n\nThe following static FX rates are available in sandbox mode:\n\nhttp://127.0.0.1:8082/more?version=OBPv4.0.0&list-all-banks=false&core=&psd2=&obwg=#OBPv2_2_0-getCurrentFxRate\n\n\nTransaction Requests satisfy PSD2 requirements thus:\n\n1) A transaction can be initiated by a third party application.\n\n2) The customer is informed of the charge that will incurred.\n\n3) The call supports delegated authentication (OAuth)\n\nSee [this python code](https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py) for a complete example of this flow.\n\nThere is further documentation [here](https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests)\n\nAuthentication is Mandatory\n\n\n\n       ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types/SEPA/transaction-requests',
					exampleRequestBody: '{\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "to": {\n    "iban": "123"\n  },\n  "description": "This is a SEPA Transaction Request",\n  "charge_policy": "SHARED",\n  "future_date": "20881230"\n}',
					exampleResponseBody: '{\n  "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n  "type": "SANDBOX_TAN",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "details": {\n    "to_sandbox_tan": {\n      "bank_id": "String",\n      "account_id": "String"\n    },\n    "to_sepa": {\n      "iban": "String"\n    },\n    "to_counterparty": {\n      "counterparty_id": "String"\n    },\n    "to_transfer_to_phone": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "mobile_phone_number": "+44 07972 444 876"\n      }\n    },\n    "to_transfer_to_atm": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "message": "String",\n      "from": {\n        "mobile_phone_number": "+44 07972 444 876",\n        "nickname": "String"\n      },\n      "to": {\n        "legal_name": "Eveline Tripman",\n        "date_of_birth": "20181230",\n        "mobile_phone_number": "+44 07972 444 876",\n        "kyc_document": {\n          "type": "String",\n          "number": "String"\n        }\n      }\n    },\n    "to_transfer_to_account": {\n      "value": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "description": "String",\n      "transfer_type": "String",\n      "future_date": "20181230",\n      "to": {\n        "name": "String",\n        "bank_code": "String",\n        "branch_number": "String",\n        "account": {\n          "number": "String",\n          "iban": "String"\n        }\n      }\n    },\n    "to_sepa_credit_transfers": {\n      "debtorAccount": {\n        "iban": "12345"\n      },\n      "instructedAmount": {\n        "currency": "EUR",\n        "amount": "10"\n      },\n      "creditorAccount": {\n        "iban": "54321"\n      },\n      "creditorName": "John Miles"\n    },\n    "value": {\n      "currency": "EUR",\n      "amount": "100"\n    },\n    "description": "String"\n  },\n  "transaction_ids": [\n    "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n  ],\n  "status": "COMPLETED",\n  "start_date": "2017-09-19T00:00:00Z",\n  "end_date": "2017-09-19T00:00:00Z",\n  "challenge": {\n    "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n    "allowed_attempts": 3,\n    "challenge_type": "SANDBOX_TAN"\n  },\n  "charge": {\n    "summary": "Rent the flat",\n    "value": {\n      "currency": "EUR",\n      "amount": "10"\n    }\n  }\n}',
					typedBody: [{
							key: 'p6BsBATN6Ha',
							path: 'type',
							type: 'object'
						},
						{
							key: '0ZkoItLfbzo',
							path: 'value',
							type: 'object'
						},
						{
							key: 'C_WPw0Knted',
							path: 'value->amount',
							type: 'string'
						},
						{
							key: 'Xx-y85KuYG9',
							path: 'value->currency',
							type: 'string'
						},
						{
							key: 'XzgrsZ_aWCi',
							path: 'to',
							type: 'object'
						},
						{
							key: 'hVG7z3Uxqqe',
							path: 'to->iban',
							type: 'string'
						},
						{
							key: 'S67EXCgPh-2',
							path: 'description',
							type: 'string'
						},
						{
							key: 't1Fc7UTN5lM',
							path: 'charge_policy',
							type: 'string'
						},
						{
							key: 'F1Mqs9pzB3X',
							path: 'future_date',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'vwMqjnegs3O',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'bh3GERCsLXs',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'TBaPzaYdlel',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'sHAYw9fcShU',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: '6Qw8-7PKDDJ',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'M_6FvEJo_mn',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'XlUoXczCp52',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'n9fzcWKupRJ',
							code: 'OBP-30005',
							description: 'View not found for Account. Please specify a valid value for VIEW_ID'
						},
						{
							key: '3kBnBEAVcW_',
							code: 'OBP-40002',
							description: 'Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\'t have access to the owner view of the from account or you don\'t have access to canCreateAnyTransactionRequest.'
						},
						{
							key: 'IYEa4kKqisE',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'mlcaGiqYpZe',
							code: 'OBP-40001',
							description: 'Invalid value for TRANSACTION_REQUEST_TYPE'
						},
						{
							key: 'KRpca5LRmSf',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'zu0QBsTIKZ9',
							code: 'OBP-10002',
							description: 'Invalid Number. Could not convert value to a number.'
						},
						{
							key: 'iS3INA-eFev',
							code: 'OBP-40008',
							description: 'Can\'t send a payment with a value of 0 or less.'
						},
						{
							key: 'mMGIGxA82y5',
							code: 'OBP-40003',
							description: 'Transaction Request Currency must be the same as From Account Currency.'
						},
						{
							key: 'hDht6WSBmlh',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: 'Htfw3OgNGGa',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 166,
				section: {
					tag: 'Transaction Request',
					title: 'Get supported Transaction Request Types',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the list of the Transaction Request Types supported by the bank.\n\nAuthentication is Optional\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/transaction-request-types',
					exampleResponseBody: '{\n  "transaction_request_types": [\n    {\n      "transaction_request_type": "SandboxTan"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'MdG9zROb36U',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'RmHjT8yPG5f',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 167,
				section: {
					tag: 'Transaction Request',
					title: 'Get Transaction Request Types for Account',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the Transation Request Types that the account specified by ACCOUNT_ID and view specified by VIEW_ID has access to.\n\nThese are the ways this API Server can create a Transaction via a Transaction Request\n(as opposed to Transaction Types which include external types too e.g. for Transactions created by core banking etc.)\n\n A Transaction Request Type internally determines:\n\n * the required Transaction Request \'body\' i.e. fields that define the \'what\' and \'to\' of a Transaction Request,\n * the type of security challenge that may be be raised before the Transaction Request proceeds, and\n * the threshold of that challenge.\n\n For instance in a \'SANDBOX_TAN\' Transaction Request, for amounts over 1000 currency units, the user must supply a positive integer to complete the Transaction Request and create a Transaction.\n\n This approach aims to provide only one endpoint for initiating transactions, and one that handles challenges, whilst still allowing flexibility with the payload and internal logic.\n \n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-request-types',
					exampleResponseBody: '{\n  "transaction_request_types": [\n    {\n      "value": "10",\n      "charge": {\n        "summary": "The bank fixed charge",\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'L6LjGzvXeKj',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Pucqi4W5aqC',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'NP2fYm4qeKC',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 's_8Pys5wWQK',
							code: '<no code>',
							description: 'Please specify a valid value for CURRENCY of your Bank Account. '
						},
						{
							key: '4XJv4CRqckK',
							code: '<no code>',
							description: 'Current user does not have access to the view '
						},
						{
							key: 'KVK22I226lM',
							code: '<no code>',
							description: 'account not found at bank'
						},
						{
							key: 'RQJtEEXqGuG',
							code: '<no code>',
							description: 'user does not have access to owner view'
						},
						{
							key: 'V3vjm5iVKLC',
							code: 'OBP-40018',
							description: 'Sorry, Transaction Requests are not enabled in this API instance.'
						},
						{
							key: 'V2f40yN6abG',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 168,
				section: {
					tag: 'Transaction Request',
					title: 'Get Transaction Requests.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns transaction requests for account specified by ACCOUNT_ID at bank specified by BANK_ID.\n\nThe VIEW_ID specified must be \'owner\' and the user must have access to this view.\n\nVersion 2.0.0 now returns charge information.\n\nTransaction Requests serve to initiate transactions that may or may not proceed. They contain information including:\n\n* Transaction Request Id\n* Type\n* Status (INITIATED, COMPLETED)\n* Challenge (in order to confirm the request)\n* From Bank / Account\n* Details including Currency, Value, Description and other initiation information specific to each type. (Could potentialy include a list of future transactions.)\n* Related Transactions\n\nPSD2 Context: PSD2 requires transparency of charges to the customer.\nThis endpoint provides the charge that would be applied if the Transaction Request proceeds - and a record of that charge there after.\nThe customer can proceed with the Transaction by answering the security challenge.\n\n      ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/VIEW_ID/transaction-requests',
					exampleResponseBody: '{\n  "transaction_requests_with_charges": [\n    {\n      "id": "4050046c-63b3-4868-8a22-14b4181d33a6",\n      "type": "SANDBOX_TAN",\n      "from": {\n        "bank_id": "GENODEM1GLS",\n        "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n      },\n      "details": {\n        "to_sandbox_tan": {\n          "bank_id": "String",\n          "account_id": "String"\n        },\n        "to_sepa": {\n          "iban": "String"\n        },\n        "to_counterparty": {\n          "counterparty_id": "String"\n        },\n        "to_transfer_to_phone": {\n          "value": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "description": "String",\n          "message": "String",\n          "from": {\n            "mobile_phone_number": "+44 07972 444 876",\n            "nickname": "String"\n          },\n          "to": {\n            "mobile_phone_number": "+44 07972 444 876"\n          }\n        },\n        "to_transfer_to_atm": {\n          "value": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "description": "String",\n          "message": "String",\n          "from": {\n            "mobile_phone_number": "+44 07972 444 876",\n            "nickname": "String"\n          },\n          "to": {\n            "legal_name": "Eveline Tripman",\n            "date_of_birth": "20181230",\n            "mobile_phone_number": "+44 07972 444 876",\n            "kyc_document": {\n              "type": "String",\n              "number": "String"\n            }\n          }\n        },\n        "to_transfer_to_account": {\n          "value": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "description": "String",\n          "transfer_type": "String",\n          "future_date": "20181230",\n          "to": {\n            "name": "String",\n            "bank_code": "String",\n            "branch_number": "String",\n            "account": {\n              "number": "String",\n              "iban": "String"\n            }\n          }\n        },\n        "to_sepa_credit_transfers": {\n          "debtorAccount": {\n            "iban": "12345"\n          },\n          "instructedAmount": {\n            "currency": "EUR",\n            "amount": "10"\n          },\n          "creditorAccount": {\n            "iban": "54321"\n          },\n          "creditorName": "John Miles"\n        },\n        "value": {\n          "currency": "EUR",\n          "amount": "100"\n        },\n        "description": "String"\n      },\n      "transaction_ids": [\n        "902ba3bb-dedd-45e7-9319-2fd3f2cd98a1"\n      ],\n      "status": "COMPLETED",\n      "start_date": "2017-09-19T00:00:00Z",\n      "end_date": "2017-09-19T00:00:00Z",\n      "challenge": {\n        "id": "be1a183d-b301-4b83-b855-5eeffdd3526f",\n        "allowed_attempts": 3,\n        "challenge_type": "SANDBOX_TAN"\n      },\n      "charge": {\n        "summary": "Rent the flat",\n        "value": {\n          "currency": "EUR",\n          "amount": "10"\n        }\n      }\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'yaEI4fsYjuV',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'GUtgZghSlkA',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'EqYTj5JYdvp',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'VHdUGP8BZF1',
							code: 'OBP-20017',
							description: 'Current user does not have access to the view. Please specify a valid value for VIEW_ID.'
						},
						{
							key: 'ecfsI3vgZ9v',
							code: 'OBP-20019',
							description: 'User does not have access to owner view. '
						},
						{
							key: 'prm-jzJvXpJ',
							code: 'OBP-60010',
							description: 'Get Transaction Requests Exception. '
						},
						{
							key: 'xBhB4BmUtEM',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 169,
				section: {
					tag: 'Transaction Request',
					title: 'Save Historical Transactions ',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\nImport the historical transactions.\n       ',
					specificUrl: '/obp/v4.0.0/management/historical/transactions ',
					exampleRequestBody: '{\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work",\n  "posted": "2017-09-19T02:31:05Z",\n  "completed": "2017-09-19T02:31:05Z",\n  "type": "SANDBOX_TAN",\n  "charge_policy": "SHARED"\n}',
					exampleResponseBody: '{\n  "transaction_id": "123",\n  "from": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "to": {\n    "bank_id": "GENODEM1GLS",\n    "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0"\n  },\n  "value": {\n    "currency": "EUR",\n    "amount": "10"\n  },\n  "description": "this is for work",\n  "posted": "2017-09-19T00:00:00Z",\n  "completed": "2017-09-19T00:00:00Z",\n  "transaction_request_type": "SANDBOX_TAN",\n  "charge_policy": "SHARED"\n}',
					typedBody: [{
							key: '6vrDVd4ZLOf',
							path: 'type',
							type: 'object'
						},
						{
							key: 'YD6P0hXo5kI',
							path: 'type',
							type: 'string'
						},
						{
							key: '46oO41NWNeF',
							path: 'description',
							type: 'string'
						},
						{
							key: 'Jx6sHRW67i7',
							path: 'value',
							type: 'object'
						},
						{
							key: '9NrWmqeV4uY',
							path: 'value->amount',
							type: 'string'
						},
						{
							key: 'IRLJ9CyOURX',
							path: 'value->currency',
							type: 'string'
						},
						{
							key: 'npahNtMFlqQ',
							path: 'posted',
							type: 'string'
						},
						{
							key: '_WYfOLAyBoK',
							path: 'to',
							type: 'object'
						},
						{
							key: 'C8us_xmYCVU',
							path: 'to->account_id',
							type: 'string'
						},
						{
							key: 'otVsiUL3ltx',
							path: 'to->bank_id',
							type: 'string'
						},
						{
							key: 'EnphmdV825V',
							path: 'completed',
							type: 'string'
						},
						{
							key: 'Q3xNTnB9gSz',
							path: 'from',
							type: 'object'
						},
						{
							key: '5b_0wXjteRo',
							path: 'from->account_id',
							type: 'string'
						},
						{
							key: 'SjyNK-F3Tvy',
							path: 'from->bank_id',
							type: 'string'
						},
						{
							key: 'JufmG6ynyYT',
							path: 'charge_policy',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'ne2w5HlIpLe',
							code: 'OBP-30111',
							description: 'Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'SZBpvafL2yU',
							code: 'OBP-30110',
							description: 'Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\'-\'/\'.\'/\'_\', the length should be smaller than 255.'
						},
						{
							key: 'vunLc6BSy3n',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '04hPPx12lo5',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'IQutHWnRdEJ',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'pcIdiEzZL0g',
							code: 'OBP-10002',
							description: 'Invalid Number. Could not convert value to a number.'
						},
						{
							key: 'rquBwU5yfKK',
							code: 'OBP-40008',
							description: 'Can\'t send a payment with a value of 0 or less.'
						},
						{
							key: 'yNvwBxIR4qq',
							code: 'OBP-40003',
							description: 'Transaction Request Currency must be the same as From Account Currency.'
						},
						{
							key: 'kK9SglkdDUp',
							code: 'OBP-00003',
							description: 'Transaction Requests is disabled in this API instance.'
						},
						{
							key: '6WmsUsZKNRH',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 170,
				section: {
					tag: 'User',
					title: 'Answer Auth Context Update Challenge',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: '\nAnswer Auth Context Update Challenge.\n',
					specificUrl: '/obp/v4.0.0/users/current/auth-context-updates/AUTH_CONTEXT_UPDATE_ID/challenge',
					exampleRequestBody: '{\n  "answer": "12345678"\n}',
					exampleResponseBody: '{\n  "user_auth_context_update_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432",\n  "status": "INITIATED"\n}',
					typedBody: [{
							key: '6WhnWeuHoLP',
							path: 'type',
							type: 'object'
						},
						{
							key: 'P841ktjF3Ig',
							path: 'answer',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'pbiI7MN5xTm',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'G9oG68AtC61',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: '0WZ66C_fxgq',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: '8wh_iyL5eIA',
							code: 'OBP-50200',
							description: 'Connector cannot return the data we requested.'
						},
						{
							key: 'DGxQLYshhg7',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 171,
				section: {
					tag: 'User',
					title: 'Create User Auth Context',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create User Auth Context. These key value pairs will be propagated over connector to adapter. Normally used for mapping OBP user and \n Bank User/Customer. \nAuthentication is Mandatory\n',
					specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context',
					exampleRequestBody: '{\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432"\n}',
					exampleResponseBody: '{\n  "user_auth_context_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432"\n}',
					typedBody: [{
							key: '9dFPnhmFWJt',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Dlbugb3BOGl',
							path: 'value',
							type: 'string'
						},
						{
							key: 'acfe3WpXp5y',
							path: 'key',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '1wfiGu7MbtD',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'NWMKGMD7z2s',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'e7FOBnAT_DZ',
							code: 'OBP-30053',
							description: 'Could not insert the UserAuthContext'
						},
						{
							key: 'D8FCYMIuzvv',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 172,
				section: {
					tag: 'User',
					title: 'Create User Auth Context Update',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create User Auth Context Update.\nAuthentication is Mandatory\n\nA One Time Password (OTP) (AKA security challenge) is sent Out of Bounds (OOB) to the User via the transport defined in SCA_METHOD\nSCA_METHOD is typically "SMS" or "EMAIL". "EMAIL" is used for testing purposes.\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/users/current/auth-context-updates/SCA_METHOD',
					exampleRequestBody: '{\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432"\n}',
					exampleResponseBody: '{\n  "user_auth_context_update_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "key": "CUSTOMER_NUMBER",\n  "value": "78987432",\n  "status": "INITIATED"\n}',
					typedBody: [{
							key: 'ta5l-3Qv3KQ',
							path: 'type',
							type: 'object'
						},
						{
							key: 'tEhBQ5i8LNM',
							path: 'value',
							type: 'string'
						},
						{
							key: '6ViXzJsflyn',
							path: 'key',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'LJ3LTPvAjfl',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'VqtbHxxvqdj',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'y02yvDvXdKb',
							code: 'OBP-30053',
							description: 'Could not insert the UserAuthContext'
						},
						{
							key: 'FLA5jivP90d',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 173,
				section: {
					tag: 'User',
					title: 'Create User.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Creates OBP user.\n No authorisation (currently) required.\n\n Mimics current webform to Register.\n\n Requires username(email) and password.\n\n Returns 409 error if username not unique.\n\n May require validation of email address.\n\n',
					specificUrl: '/obp/v4.0.0/users',
					exampleRequestBody: '{\n  "email": "eveline@example.com",\n  "username": "felixsmith",\n  "password": "String",\n  "first_name": "Simon",\n  "last_name": "Redfern"\n}',
					exampleResponseBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "email": "eveline@example.com",\n  "provider_id": "Chris",\n  "provider": "http://127.0.0.1:8080",\n  "username": "felixsmith",\n  "entitlements": {\n    "list": [\n      {\n        "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n        "role_name": "CanQueryOtherUser",\n        "bank_id": "GENODEM1GLS"\n      }\n    ]\n  }\n}',
					typedBody: [{
							key: 'htAcFvTx-CO',
							path: 'type',
							type: 'object'
						},
						{
							key: 'zk0SKTgtjOw',
							path: 'email',
							type: 'string'
						},
						{
							key: 'kMnV3tsLjH4',
							path: 'first_name',
							type: 'string'
						},
						{
							key: 'RhfXItEwmaV',
							path: 'password',
							type: 'string'
						},
						{
							key: '_OYWLWtTV-G',
							path: 'username',
							type: 'string'
						},
						{
							key: 'pYujOB8jRgH',
							path: 'last_name',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'AqQ-gFx1_mV',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'u4PSpSDgKKU',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'RadiWpzmQkq',
							code: 'OBP-30207',
							description: 'Invalid Password Format. Your password should EITHER be at least 10 characters long and contain mixed numbers and both upper and lower case letters and at least one special character, OR be longer than 16 characters.'
						},
						{
							key: '5zjRvBZgwb9',
							code: '<no code>',
							description: 'Error occurred during user creation.'
						},
						{
							key: '8KYrCL5Ca71',
							code: '<no code>',
							description: 'User with the same username already exists.'
						},
						{
							key: '2BFDJ4UUdDV',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 174,
				section: {
					tag: 'User',
					title: 'Delete User Auth Context',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete a User AuthContext of the User specified by USER_AUTH_CONTEXT_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context/USER_AUTH_CONTEXT_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'un9yGTg43q',
							path: 'type',
							type: 'object'
						},
						{
							key: '3YL3AH-7nm',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'cY1uwJvlon',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'HSFx4wJk-w',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'i9F-Vv95zh',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 175,
				section: {
					tag: 'User',
					title: 'Delete User\'s Auth Contexts',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Delete the Auth Contexts of a User specified by USER_ID.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'V8GKXiPmkr',
							path: 'type',
							type: 'object'
						},
						{
							key: 'awvg1LIesu',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '1AY6d7F8iW',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: '2W7B32Yyju',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'gC1w_IsHkZ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 176,
				section: {
					tag: 'User',
					title: 'Get User (Current)',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get the logged in user\n\nAuthentication is Mandatory\n      ',
					specificUrl: '/obp/v4.0.0/users/current',
					exampleResponseBody: '{\n  "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "email": "eveline@example.com",\n  "provider_id": "Chris",\n  "provider": "http://127.0.0.1:8080",\n  "username": "felixsmith",\n  "entitlements": {\n    "list": [\n      {\n        "entitlement_id": "6fb17583-1e49-4435-bb74-a14fe0996723",\n        "role_name": "CanQueryOtherUser",\n        "bank_id": "GENODEM1GLS"\n      }\n    ]\n  }\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'iS_6Wfdt5h',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'f4WQWdEYWo',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 177,
				section: {
					tag: 'User',
					title: 'Get User Auth Contexts',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get User Auth Contexts for a User.\n\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/USER_ID/auth-context',
					exampleResponseBody: '{\n  "user_auth_contexts": [\n    {\n      "user_auth_context_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "key": "CUSTOMER_NUMBER",\n      "value": "78987432"\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'NM7Ri-Lp7Im',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 's_Yd99Mh4Ie',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'udh6PTYFQBR',
							code: 'OBP-30053',
							description: 'Could not insert the UserAuthContext'
						},
						{
							key: 'etk1cjJprHr',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 178,
				section: {
					tag: 'User',
					title: 'Get User Lock Status',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '\nGet User Login Status.\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/USERNAME/lock-status',
					exampleResponseBody: '{\n  "username": "felixsmith",\n  "bad_attempts_since_last_success_or_reset": 0,\n  "last_failure_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'TmuLsY-GfYR',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Uoj6kD0Yxga',
							code: 'OBP-20027',
							description: 'User not found by username.'
						},
						{
							key: 'SoismnBnZyK',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'Bn4lKQbLPty',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 179,
				section: {
					tag: 'User',
					title: 'Refresh User.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: ' The endpoint is used for updating the accounts, views, account holders for the user.\n As to the Json body, you can leave it as Empty. \n This call will get data from backend, no need to prepare the json body in api side.\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/USER_ID/refresh',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "duration_time": "10 ms"\n}',
					typedBody: [{
							key: 'ixiqTBvoXsU',
							path: 'type',
							type: 'object'
						},
						{
							key: '9qGRlE9KCDi',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: '2sxeZ0nP1JZ',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'FNgZ6UfDo-G',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 180,
				section: {
					tag: 'User',
					title: 'Unlock the user',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: '\nUnlock a User.\n\n(Perhaps the user was locked due to multiple failed login attempts)\n\nAuthentication is Mandatory\n\n',
					specificUrl: '/obp/v4.0.0/users/USERNAME/lock-status',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "username": "felixsmith",\n  "bad_attempts_since_last_success_or_reset": 0,\n  "last_failure_date": "2017-09-19T00:00:00Z"\n}',
					typedBody: [{
							key: 'FOHbF25Yvs',
							path: 'type',
							type: 'object'
						},
						{
							key: 'tIfr2buwAl',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'EDpHpV5L8m',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'TdX-Tg1V_z',
							code: 'OBP-20027',
							description: 'User not found by username.'
						},
						{
							key: 'oil374t1cl',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: '9YEL7lRv--',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 181,
				section: {
					tag: 'View',
					title: 'Create View.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create a view on bank account\n\n Authentication is Mandatory and the user needs to have access to the owner view.\n The \'alias\' field in the JSON can take one of three values:\n\n * _public_: to use the public alias if there is one specified for the other account.\n * _private_: to use the public alias if there is one specified for the other account.\n\n * _\'\'(empty string)_: to use no alias; the view shows the real name of the other account.\n\n The \'hide_metadata_if_alias_used\' field in the JSON can take boolean values. If it is set to `true` and there is an alias on the other account then the other accounts\' metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\n\n The \'allowed_actions\' field is a list containing the name of the actions allowed on this view, all the actions contained will be set to `true` on the view creation, the rest will be set to `false`.\n\n You MUST use a leading _ (underscore) in the view name because other view names are reserved for OBP system views.\n ',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views',
					exampleRequestBody: '{\n  "name": "_test",\n  "description": "This view is for family",\n  "metadata_view": "_test",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": false,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
					exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
					typedBody: [{
							key: 'M6Jg4X25zXx',
							path: 'type',
							type: 'object'
						},
						{
							key: 'KeDSNtBfGq1',
							path: 'allowed_actions',
							type: 'array'
						},
						{
							key: 'HQTkhB84Q3Z',
							path: 'allowed_actions->items',
							type: 'string'
						},
						{
							key: 'iph5tHZGR-Q',
							path: 'hide_metadata_if_alias_used',
							type: 'boolean'
						},
						{
							key: 'VvIotv4WB-l',
							path: 'name',
							type: 'string'
						},
						{
							key: 'XcxjPRxw1cN',
							path: 'description',
							type: 'string'
						},
						{
							key: 'fpPlGM_xIE8',
							path: 'is_public',
							type: 'boolean'
						},
						{
							key: '8uRPwKNIO3D',
							path: 'metadata_view',
							type: 'string'
						},
						{
							key: '04ev-3ncOt_',
							path: 'which_alias_to_use',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'p2zv9mSoXq3',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'Ftt7MVdFDDU',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'VE3AzAcN4_V',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 't5ovnP_I77E',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 182,
				section: {
					tag: 'View',
					title: 'Delete View',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Deletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'v9VU7ztX2l',
							path: 'type',
							type: 'object'
						},
						{
							key: 'GJy_JNFUaz',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'z0tfnRkHEk',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'GX6ql6yHGW',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'HflJ8Md4Mn',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'OI8on77QFi',
							code: '<no code>',
							description: 'user does not have owner access'
						}
					]
				}
			},
			{
				index: 183,
				section: {
					tag: 'View',
					title: 'Get access.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.\n\nAuthentication is Mandatory\nand the user needs to have access to the owner view.\n\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions',
					exampleResponseBody: '{\n  "permissions": [\n    {\n      "user": {\n        "id": "5995d6a2-01b3-423c-a173-5481df49bdaf",\n        "provider": "http://127.0.0.1:8080",\n        "display_name": "OBP"\n      },\n      "views": [\n        {\n          "id": "123",\n          "short_name": "short_name",\n          "description": "description",\n          "is_public": true,\n          "alias": "None",\n          "hide_metadata_if_alias_used": true,\n          "can_add_comment": true,\n          "can_add_corporate_location": true,\n          "can_add_image": true,\n          "can_add_image_url": true,\n          "can_add_more_info": true,\n          "can_add_open_corporates_url": true,\n          "can_add_physical_location": true,\n          "can_add_private_alias": true,\n          "can_add_public_alias": true,\n          "can_add_tag": true,\n          "can_add_url": true,\n          "can_add_where_tag": true,\n          "can_delete_comment": true,\n          "can_delete_corporate_location": true,\n          "can_delete_image": true,\n          "can_delete_physical_location": true,\n          "can_delete_tag": true,\n          "can_delete_where_tag": true,\n          "can_edit_owner_comment": true,\n          "can_see_bank_account_balance": true,\n          "can_see_bank_account_bank_name": true,\n          "can_see_bank_account_currency": true,\n          "can_see_bank_account_iban": true,\n          "can_see_bank_account_label": true,\n          "can_see_bank_account_national_identifier": true,\n          "can_see_bank_account_number": true,\n          "can_see_bank_account_owners": true,\n          "can_see_bank_account_swift_bic": true,\n          "can_see_bank_account_type": true,\n          "can_see_comments": true,\n          "can_see_corporate_location": true,\n          "can_see_image_url": true,\n          "can_see_images": true,\n          "can_see_more_info": true,\n          "can_see_open_corporates_url": true,\n          "can_see_other_account_bank_name": true,\n          "can_see_other_account_iban": true,\n          "can_see_other_account_kind": true,\n          "can_see_other_account_metadata": true,\n          "can_see_other_account_national_identifier": true,\n          "can_see_other_account_number": true,\n          "can_see_other_account_swift_bic": true,\n          "can_see_owner_comment": true,\n          "can_see_physical_location": true,\n          "can_see_private_alias": true,\n          "can_see_public_alias": true,\n          "can_see_tags": true,\n          "can_see_transaction_amount": true,\n          "can_see_transaction_balance": true,\n          "can_see_transaction_currency": true,\n          "can_see_transaction_description": true,\n          "can_see_transaction_finish_date": true,\n          "can_see_transaction_metadata": true,\n          "can_see_transaction_other_bank_account": true,\n          "can_see_transaction_start_date": true,\n          "can_see_transaction_this_bank_account": true,\n          "can_see_transaction_type": true,\n          "can_see_url": true,\n          "can_see_where_tag": true\n        }\n      ]\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'ghQwtPIO2PL',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'B74IJfCZW2n',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'plioaBJdXtH',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'O5Id5tGAfJx',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 184,
				section: {
					tag: 'View',
					title: 'Get Account access for User.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Returns the list of the views at BANK_ID for account ACCOUNT_ID that a user identified by PROVIDER_ID at their provider PROVIDER has access to.\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for USER_ID and PROVIDER.\n\nAuthentication is Mandatory\n\nThe user needs to have access to the owner view.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID',
					exampleResponseBody: '{\n  "views": [\n    {\n      "id": "1234",\n      "short_name": "short_name",\n      "description": "description",\n      "metadata_view": "owner",\n      "is_public": true,\n      "alias": "No",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_add_counterparty": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_query_available_funds": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true,\n      "can_see_bank_routing_scheme": true,\n      "can_see_bank_routing_address": true,\n      "can_see_bank_account_routing_scheme": true,\n      "can_see_bank_account_routing_address": true,\n      "can_see_other_bank_routing_scheme": true,\n      "can_see_other_bank_routing_address": true,\n      "can_see_other_account_routing_scheme": true,\n      "can_see_other_account_routing_address": true,\n      "can_add_transaction_request_to_own_account": true,\n      "can_add_transaction_request_to_any_account": true,\n      "can_see_bank_account_credit_limit": true\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 's4va06CasD-',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'LRx0L5RXB5c',
							code: 'OBP-30001',
							description: 'Bank not found. Please specify a valid value for BANK_ID.'
						},
						{
							key: 'CsGS4BgZfxt',
							code: 'OBP-30003',
							description: 'Account not found. Please specify a valid value for ACCOUNT_ID.'
						},
						{
							key: 'KhksxS2cBIn',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 185,
				section: {
					tag: 'View',
					title: 'Get Views for Account.',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: '#Views\n\n\nViews in Open Bank Project provide a mechanism for fine grained access control and delegation to Accounts and Transactions. Account holders use the \'owner\' view by default. Delegated access is made through other views for example \'accountants\', \'share-holders\' or \'tagging-application\'. Views can be created via the API and each view has a list of entitlements.\n\nViews on accounts and transactions filter the underlying data to redact certain fields for certain users. For instance the balance on an account may be hidden from the public. The way to know what is possible on a view is determined in the following JSON.\n\n**Data:** When a view moderates a set of data, some fields my contain the value `null` rather than the original value. This indicates either that the user is not allowed to see the original data or the field is empty.\n\nThere is currently one exception to this rule; the \'holder\' field in the JSON contains always a value which is either an alias or the real name - indicated by the \'is_alias\' field.\n\n**Action:** When a user performs an action like trying to post a comment (with POST API call), if he is not allowed, the body response will contain an error message.\n\n**Metadata:**\nTransaction metadata (like images, tags, comments, etc.) will appears *ONLY* on the view where they have been created e.g. comments posted to the public view only appear on the public view.\n\nThe other account metadata fields (like image_URL, more_info, etc.) are unique through all the views. Example, if a user edits the \'more_info\' field in the \'team\' view, then the view \'authorities\' will show the new value (if it is allowed to do it).\n\n# All\n*Optional*\n\nReturns the list of the views created for account ACCOUNT_ID at BANK_ID.\n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views',
					exampleResponseBody: '{\n  "views": [\n    {\n      "id": "1234",\n      "short_name": "short_name",\n      "description": "description",\n      "metadata_view": "owner",\n      "is_public": true,\n      "alias": "No",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_add_counterparty": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_query_available_funds": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true,\n      "can_see_bank_routing_scheme": true,\n      "can_see_bank_routing_address": true,\n      "can_see_bank_account_routing_scheme": true,\n      "can_see_bank_account_routing_address": true,\n      "can_see_other_bank_routing_scheme": true,\n      "can_see_other_bank_routing_address": true,\n      "can_see_other_account_routing_scheme": true,\n      "can_see_other_account_routing_address": true,\n      "can_add_transaction_request_to_own_account": true,\n      "can_add_transaction_request_to_any_account": true,\n      "can_see_bank_account_credit_limit": true\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'x0rVQ8afkw6',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'OP7rdPyBAaL',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'zHaupK_pJyz',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 186,
				section: {
					tag: 'View',
					title: 'Grant User access to a list of views.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Grants the user identified by PROVIDER_ID at their provider PROVIDER access to a list of views at BANK_ID for account ACCOUNT_ID.\n\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for PROVIDER_ID and PROVIDER.\n\nAuthentication is Mandatory\n\nThe User needs to have access to the owner view.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views',
					exampleRequestBody: '{\n  "views": [\n    "_family",\n    "_work"\n  ]\n}',
					exampleResponseBody: '{\n  "views": [\n    {\n      "id": "123",\n      "short_name": "short_name",\n      "description": "description",\n      "is_public": true,\n      "alias": "None",\n      "hide_metadata_if_alias_used": true,\n      "can_add_comment": true,\n      "can_add_corporate_location": true,\n      "can_add_image": true,\n      "can_add_image_url": true,\n      "can_add_more_info": true,\n      "can_add_open_corporates_url": true,\n      "can_add_physical_location": true,\n      "can_add_private_alias": true,\n      "can_add_public_alias": true,\n      "can_add_tag": true,\n      "can_add_url": true,\n      "can_add_where_tag": true,\n      "can_delete_comment": true,\n      "can_delete_corporate_location": true,\n      "can_delete_image": true,\n      "can_delete_physical_location": true,\n      "can_delete_tag": true,\n      "can_delete_where_tag": true,\n      "can_edit_owner_comment": true,\n      "can_see_bank_account_balance": true,\n      "can_see_bank_account_bank_name": true,\n      "can_see_bank_account_currency": true,\n      "can_see_bank_account_iban": true,\n      "can_see_bank_account_label": true,\n      "can_see_bank_account_national_identifier": true,\n      "can_see_bank_account_number": true,\n      "can_see_bank_account_owners": true,\n      "can_see_bank_account_swift_bic": true,\n      "can_see_bank_account_type": true,\n      "can_see_comments": true,\n      "can_see_corporate_location": true,\n      "can_see_image_url": true,\n      "can_see_images": true,\n      "can_see_more_info": true,\n      "can_see_open_corporates_url": true,\n      "can_see_other_account_bank_name": true,\n      "can_see_other_account_iban": true,\n      "can_see_other_account_kind": true,\n      "can_see_other_account_metadata": true,\n      "can_see_other_account_national_identifier": true,\n      "can_see_other_account_number": true,\n      "can_see_other_account_swift_bic": true,\n      "can_see_owner_comment": true,\n      "can_see_physical_location": true,\n      "can_see_private_alias": true,\n      "can_see_public_alias": true,\n      "can_see_tags": true,\n      "can_see_transaction_amount": true,\n      "can_see_transaction_balance": true,\n      "can_see_transaction_currency": true,\n      "can_see_transaction_description": true,\n      "can_see_transaction_finish_date": true,\n      "can_see_transaction_metadata": true,\n      "can_see_transaction_other_bank_account": true,\n      "can_see_transaction_start_date": true,\n      "can_see_transaction_this_bank_account": true,\n      "can_see_transaction_type": true,\n      "can_see_url": true,\n      "can_see_where_tag": true\n    }\n  ]\n}',
					typedBody: [{
							key: 'XAPiMlsxZ_',
							path: 'type',
							type: 'object'
						},
						{
							key: 'wFXjdjXOor',
							path: 'views',
							type: 'array'
						},
						{
							key: 'fM8GZ0nDgB',
							path: 'views->items',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'N9o-gRfamt',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'chH-8ecS_u',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'M1aeM8wL9-',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'M3BFWPL76H',
							code: '<no code>',
							description: 'wrong format JSON'
						},
						{
							key: 'KZtBF-qBXb',
							code: '<no code>',
							description: 'could not save the privilege'
						},
						{
							key: 'j_RNF-i0py',
							code: '<no code>',
							description: 'user does not have access to owner view on account'
						}
					]
				}
			},
			{
				index: 187,
				section: {
					tag: 'View',
					title: 'Grant User access to View.',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Grants the User identified by PROVIDER_ID at PROVIDER access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.\n\nAll url parameters must be [%-encoded](http://en.wikipedia.org/wiki/Percent-encoding), which is often especially relevant for PROVIDER and PROVIDER_ID.\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nGranting access to a public view will return an error message, as the user already has access.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "id": "123",\n  "short_name": "short_name",\n  "description": "description",\n  "is_public": true,\n  "alias": "None",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true\n}',
					typedBody: [{
							key: '8pvFEjvwYqn',
							path: 'type',
							type: 'object'
						},
						{
							key: 'Xq4VbUbG-a4',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'iQSF-Y-5mYB',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'AEpAvUD5GGD',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'NzEQVM2c8fQ',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: 'qsZBICqTy4w',
							code: '<no code>',
							description: 'could not save the privilege'
						},
						{
							key: '5GXG9C24OIt',
							code: '<no code>',
							description: 'user does not have access to owner view on account'
						}
					]
				}
			},
			{
				index: 188,
				section: {
					tag: 'View',
					title: 'Revoke access to all Views on Account',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: '"Revokes access to all Views on an Account for a certain User.\n\n\nThe User is identified by PROVIDER_ID at their PROVIDER.\n\nThe Account is specified by BANK_ID and ACCOUNT_ID.\n\nThe View is specified by VIEW_ID.\n\n\nPROVIDER (may be a URL so) must be URL Encoded.\n\nPROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.\n\nAttempting to revoke access to a public view will return an error message.\n\nAn Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.\n\n      \n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'QXFoQR4MX8G',
							path: 'type',
							type: 'object'
						},
						{
							key: 'LvLZlSM9faZ',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'Bl4_LK-zEyF',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'QlZ7zNu0LDB',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'RXJWIrc5aJM',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						},
						{
							key: '2ah6vLCwDn8',
							code: '<no code>',
							description: 'user does not have access to owner view on account'
						}
					]
				}
			},
			{
				index: 189,
				section: {
					tag: 'View',
					title: 'Revoke access to one View.',
					requestType: {
						type: 'DELETE',
						color: '#EF476F'
					},
					description: 'Revokes access to a View on an Account for a certain User.\n\n\nThe User is identified by PROVIDER_ID at their PROVIDER.\n\nThe Account is specified by BANK_ID and ACCOUNT_ID.\n\nThe View is specified by VIEW_ID.\n\n\nPROVIDER (may be a URL so) must be URL Encoded.\n\nPROVIDER_ID is normally equivalent to USERNAME. However, see Get User by ID or GET Current User for Provider information.\n\nAttempting to revoke access to a public view will return an error message.\n\nAn Account Owner cannot revoke access to an Owner View unless at least one other User has Owner View access.\n\n      \n\nAuthentication is Mandatory and the user needs to have access to the owner view.',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/permissions/PROVIDER/PROVIDER_ID/views/VIEW_ID',
					exampleRequestBody: '{\n  "jsonString": "{}"\n}',
					exampleResponseBody: '{\n  "jsonString": "{}"\n}',
					typedBody: [{
							key: 'i7vx4R1JdpZ',
							path: 'type',
							type: 'object'
						},
						{
							key: 'xtdafkQPUzQ',
							path: 'jsonString',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'rWP3qQ_Fq-Q',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'xSKY71oXWMo',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'vaYZun7TBPG',
							code: '<no code>',
							description: 'could not save the privilege'
						},
						{
							key: 'nTwQxBd6Km4',
							code: '<no code>',
							description: 'user does not have access to owner view on account'
						},
						{
							key: 'Y6kEEXg328B',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 190,
				section: {
					tag: 'View',
					title: 'Update View.',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Update an existing view on a bank account\n\nAuthentication is Mandatory and the user needs to have access to the owner view.\n\nThe json sent is the same as during view creation (above), with one difference: the \'name\' field\nof a view is not editable (it is only set when a view is created)',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/accounts/ACCOUNT_ID/views/VIEW_ID',
					exampleRequestBody: '{\n  "description": "this is for family",\n  "metadata_view": "owner",\n  "is_public": true,\n  "which_alias_to_use": "family",\n  "hide_metadata_if_alias_used": true,\n  "allowed_actions": [\n    "can_see_transaction_this_bank_account",\n    "can_see_transaction_other_bank_account",\n    "can_see_transaction_metadata",\n    "can_see_transaction_label",\n    "can_see_transaction_amount",\n    "can_see_transaction_type",\n    "can_see_transaction_currency",\n    "can_see_transaction_start_date",\n    "can_see_transaction_finish_date",\n    "can_see_transaction_balance",\n    "can_see_comments",\n    "can_see_narrative",\n    "can_see_tags",\n    "can_see_images",\n    "can_see_bank_account_owners",\n    "can_see_bank_account_type",\n    "can_see_bank_account_balance",\n    "can_see_bank_account_currency",\n    "can_see_bank_account_label",\n    "can_see_bank_account_national_identifier",\n    "can_see_bank_account_swift_bic",\n    "can_see_bank_account_iban",\n    "can_see_bank_account_number",\n    "can_see_bank_account_bank_name",\n    "can_see_other_account_national_identifier",\n    "can_see_other_account_swift_bic",\n    "can_see_other_account_iban",\n    "can_see_other_account_bank_name",\n    "can_see_other_account_number",\n    "can_see_other_account_metadata",\n    "can_see_other_account_kind",\n    "can_see_more_info",\n    "can_see_url",\n    "can_see_image_url",\n    "can_see_open_corporates_url",\n    "can_see_corporate_location",\n    "can_see_physical_location",\n    "can_see_public_alias",\n    "can_see_private_alias",\n    "can_add_more_info",\n    "can_add_url",\n    "can_add_image_url",\n    "can_add_open_corporates_url",\n    "can_add_corporate_location",\n    "can_add_physical_location",\n    "can_add_public_alias",\n    "can_add_private_alias",\n    "can_delete_corporate_location",\n    "can_delete_physical_location",\n    "can_edit_narrative",\n    "can_add_comment",\n    "can_delete_comment",\n    "can_add_tag",\n    "can_delete_tag",\n    "can_add_image",\n    "can_delete_image",\n    "can_add_where_tag",\n    "can_see_where_tag",\n    "can_delete_where_tag",\n    "can_create_counterparty",\n    "can_see_bank_routing_scheme",\n    "can_see_bank_routing_address",\n    "can_see_bank_account_routing_scheme",\n    "can_see_bank_account_routing_address",\n    "can_see_other_bank_routing_scheme",\n    "can_see_other_bank_routing_address",\n    "can_see_other_account_routing_scheme",\n    "can_see_other_account_routing_address",\n    "can_query_available_funds"\n  ]\n}',
					exampleResponseBody: '{\n  "id": "1234",\n  "short_name": "short_name",\n  "description": "description",\n  "metadata_view": "owner",\n  "is_public": true,\n  "alias": "No",\n  "hide_metadata_if_alias_used": true,\n  "can_add_comment": true,\n  "can_add_corporate_location": true,\n  "can_add_image": true,\n  "can_add_image_url": true,\n  "can_add_more_info": true,\n  "can_add_open_corporates_url": true,\n  "can_add_physical_location": true,\n  "can_add_private_alias": true,\n  "can_add_public_alias": true,\n  "can_add_tag": true,\n  "can_add_url": true,\n  "can_add_where_tag": true,\n  "can_delete_comment": true,\n  "can_add_counterparty": true,\n  "can_delete_corporate_location": true,\n  "can_delete_image": true,\n  "can_delete_physical_location": true,\n  "can_delete_tag": true,\n  "can_delete_where_tag": true,\n  "can_edit_owner_comment": true,\n  "can_see_bank_account_balance": true,\n  "can_query_available_funds": true,\n  "can_see_bank_account_bank_name": true,\n  "can_see_bank_account_currency": true,\n  "can_see_bank_account_iban": true,\n  "can_see_bank_account_label": true,\n  "can_see_bank_account_national_identifier": true,\n  "can_see_bank_account_number": true,\n  "can_see_bank_account_owners": true,\n  "can_see_bank_account_swift_bic": true,\n  "can_see_bank_account_type": true,\n  "can_see_comments": true,\n  "can_see_corporate_location": true,\n  "can_see_image_url": true,\n  "can_see_images": true,\n  "can_see_more_info": true,\n  "can_see_open_corporates_url": true,\n  "can_see_other_account_bank_name": true,\n  "can_see_other_account_iban": true,\n  "can_see_other_account_kind": true,\n  "can_see_other_account_metadata": true,\n  "can_see_other_account_national_identifier": true,\n  "can_see_other_account_number": true,\n  "can_see_other_account_swift_bic": true,\n  "can_see_owner_comment": true,\n  "can_see_physical_location": true,\n  "can_see_private_alias": true,\n  "can_see_public_alias": true,\n  "can_see_tags": true,\n  "can_see_transaction_amount": true,\n  "can_see_transaction_balance": true,\n  "can_see_transaction_currency": true,\n  "can_see_transaction_description": true,\n  "can_see_transaction_finish_date": true,\n  "can_see_transaction_metadata": true,\n  "can_see_transaction_other_bank_account": true,\n  "can_see_transaction_start_date": true,\n  "can_see_transaction_this_bank_account": true,\n  "can_see_transaction_type": true,\n  "can_see_url": true,\n  "can_see_where_tag": true,\n  "can_see_bank_routing_scheme": true,\n  "can_see_bank_routing_address": true,\n  "can_see_bank_account_routing_scheme": true,\n  "can_see_bank_account_routing_address": true,\n  "can_see_other_bank_routing_scheme": true,\n  "can_see_other_bank_routing_address": true,\n  "can_see_other_account_routing_scheme": true,\n  "can_see_other_account_routing_address": true,\n  "can_add_transaction_request_to_own_account": true,\n  "can_add_transaction_request_to_any_account": true,\n  "can_see_bank_account_credit_limit": true\n}',
					typedBody: [{
							key: 'dls9rEbzoiS',
							path: 'type',
							type: 'object'
						},
						{
							key: 'v9cudInRrUT',
							path: 'allowed_actions',
							type: 'array'
						},
						{
							key: 'lcKiznStRpj',
							path: 'allowed_actions->items',
							type: 'string'
						},
						{
							key: 'wCKWt72zrAZ',
							path: 'description',
							type: 'string'
						},
						{
							key: '4Mu9Fxsr39A',
							path: 'hide_metadata_if_alias_used',
							type: 'boolean'
						},
						{
							key: 'enTNLLPQEwV',
							path: 'metadata_view',
							type: 'string'
						},
						{
							key: 'MTKSbwxmXtG',
							path: 'is_public',
							type: 'boolean'
						},
						{
							key: 'VNv_cIphAEP',
							path: 'which_alias_to_use',
							type: 'string'
						}
					],
					possibleErrors: [{
							key: 'n74sdFxX-bY',
							code: 'OBP-10001',
							description: 'Incorrect json format.'
						},
						{
							key: 'RUz5bMh-LGi',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'YUMgCAm_qD6',
							code: 'OBP-30018',
							description: 'Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. '
						},
						{
							key: 'X4zW8lg4TS2',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			},
			{
				index: 191,
				section: {
					tag: 'Webhook',
					title: 'Create an Account Webhook',
					requestType: {
						type: 'POST',
						color: '#005EB8'
					},
					description: 'Create an Account Webhook\n\nWebhooks are used to call external URLs when certain events happen.\n\nAccount Webhooks focus on events around accounts.\n\nFor instance, a webhook could be used to notify an external service if a balance changes on an account.\n\nThis functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
					exampleRequestBody: '{\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "trigger_name": "OnBalanceChange",\n  "url": "https://localhost.openbankproject.com",\n  "http_method": "POST",\n  "http_protocol": "HTTP/1.1",\n  "is_active": "true"\n}',
					exampleResponseBody: '{\n  "account_webhook_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "bank_id": "GENODEM1GLS",\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "trigger_name": "OnBalanceChange",\n  "url": "https://localhost.openbankproject.com",\n  "http_method": "POST",\n  "http_protocol": "HTTP/1.1",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "is_active": true\n}',
					typedBody: [{
							key: 'gbaPh-CUetd',
							path: 'type',
							type: 'object'
						},
						{
							key: 'GnkBODeT4hw',
							path: 'http_method',
							type: 'string'
						},
						{
							key: 'c8t5bAXaUbj',
							path: 'is_active',
							type: 'string'
						},
						{
							key: 'ftJCtDEbPKd',
							path: 'http_protocol',
							type: 'string'
						},
						{
							key: 'kzE1JZv7pG-',
							path: 'trigger_name',
							type: 'string'
						},
						{
							key: 'n9nwsFxAXbJ',
							path: 'account_id',
							type: 'string'
						},
						{
							key: 'm7GjsWX0ngY',
							path: 'url',
							type: 'string'
						}
					],
					possibleErrors: [{
						key: '2Uxlu70x4sd',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 192,
				section: {
					tag: 'Webhook',
					title: 'Enable/Disable an Account Webhook',
					requestType: {
						type: 'PUT',
						color: '#FFD166'
					},
					description: 'Enable/Disable an Account Webhook\n\n\nWebhooks are used to call external URLs when certain events happen.\n\nAccount Webhooks focus on events around accounts.\n\nFor instance, a webhook could be used to notify an external service if a balance changes on an account.\n\nThis functionality is work in progress! Please note that only implemented trigger is: OnBalanceChange\n',
					specificUrl: '/obp/v4.0.0/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
					exampleRequestBody: '{\n  "account_webhook_id": "fc23a7e2-7dd2-4bdf-a0b4-ae31232a4762",\n  "is_active": "true"\n}',
					exampleResponseBody: '{\n  "account_webhook_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n  "bank_id": "GENODEM1GLS",\n  "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n  "trigger_name": "OnBalanceChange",\n  "url": "https://localhost.openbankproject.com",\n  "http_method": "POST",\n  "http_protocol": "HTTP/1.1",\n  "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n  "is_active": true\n}',
					typedBody: [{
							key: 'qq82I-AnAvc',
							path: 'type',
							type: 'object'
						},
						{
							key: 'f4x6n4jD8VP',
							path: 'is_active',
							type: 'string'
						},
						{
							key: 'BMTxdc0INjq',
							path: 'account_webhook_id',
							type: 'string'
						}
					],
					possibleErrors: [{
						key: 'CH62feOugnb',
						code: 'OBP-50000',
						description: 'Unknown Error.'
					}]
				}
			},
			{
				index: 193,
				section: {
					tag: 'Webhook',
					title: 'Get Account Webhooks',
					requestType: {
						type: 'GET',
						color: '#06D6A0'
					},
					description: 'Get Account Webhooks.\n\nPossible custom URL parameters for pagination:\n\n* limit=NUMBER\n* offset=NUMBER\n* account_id=STRING\n* user_id=STRING\n\n\n',
					specificUrl: '/obp/v4.0.0/management/banks/d833731bfb92ee40d5b2da9aa66cef9/account-web-hooks',
					exampleResponseBody: '{\n  "web_hooks": [\n    {\n      "account_webhook_id": "613c83ea-80f9-4560-8404-b9cd4ec42a7f",\n      "bank_id": "GENODEM1GLS",\n      "account_id": "8ca8a7e4-6d02-40e3-a129-0b2bf89de9f0",\n      "trigger_name": "OnBalanceChange",\n      "url": "https://localhost.openbankproject.com",\n      "http_method": "POST",\n      "http_protocol": "HTTP/1.1",\n      "created_by_user_id": "9ca9a7e4-6d02-40e3-a129-0b2bf89de9b1",\n      "is_active": true\n    }\n  ]\n}',
					typedBody: [],
					possibleErrors: [{
							key: 'xIM0u4YlNde',
							code: 'OBP-20001',
							description: 'User not logged in. Authentication is required!'
						},
						{
							key: 'pC6nhB0wBL8',
							code: 'OBP-20006',
							description: 'User is missing one or more roles'
						},
						{
							key: 'qw2ClswCSNM',
							code: 'OBP-50000',
							description: 'Unknown Error.'
						}
					]
				}
			}
		]
	},
	user: {
		username: 'hafbau@yahoo.com',
		userImageUrl: 'https://avatars2.githubusercontent.com/u/9512417?v=4',
		token: ''
	}
}